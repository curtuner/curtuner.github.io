{"md5":"65163cc8fd4e864a428cf068c2f6ea49","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n本文主要简单介绍一下Python的web框架的一些知识，不会介绍具体的实现，最多讲讲原理。考虑到大家对于Python不熟悉，所以会夹杂一些Python特性的讲解。最后还会讲讲一些关于服务器编程的知识。\n这篇文章的话题主要是网关，\nWeb一般是World Wide Web的简称，对于用户来说，Web是一个由巨大的全球范围的文档或者说Web页面集合组成的。Web开发目的也就是提供给用户各种Web页面，这些Web页面可以包含各种资源的。现代的Web页面提供了Web客户端和服务器通信的能力。也就是说Web能提供的资源已经从过去的静态资源编程了今天各种动态资源了。如何利用Web提供丰富的资源是本文的主题。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> HTTP</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\nHTTP（Hypertext Transfer Protocol）是在World Wide Web上进行通信的协议，它定义了传输Web页面的方式。讲到Web就不得不讲到HTTP，当然这个协议大家或多或少都懂一些，所以本文不会讲它的标准。现代Web开发受到HTTP的深刻影响，所以要理解Web开发也可以从HTTP入手。最早的HTTP主要用来传输静态的Web页面，之后随着Web的流行，人们开始希望能Web服务器能提供更多的资源，包括数据库、动态页面这些。同时，人们还希望能用一个统一的方式来访问Internet的资源，无论这个资源是什么类型，这个方法自然就是我们原先访问静态页面的方法了，也就是HTTP。\n图片&#x2026;\n那么该如何做到这一点呢？接下来要介绍的就是这些技术。这之中我们会进一步了解HTTP协议。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> WSGI</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\n应用对象是个接受两个参数的简单callable对象。\n所以应用看作对象，而且是可调用的。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> uwsgi</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\nuWSGI是一个Web服务器，实现了WSGI协议、uwsgi、http\n<a href=\"http://www.nowamagic.net/academy/detail/1330328\">http://www.nowamagic.net/academy/detail/1330328</a>\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> Tornado</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<p>\ntornado可以粗略分成四个部分：\n</p>\n<ul class=\"org-ul\">\n<li>一个Web框架（包括被继承来创建Web应用的RequestHandler类，以及其他相关的类）\n</li>\n<li>HTTP客户端和服务器的实现（HTTPServer和AsyncHTTPClient）\n</li>\n<li>一个异步网络库\n</li>\n<li>一个协程库（tornado.gen），允许用更加直接的方式编写异步代码。\n</li>\n</ul>\n\n<p>\nTornado默认不是使用WSGI，但作为Python应用，所以其实最终会作为一个参数。\n</p>\n</div>\n<div id=\"outline-container-sec-5-1\" class=\"outline-3\">\n<h3 id=\"sec-5-1\"><span class=\"section-number-3\">5.1</span> RequestHandler</h3>\n<div class=\"outline-text-3\" id=\"text-5-1\">\n<p>\n如何从传入的http请求中获得信息？一般是使用get<sub>argument，以及</sub>\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-2\" class=\"outline-3\">\n<h3 id=\"sec-5-2\"><span class=\"section-number-3\">5.2</span> 模板</h3>\n<div class=\"outline-text-3\" id=\"text-5-2\">\n<p>\nTornado模板是被python表达式和控制语句标记的简单文本文件\n语言\ntornado的模块系统和其他模块系统相比，优点是可以在if和for中使用所有的表达式\n扩展模板的方法是： Tornado通过extends和block替代。如果我们现在编写的模板只是基于原来的模板的扩展，则要使用  extends \"main.html\" 。使新文件扩展为\n直接使用子模板就可以了\n如果模板渲染错误，算是5号错误\n模板中可以设定block的默认值\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-3\" class=\"outline-3\">\n<h3 id=\"sec-5-3\"><span class=\"section-number-3\">5.3</span> UI模块</h3>\n<div class=\"outline-text-3\" id=\"text-5-3\">\n<p>\nUI模块是封装模块中包含的标记、样式以及行为的可复用组件。可以被一个或者多个模板复用，模块本身继承自Tornado的UIModule类的简单Python类，并定义了一个render方法。一个模板通过 module Foo(&#x2026;)  标签引用一个模块时，Tornado的模块引擎调用模块的render类。然后用模板引擎调用。render模块当然返回的是字符串。UI模块可以嵌入自己的JavaScript和CSS文件，或者指定额外包含的JavaScript和CSS文件。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-4\" class=\"outline-3\">\n<h3 id=\"sec-5-4\"><span class=\"section-number-3\">5.4</span> 静态内容</h3>\n<div class=\"outline-text-3\" id=\"text-5-4\">\n<p>\n对于静态内容的处理应该有别于动态内容，像样式表和、JavaScript文件等。\nstatic<sub>url，它生成的url，</sub>\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-5-5\" class=\"outline-3\">\n<h3 id=\"sec-5-5\"><span class=\"section-number-3\">5.5</span> 思考</h3>\n<div class=\"outline-text-3\" id=\"text-5-5\">\n<p>\n说白了组件有几样\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-6\" class=\"outline-3\">\n<h3 id=\"sec-5-6\"><span class=\"section-number-3\">5.6</span> 应用的组件</h3>\n<div class=\"outline-text-3\" id=\"text-5-6\">\n<p>\n模板，为模板服务的UI模块，其他的静态文件。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-7\" class=\"outline-3\">\n<h3 id=\"sec-5-7\"><span class=\"section-number-3\">5.7</span> 数据库</h3>\n<div class=\"outline-text-3\" id=\"text-5-7\">\n<p>\n以MongoDB作为数据库，并通过pymongo作为驱动来MongoDB。它和Python可以比较好地配合。可以不用预订以数据结构，适合原型开发。MongoHQ是MongoDB的服务器。\n</p>\n</div>\n<div id=\"outline-container-sec-5-7-1\" class=\"outline-4\">\n<h4 id=\"sec-5-7-1\"><span class=\"section-number-4\">5.7.1</span> 使用PyMongo来进行MongoDB来操作</h4>\n<div class=\"outline-text-4\" id=\"text-5-7-1\">\n<p>\nPyMongo是一个简单的包装MongoDB客户端API的Python库。启动一个连接：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymongo</span><br><span class=\"line\"></span><br><span class=\"line\">client = pymongo.MongoClient(<span class=\"string\">'localhost'</span>, <span class=\"number\">27017</span>)</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n一个MongoDB服务器可以包含任意数量的数据库，而Connection对象。一个数据库可以拥有多个集合。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-5-8\" class=\"outline-3\">\n<h3 id=\"sec-5-8\"><span class=\"section-number-3\">5.8</span> websocket</h3>\n<div class=\"outline-text-3\" id=\"text-5-8\">\n<p>\nwebsocket这个协议还定义了浏览器使用websocket的接口\n</p>\n</div>\n<div id=\"outline-container-sec-5-8-1\" class=\"outline-4\">\n<h4 id=\"sec-5-8-1\"><span class=\"section-number-4\">5.8.1</span> tornado.websocketHandler</h4>\n<div class=\"outline-text-4\" id=\"text-5-8-1\">\n<p>\n要处理的事件有五个：\n</p>\n<ul class=\"org-ul\">\n<li>open：连接建立\n</li>\n<li>on<sub>message</sub>: 接受到信息\n</li>\n<li>on<sub>close：连接关闭</sub>\n</li>\n<li>select<sub>subprotocol：选择一个建立在Websocket上的子协议</sub>\n</li>\n<li>on<sub>ping：收到一个ping帧</sub>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-5-9\" class=\"outline-3\">\n<h3 id=\"sec-5-9\"><span class=\"section-number-3\">5.9</span> 安全问题</h3>\n<div class=\"outline-text-3\" id=\"text-5-9\">\n<p>\nTornado在设计的时候就考虑了很多常见的http安全漏洞，比如跨站点请求伪造\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> Django的信号机制</h2>\n</div>\n\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> 异步Web应用</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<p>\nTornado最受关注的内容是其异步取得和提供内容的能力。程序运行过程\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> 表单的使用</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<p>\n表单会通过POST发送数据,\n表单发送的数据会被django处理成字典，之后传入request参数中。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9\" class=\"outline-2\">\n<h2 id=\"sec-9\"><span class=\"section-number-2\">9</span> Django</h2>\n<div class=\"outline-text-2\" id=\"text-9\">\n<p>\nDjango最早开发来发布新闻内容\n</p>\n<ul class=\"org-ul\">\n<li>一个Web应用会需要一个url配置\n</li>\n<li>一个优点是，Django全部使用.py文件来配置，这样就可以直接使用Python的解析器。\n</li>\n<li>Django的model本质上是一个数据库层\n</li>\n<li>会有一个工程目录1\n</li>\n<li>django模板处理的依旧是Python对象\n</li>\n</ul>\n\n<p>\n一个Django工程主要包括了应用和相应的设置。\n算起来Django对于http方法的处理其实不是很好，如果方法不对，或者字段不对，那么\n</p>\n</div>\n<div id=\"outline-container-sec-9-1\" class=\"outline-3\">\n<h3 id=\"sec-9-1\"><span class=\"section-number-3\">9.1</span> admin</h3>\n</div>\n\n<div id=\"outline-container-sec-9-2\" class=\"outline-3\">\n<h3 id=\"sec-9-2\"><span class=\"section-number-3\">9.2</span> model</h3>\n<div class=\"outline-text-3\" id=\"text-9-2\">\n<p>\n是数据最简单、最本质的东西，包含就你存储的最基本的字段和行为，需要注意的是行为。model使用Python的class来描述。使用类变量来描述数据库字段。django会根据这些来建立schema。\n改变数据库schema也是在Python代码中\n和数据库的交互过程需要大量的错误处理\n一个django model是用一个Python类来表示的\n对于model的处理还是必要的\n</p>\n\n<p>\n每个model对应数据库中的一个表，最基本的概念是：\n</p>\n<ul class=\"org-ul\">\n<li>每个model都是继承自django.db.models.Model的子类\n</li>\n<li>model的每个属性，代表数据库的一个字段\n</li>\n<li>django提供了操作和查询数据库的api\n</li>\n</ul>\n\n<p>\n默认情况下，会加一个字段id，表示行数\n同时如果如何有联系，还会自动生成联系字段\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9-3\" class=\"outline-3\">\n<h3 id=\"sec-9-3\"><span class=\"section-number-3\">9.3</span> views</h3>\n<div class=\"outline-text-3\" id=\"text-9-3\">\n<p>\n每个view都至少要做两件事之一：\n</p>\n<ul class=\"org-ul\">\n<li>返回一个HttpResponse对象\n</li>\n<li>返回一个异常，这样就有异常的状态码\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-9-4\" class=\"outline-3\">\n<h3 id=\"sec-9-4\"><span class=\"section-number-3\">9.4</span> url解析</h3>\n<div class=\"outline-text-3\" id=\"text-9-4\">\n<p>\ninclude可以用于应用其他的url配置（在其他应用的urls.py中）\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9-5\" class=\"outline-3\">\n<h3 id=\"sec-9-5\"><span class=\"section-number-3\">9.5</span> 实例</h3>\n<div class=\"outline-text-3\" id=\"text-9-5\">\n</div><div id=\"outline-container-sec-9-5-1\" class=\"outline-4\">\n<h4 id=\"sec-9-5-1\"><span class=\"section-number-4\">9.5.1</span> 一个</h4>\n</div>\n</div>\n<div id=\"outline-container-sec-9-6\" class=\"outline-3\">\n<h3 id=\"sec-9-6\"><span class=\"section-number-3\">9.6</span> class-based views</h3>\n<div class=\"outline-text-3\" id=\"text-9-6\">\n<p>\na view is a callable which takes a request and returns a response\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-9-7\" class=\"outline-3\">\n<h3 id=\"sec-9-7\"><span class=\"section-number-3\">9.7</span> 信号</h3>\n<div class=\"outline-text-3\" id=\"text-9-7\">\n<p>\nDjango提供了信号分配器，允许解耦的应用在框架的其它地方发生操作时会被通知到。信号允许特定的sender通知一组receiver某些操作已经发生。这是一种对象间通信机制\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-10\" class=\"outline-2\">\n<h2 id=\"sec-10\"><span class=\"section-number-2\">10</span> 身份问题</h2>\n<div class=\"outline-text-2\" id=\"text-10\">\n<p>\nhttp通过cookie来识别用户的身份，所以对于每个http请求，要通过tornado来处理cookie问题。Tornado在\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-11\" class=\"outline-2\">\n<h2 id=\"sec-11\"><span class=\"section-number-2\">11</span> <span class=\"todo TODO\">TODO</span> 基准测试</h2>\n</div>\n<div id=\"outline-container-sec-12\" class=\"outline-2\">\n<h2 id=\"sec-12\"><span class=\"section-number-2\">12</span> Python2</h2>\n<div class=\"outline-text-2\" id=\"text-12\">\n<p>\nPython迭代器，\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-13\" class=\"outline-2\">\n<h2 id=\"sec-13\"><span class=\"section-number-2\">13</span> csrf</h2>\n</div>\n<div id=\"outline-container-sec-14\" class=\"outline-2\">\n<h2 id=\"sec-14\"><span class=\"section-number-2\">14</span> 部署</h2>\n<div class=\"outline-text-2\" id=\"text-14\">\n</div><div id=\"outline-container-sec-14-1\" class=\"outline-3\">\n<h3 id=\"sec-14-1\"><span class=\"section-number-3\">14.1</span> Tornado作为服务器，利用WSGI和Flask框架实例沟通</h3>\n</div>\n</div>\n\n<div id=\"outline-container-sec-15\" class=\"outline-2\">\n<h2 id=\"sec-15\"><span class=\"section-number-2\">15</span> Web客户端和Web服务器全双工连接</h2>\n</div>\n<div id=\"outline-container-sec-16\" class=\"outline-2\">\n<h2 id=\"sec-16\"><span class=\"section-number-2\">16</span> 对WebSocket的支持</h2>\n<div class=\"outline-text-2\" id=\"text-16\">\n<p>\nWebSocket的最新规范是RFC 6455<sup><a id=\"fnr.1\" name=\"fnr.1\" class=\"footref\" href=\"#fn.1\">1</a></sup>，支持它的最低浏览器版本分别是：\n</p>\n<ul class=\"org-ul\">\n<li>IE 10\n</li>\n<li>Firefox(PC) 11\n</li>\n<li>Firefox(Android) 11\n</li>\n<li>Chrome(PC, Mobile) 16\n</li>\n<li>Safari(Mac, IOS) 6\n</li>\n<li>Opera(PC, Mobile) 12.10\n</li>\n<li>Android浏览器 4.4\n</li>\n</ul>\n\n<p>\n有些浏览器的WebSocket功能不是默认打开的，这点需要注意。另一方面支持WebSocket的Web服务器包括：\n</p>\n<ul class=\"org-ul\">\n<li>php - <a href=\"http://code.google.com/p/phpwebsocket/\">http://code.google.com/p/phpwebsocket/</a>\n</li>\n<li>jetty - <a href=\"http://jetty.codehaus.org/jetty/%EF%BC%88%E7%89%88%E6%9C%AC7%E5%BC%80%E5%A7%8B%E6%94%AF%E6%8C%81websocket%EF%BC%89[%E5%A4%B1%E6%95%88%E9%80%A3%E7%B5%90\">http://jetty.codehaus.org/jetty/%EF%BC%88%E7%89%88%E6%9C%AC7%E5%BC%80%E5%A7%8B%E6%94%AF%E6%8C%81websocket%EF%BC%89[%E5%A4%B1%E6%95%88%E9%80%A3%E7%B5%90</a>]\n</li>\n<li>netty - <a href=\"http://www.jboss.org/netty\">http://www.jboss.org/netty</a>\n</li>\n<li>ruby - <a href=\"http://github.com/gimite/web-socket-ruby\">http://github.com/gimite/web-socket-ruby</a>\n</li>\n<li>Kaazing - <a href=\"https://web.archive.org/web/20100923224709/http://www.kaazing.org/confluence/display/KAAZING/Home\">https://web.archive.org/web/20100923224709/http://www.kaazing.org/confluence/display/KAAZING/Home</a>\n</li>\n<li>Tomcat - <a href=\"http://tomcat.apache.org/%EF%BC%887.0.27%E6%94%AF%E6%8C%81websocket%EF%BC%8C%E5%BB%BA%E8%AE%AE%E7%94%A8tomcat8%EF%BC%8C7.0.27%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%B7%B2%E7%BB%8F%E8%BF%87%E6%97%B6\">http://tomcat.apache.org/%EF%BC%887.0.27%E6%94%AF%E6%8C%81websocket%EF%BC%8C%E5%BB%BA%E8%AE%AE%E7%94%A8tomcat8%EF%BC%8C7.0.27%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%B7%B2%E7%BB%8F%E8%BF%87%E6%97%B6</a>）\n</li>\n<li>WebLogic - <a href=\"http://www.oracle.com/us/products/middleware/cloud-app-foundation/weblogic/overview/index.html%EF%BC%8812.1.2%E9%96%8B%E5%A7%8B%E6%94%AF%E6%8C%81%EF%BC%89[%E5%A4%B1%E6%95%88%E9%80%A3%E7%B5%90\">http://www.oracle.com/us/products/middleware/cloud-app-foundation/weblogic/overview/index.html%EF%BC%8812.1.2%E9%96%8B%E5%A7%8B%E6%94%AF%E6%8C%81%EF%BC%89[%E5%A4%B1%E6%95%88%E9%80%A3%E7%B5%90</a>]\n</li>\n<li>node.js - <a href=\"https://github.com/Worlize/WebSocket-Node\">https://github.com/Worlize/WebSocket-Node</a>\n</li>\n<li>node.js - <a href=\"http://socket.io\">http://socket.io</a>\n</li>\n<li>nginx - <a href=\"http://nginx.com/\">http://nginx.com/</a>\n</li>\n<li>mojolicious - <a href=\"http://mojolicio.us/\">http://mojolicio.us/</a>\n</li>\n<li>python - <a href=\"https://github.com/abourget/gevent-socketio\">https://github.com/abourget/gevent-socketio</a>\n</li>\n<li>Django - <a href=\"https://github.com/stephenmcd/django-socketio\">https://github.com/stephenmcd/django-socketio</a>\n</li>\n<li>erlang - <a href=\"https://github.com/ninenines/cowboy.git\">https://github.com/ninenines/cowboy.git</a>\n</li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-sec-17\" class=\"outline-2\">\n<h2 id=\"sec-17\"><span class=\"section-number-2\">17</span> 关于HTTP协议和其他协议的转化</h2>\n</div>\n<div id=\"outline-container-sec-18\" class=\"outline-2\">\n<h2 id=\"sec-18\"><span class=\"section-number-2\">18</span> 框架</h2>\n<div class=\"outline-text-2\" id=\"text-18\">\n<ul class=\"org-ul\">\n<li>一般对于一个框架来说，所有的应用最终会有一个“框架应用”来统一管理，框架应用主要负责路由，建立和实际应用的联系。同时为了编程方便，一般实际应用还是需要有和框架沟通的方式。\n</li>\n<li>数据库只要有一个服务器就足够了，也就是说对于框架来说只要框架应用连接着就足够了。\n</li>\n<li>核心的问题是如何处理http的逻辑同语言的逻辑相结合\n</li>\n<li>django的做法是利用shortcut来减少抽象层，当然这未必是一个好方法\n</li>\n<li>每个model代表一个数据库，所以如何要管理数据库要从类变量开始。\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-19\" class=\"outline-2\">\n<h2 id=\"sec-19\"><span class=\"section-number-2\">19</span> <span class=\"todo TODO\">TODO</span> 问题 <code>[0%]</code></h2>\n<div class=\"outline-text-2\" id=\"text-19\">\n<ul class=\"org-ul\">\n<li><code>[&#xa0;]</code> Python模块和包\n</li>\n<li><code>[&#xa0;]</code> ansible使用的是哪个底层库，使用的是什么协议来沟通，估计用shell\n</li>\n<li><code>[&#xa0;]</code> web框架的任务和位置\n</li>\n<li><code>[&#xa0;]</code> web网关的地位，与框架分离\n</li>\n<li><code>[&#xa0;]</code> 框架、应用的区别\n</li>\n<li><code>[&#xa0;]</code> 框架有哪些封装，不需要知道哪些\n</li>\n<li><code>[&#xa0;]</code> 网关以资源为核心来讲解,\n</li>\n<li><code>[&#xa0;]</code> TLS\n</li>\n<li><code>[&#xa0;]</code> WSGI 的作用\n</li>\n<li><code>[&#xa0;]</code> 是否限定于数据库\n</li>\n<li><code>[&#xa0;]</code> 为什么要在templates/polls/..中\n</li>\n<li><code>[&#xa0;]</code> django 的template不需要设置html标签吗\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-20\" class=\"outline-2\">\n<h2 id=\"sec-20\"><span class=\"section-number-2\">20</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-20\">\n<ul class=\"org-ul\">\n<li><a href=\"http://www.pythondoc.com/flask/deploying/wsgi-standalone.html\">把Flask部署到Tornado</a>\n</li>\n<li><a href=\"http://docs.pythontab.com/tornado/introduction-to-tornado/\">Introduction ot Tornado</a>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"footnotes\">\n<h2 class=\"footnotes\">Footnotes: </h2>\n<div id=\"text-footnotes\">\n\n<div class=\"footdef\"><sup><a id=\"fn.1\" name=\"fn.1\" class=\"footnum\" href=\"#fnr.1\">1</a></sup> <p>之前还有很多草案，但都没有得到大部分主要浏览器的支持，所以不去理会。</p></div>\n\n\n</div>\n</div>\nLast Updated 2018-02-16 五 01:22.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
