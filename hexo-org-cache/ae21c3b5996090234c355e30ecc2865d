{"md5":"abade5ce55239fc8df2b266fc0493ff8","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n最近看了<a href=\"http://www.tuicool.com/articles/YRZvem\">程序和证明</a> ，觉得很有趣，对我的启发也很大。文中一些例子使用了idris来表达，为此，我想乘着有时间把idris学一下。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> first-class的概念</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\nfirst-class结构意味着这个结构是被当作是值来对待：\n</p>\n<ol class=\"org-ol\">\n<li>作为函数的参数和返回值\n</li>\n<li>存储在变量中\n</li>\n</ol>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> curry-ho</h2>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 两个重要的特性</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<ul class=\"org-ul\">\n<li>Holes：代表不完全的程序\n</li>\n<li>类型是first-class\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 类型驱动开发</h2>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 直觉主义的构造行</h2>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> 程序是类型的证明</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<p>\n编写程序的过程就是载做证明。\n</p>\n</div>\n<div id=\"outline-container-sec-7-1\" class=\"outline-3\">\n<h3 id=\"sec-7-1\"><span class=\"section-number-3\">7.1</span> 命题逻辑</h3>\n<div class=\"outline-text-3\" id=\"text-7-1\">\n</div><div id=\"outline-container-sec-7-1-1\" class=\"outline-4\">\n<h4 id=\"sec-7-1-1\"><span class=\"section-number-4\">7.1.1</span> 肯定前件</h4>\n<div class=\"outline-text-4\" id=\"text-7-1-1\">\n<p>\n\\(\\neg Q\\)\n</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> 定义函数</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<p>\n函数使用模式匹配来实现，idris要求对于所有函数都有类型声明。可以看到类型的声明是currying的，借此函数的实现其实更\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9\" class=\"outline-2\">\n<h2 id=\"sec-9\"><span class=\"section-number-2\">9</span> 依赖类型</h2>\n<div class=\"outline-text-2\" id=\"text-9\">\n<p>\n依赖类型意味着类型的定义依赖于其他类型的 <b>值</b> ，idris中类型是作为第一类对象的，也就是说类型可以被计算和操作，我们可以写函数来操作类型。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-10\" class=\"outline-2\">\n<h2 id=\"sec-10\"><span class=\"section-number-2\">10</span> 自定义类型</h2>\n<div class=\"outline-text-2\" id=\"text-10\">\n</div><div id=\"outline-container-sec-10-1\" class=\"outline-3\">\n<h3 id=\"sec-10-1\"><span class=\"section-number-3\">10.1</span> 定义类型的语法</h3>\n<div class=\"outline-text-3\" id=\"text-10-1\">\n<p>\n无论哪种类型定义的语法都是一样的，\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-10-2\" class=\"outline-3\">\n<h3 id=\"sec-10-2\"><span class=\"section-number-3\">10.2</span> 枚举类型</h3>\n</div>\n<div id=\"outline-container-sec-10-3\" class=\"outline-3\">\n<h3 id=\"sec-10-3\"><span class=\"section-number-3\">10.3</span> union类型</h3>\n<div class=\"outline-text-3\" id=\"text-10-3\">\n<p>\n枚举类型的扩展，\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-10-4\" class=\"outline-3\">\n<h3 id=\"sec-10-4\"><span class=\"section-number-3\">10.4</span> 递归类型</h3>\n</div>\n<div id=\"outline-container-sec-10-5\" class=\"outline-3\">\n<h3 id=\"sec-10-5\"><span class=\"section-number-3\">10.5</span> generic类型</h3>\n<div class=\"outline-text-3\" id=\"text-10-5\">\n<p>\n以其他类型作为参数的类型，具有更高的描述能力\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-11\" class=\"outline-2\">\n<h2 id=\"sec-11\"><span class=\"section-number-2\">11</span> first class type</h2>\n<div class=\"outline-text-2\" id=\"text-11\">\n<p>\n在idris中type可以存储载变量中，也可以作为函数参数和返回值\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-12\" class=\"outline-2\">\n<h2 id=\"sec-12\"><span class=\"section-number-2\">12</span> type-driven的开发方式</h2>\n<div class=\"outline-text-2\" id=\"text-12\">\n</div><div id=\"outline-container-sec-12-1\" class=\"outline-3\">\n<h3 id=\"sec-12-1\"><span class=\"section-number-3\">12.1</span> 使用type-driven开发</h3>\n<div class=\"outline-text-3\" id=\"text-12-1\">\n<ol class=\"org-ol\">\n<li>Type：编写函数的接口，编好足够的类型信息\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">allLengths : List String -&#62; List Nat</span><br></pre></td></tr></table></figure>\n</div>\n</li>\n<li>Define: 定义函数，可以只是框架，保留一定的hole\n</li>\n<li>Type：查看hole的类型\n</li>\n<li></li>\n</ol>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-13\" class=\"outline-2\">\n<h2 id=\"sec-13\"><span class=\"section-number-2\">13</span> total</h2>\n<div class=\"outline-text-2\" id=\"text-13\">\n<p>\ntotal的函数保证对于所有well-typed的输入都能在有限时间内终止\n一个 missing case 可能会导致运行时出现无法预料的错误。\nidris默认情况下允许不完全定义的函数，这样可能产生错误的定义，所以可以通过指定编译选项来检查函数的完全性。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-14\" class=\"outline-2\">\n<h2 id=\"sec-14\"><span class=\"section-number-2\">14</span> IO</h2>\n<div class=\"outline-text-2\" id=\"text-14\">\n<p>\nIO是一个范型，表述了运行时系统的行为序列。我们不能编写直接和用户交流的程序，但可以编写函数描述交互的序列.\ndo 引入了一个\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-15\" class=\"outline-2\">\n<h2 id=\"sec-15\"><span class=\"section-number-2\">15</span> 接口：约束的范型</h2>\n</div>\n<div id=\"outline-container-sec-16\" class=\"outline-2\">\n<h2 id=\"sec-16\"><span class=\"section-number-2\">16</span> 完全函数式编程（total functional programming）</h2>\n<div class=\"outline-text-2\" id=\"text-16\">\n<p>\n为了将公理体系纳入计算机中，构造出足够多的定理，语言的类型系统要扩充，同时要限制其能力，使其达不到图灵完备。要求：\n</p>\n<ol class=\"org-ol\">\n<li>所有的函数必须被完整地实现，即针对每一个可能的值都有定义\n</li>\n<li>递归必终止（对应到命令式语言中，则循环必终止）；编译器有权拒绝一切它无法判断是否停机的计算。\n</li>\n</ol>\n<p>\n这种方法消除了停机不可判定问题，但表达能力受限。所以还需要其他的东西来修补。\n现实中不可判定是否停机的程序我们经常会写\n\\(\\forall{n}{\\in}\\mathbf{N},0+n=n\\)\n\\(\\Pi_{(n:{\\mathbb N})}\\ plus\\ Z\\ n=n\\)\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-17\" class=\"outline-2\">\n<h2 id=\"sec-17\"><span class=\"section-number-2\">17</span> 在idris中处理副作用</h2>\n<div class=\"outline-text-2\" id=\"text-17\">\n<p>\n程序必须和外界交互，这时就需要有处理副作用的机制，而idris提供了处理副作用的库。一般来说，我们用一个idris函数处理数据时，要先读取用户输入，再检查输入是否有效，处理完成后还需要输出。\n</p>\n</div>\n<div id=\"outline-container-sec-17-1\" class=\"outline-3\">\n<h3 id=\"sec-17-1\"><span class=\"section-number-3\">17.1</span> 编写依赖状态的程序</h3>\n<div class=\"outline-text-3\" id=\"text-17-1\">\n<p>\n使用Control.ST库来编程和推理\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-18\" class=\"outline-2\">\n<h2 id=\"sec-18\"><span class=\"section-number-2\">18</span> idris程序编写步骤</h2>\n<div class=\"outline-text-2\" id=\"text-18\">\n<p>\n先用一个简单的例子来描述：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">double : Num a =&#62; a -&#62; a&#10;double x = a * a</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-19\" class=\"outline-2\">\n<h2 id=\"sec-19\"><span class=\"section-number-2\">19</span> 思考</h2>\n<div class=\"outline-text-2\" id=\"text-19\">\n<ul class=\"org-ul\">\n<li>类型系统的表达能力已经可以建模了\n</li>\n<li>一个概念的完备性总是让人厌烦\n</li>\n<li>程序的入口点是模块Main的main函数\n</li>\n<li>如果函数参数有表达式，则用括号括起\n</li>\n<li>一个程序的组成无非包括对其他模块或本模块的声明，数据结构的声明，函数\n</li>\n<li>idris的目标是让我们用强大的类型系统来完成大部分程序的编写\n</li>\n<li>函数声明中，如果变量不声明类型则可以表示任何类型\n</li>\n<li>表达式和类型并没有严格区分，可以认为在idris中一切都是函数\n</li>\n<li>data 之后声明一个construct\n</li>\n<li>Type 视为一个命题，然而我们实际表示表达式来表达命题，在编程语言中要时时注意表达计算的语言和计算本身是分离的\n</li>\n<li>类型的定义过程就是引入表达式的过程\n</li>\n<li>= 是一个依赖类型的构造器，代表一个”证明“的类型\n</li>\n<li>类型是命题，程序是证明\n</li>\n<li>保证程序正确性的关键是类型系统有足够的表达能力能表示我们的软件规范\n</li>\n<li>纯函数式编程中变量和函数不做什么区别，变量视为没有参数的函数，根据引用透明性，这个没有任何问题。当然如果允许副作用就不可行了。\n</li>\n<li>既然实现了一个抽象层就没必要记住它是如何实现的了\n</li>\n<li>类型声明中唯独不能出现字面值\n</li>\n<li>在设定类型变量上相当于载类型声明中就设定了实参名\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-20\" class=\"outline-2\">\n<h2 id=\"sec-20\"><span class=\"section-number-2\">20</span> FAQ</h2>\n<div class=\"outline-text-2\" id=\"text-20\">\n</div><div id=\"outline-container-sec-20-1\" class=\"outline-3\">\n<h3 id=\"sec-20-1\"><span class=\"section-number-3\">20.1</span> currying为什么是右结合的？</h3>\n<div class=\"outline-text-3\" id=\"text-20-1\">\n<p>\n每currying一个参数，就得到一个函数，所以是右结合的\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-20-2\" class=\"outline-3\">\n<h3 id=\"sec-20-2\"><span class=\"section-number-3\">20.2</span> 如何对待原生数据类型？</h3>\n<div class=\"outline-text-3\" id=\"text-20-2\">\n<p>\n一般计算时使用，而做证明时则要小心，尽量不用\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-21\" class=\"outline-2\">\n<h2 id=\"sec-21\"><span class=\"section-number-2\">21</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-21\">\n<ul class=\"org-ul\">\n<li><a href=\"http://docs.idris-lang.org/en/latest/tutorial/typesfuns.html\">官方文档</a>\n</li>\n<li><a href=\"http://www.tuicool.com/articles/YRZvem\">程序和证明</a>\n</li>\n<li>Type-Driven Development with idris\n</li>\n<li>Programming and Reasoning with Side-Effects in idris \n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
