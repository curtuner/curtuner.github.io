{"md5":"14db49d2ff5ab8b95e633fbd744e1bec","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 引言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n暂时从《Unix环境高级编程》开始入门，目前感觉有利于理解操作系统的概念。这里线探究POXIS线程，如何实现暂时不去理会\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Linux线程</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n线程ID在进程内才有意义，它是用pthread<sub>t来表示的，这是个结构体类型而且实现不一定，所以对于该类型的的数据提供了专门的操作，如获取线程ID和比较线程ID的操作。一个线程调用函数其实和进程调用函数没有区别。所以任意线程调用exit、</sub><sub>Exit或</sub><sub>exit是都会导致进程停止。所以为了终止线程提供了不一样的元语：</sub>\n</p>\n<ol class=\"org-ol\">\n<li>从启动历程中返回，返回值是线程的退出码\n</li>\n<li>线程可以被统一进程中的其他线程取消\n</li>\n<li>线程自身调用pthread<sub>t</sub>\n</li>\n</ol>\n<p>\n从控制流中得到推出的状态\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> .</h2>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> <span class=\"todo TODO\">TODO</span> 多线程</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n多线程擅长处理并发长连接的情形\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<ul class=\"org-ul\">\n<li>Unix环境高级编程\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
