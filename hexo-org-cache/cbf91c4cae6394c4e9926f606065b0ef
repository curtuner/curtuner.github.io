{"md5":"dbd0eb681f1687409995d64be3dffefd","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> Jumpserver</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\njumpserver的版本其实比较新\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Django</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> 信号</h3>\n</div>\n</div>\n\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> Tornado服务器</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\n比较重要的两个handler：\n</p>\n<ul class=\"org-ul\">\n<li>tornado.web.FallbackHandler：\n</li>\n<li></li>\n</ul>\n</div>\n<div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> tornado.web.FallbackHandler</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\n这让用户可以同时在Tornado服务器中使用Tornado的Handler和WSGI应用，常规的用法是：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsgi_app = tornado.wsgi.WSGIContainer(</span><br><span class=\"line\">    django.core.handlers.wsgi.WSGIHandler())</span><br><span class=\"line\">application = tornado.web.Application([</span><br><span class=\"line\">    (<span class=\"string\">r\"/foo\"</span>, FooHandler),</span><br><span class=\"line\">    (<span class=\"string\">r\".*\"</span>, FallbackHandler, dict(fallback=wsgi_app),</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n这里其实可以看到Tornado要使用WSGI应用就需要先用WSGI容器包装称为Tornado应用。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2\" class=\"outline-3\">\n<h3 id=\"sec-3-2\"><span class=\"section-number-3\">3.2</span> tornado.web.StaticFileHandler</h3>\n<div class=\"outline-text-3\" id=\"text-3-2\">\n<p>\n这个handler用于处理对静态文件的发送，本质上也是应该由Web服务器来处理。这个handler需要指定静态文件的路径：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application = web.Application([</span><br><span class=\"line\">    (<span class=\"string\">r\"/content/(.*)\"</span>, web.StaticFileHandler, {<span class=\"string\">\"path\"</span>: <span class=\"string\">\"/var/www\"</span>}),</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3-3\" class=\"outline-3\">\n<h3 id=\"sec-3-3\"><span class=\"section-number-3\">3.3</span> tornado.websocket.WebSocketHandler</h3>\n<div class=\"outline-text-3\" id=\"text-3-3\">\n<p>\n这是处理websocket的handler，一般要通过Tornado来处理，WSGI没有位置连接的功能，所以要先通过这个handler，之后再由django来处理\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-4\" class=\"outline-3\">\n<h3 id=\"sec-3-4\"><span class=\"section-number-3\">3.4</span> django<sub>request</sub><sub>support</sub></h3>\n</div>\n<div id=\"outline-container-sec-3-5\" class=\"outline-3\">\n<h3 id=\"sec-3-5\"><span class=\"section-number-3\">3.5</span> websocket应用</h3>\n</div>\n<div id=\"outline-container-sec-3-6\" class=\"outline-3\">\n<h3 id=\"sec-3-6\"><span class=\"section-number-3\">3.6</span> Tornado和Django的边界</h3>\n</div>\n<div id=\"outline-container-sec-3-7\" class=\"outline-3\">\n<h3 id=\"sec-3-7\"><span class=\"section-number-3\">3.7</span> 在tornado中调用django应用</h3>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 需要websocket的应用</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n这类应用比较特别，需要通过Tornado来处理这个连接，之后有tornado来处理逻辑。来处理逻辑\n在原来\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 关于多线程</h2>\n</div>\n\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 目录结构</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n</div><div id=\"outline-container-sec-6-1\" class=\"outline-3\">\n<h3 id=\"sec-6-1\"><span class=\"section-number-3\">6.1</span> apps</h3>\n<div class=\"outline-text-3\" id=\"text-6-1\">\n<p>\n这个是Django的开发目录，这个目录叫什么名字都可以，目录结构是：\n</p>\n<ul class=\"org-ul\">\n<li><span class=\"underline\"><span class=\"underline\">init</span></span>.py：用于告知这是一个Python包，说明Jumpserver是用一个包来组织的\n</li>\n<li>manage.py：一个命令行处理程序，用于和Django交互\n</li>\n<li>jumpserver：\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> 部署</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<p>\n可以看到run<sub>server</sub>.py里面静态文件的发送有Tornado来处理，但是如果使用nginx作为前端，则会使用nginx来处理。\n本质上http到https的跳转是通过重定向的。\n</p>\n</div>\n<div id=\"outline-container-sec-7-1\" class=\"outline-3\">\n<h3 id=\"sec-7-1\"><span class=\"section-number-3\">7.1</span> 使用Supervisor监控Tornado进程</h3>\n<div class=\"outline-text-3\" id=\"text-7-1\">\n<p>\nSupervisor是一个使用Python写的进程管理程序\n当运行多个Tornado进程时，就需要进行监控和控制。可以通过supervisor来完成。Supervisor的设计是每次开机时启动其配置文件中列出的进程。为了一个superrvisor有意义，至少需要有program部分。program部分中command命令是必须的，除此之外可以定义工作目录参数、有效用户和日志文件等。如果需要在进程异常关闭时自动重启时，还是可以设置autorestart为true。\n为了管理所有的进程，创建一个组是必要的，之后我们也可以通过通配符来匹配成员名\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-7-2\" class=\"outline-3\">\n<h3 id=\"sec-7-2\"><span class=\"section-number-3\">7.2</span> 关于systemd和supervisor的问题</h3>\n<div class=\"outline-text-3\" id=\"text-7-2\">\n<p>\n严格来说supervisor要轻量得多，但是功能上讲步入systemd，而且systemd的可靠性要高得多，配置一样简单，所以可以还是用systemd，当然如果主机不支持systemd就麻烦了。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-7-3\" class=\"outline-3\">\n<h3 id=\"sec-7-3\"><span class=\"section-number-3\">7.3</span> Jumpserver的配置</h3>\n<div class=\"outline-text-3\" id=\"text-7-3\">\n<p>\n可以看到Jumpserver并没有使用多个tornado实例，所以实际性能还有优化的空间。而且静态文件目前使用Tornado来提供，也可以使用nginx直接提供静态文件，性能上可以nginx表现会好一些。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-7-4\" class=\"outline-3\">\n<h3 id=\"sec-7-4\"><span class=\"section-number-3\">7.4</span> 使用nginx的好处</h3>\n<div class=\"outline-text-3\" id=\"text-7-4\">\n<p>\n内部测试可以直接看到http报文，而且可以建立\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> 要点</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<ul class=\"org-ul\">\n<li>tornado使用Django的方式很简单，用一个WSGI容器包装Django框架，这个容器对于Tornado是应用，需要通过其他的handler来间接调用\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-9\" class=\"outline-2\">\n<h2 id=\"sec-9\"><span class=\"section-number-2\">9</span> 问题 <code>[%]</code></h2>\n<div class=\"outline-text-2\" id=\"text-9\">\n<ul class=\"org-ul\">\n<li><code>[&#xa0;]</code> Tornado对于静态文件的处理同nginx如何配合。\n</li>\n<li><code>[&#xa0;]</code> get<sub>argument和http的具体关系，真的是针对URL的吗。</sub>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-10\" class=\"outline-2\">\n<h2 id=\"sec-10\"><span class=\"section-number-2\">10</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-10\">\n<ul class=\"org-ul\">\n<li><a href=\"http://docs.pythontab.com/tornado/introduction-to-tornado/ch8.html\">Tornado部署</a>\n</li>\n<li><a href=\"https://stackoverflow.com/questions/28522857/shall-i-use-websocket-on-ports-other-than-80\">websocket使用的端口</a>\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2017-12-31 日 15:59.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
