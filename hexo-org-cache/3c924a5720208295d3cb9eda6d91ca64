{"md5":"c3151af3c78308c45fdbe13e8c672916","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n上次主要讲了对RDP协议的一些简单的理解，由于对于不熟悉图形绘制的人来说理解RDP协议会有不少困难。所以这次就不讲太多RDP协议的东西，转而讲一些大家比较熟悉的内容，接下来的内容主要有三个部分：\n</p>\n<ol class=\"org-ol\">\n<li>远程桌面协议。\n</li>\n<li>远程桌面协议的代理。\n</li>\n<li>借助远程桌面协议模拟ssh和telnet代理。\n</li>\n</ol>\n\n<p>\n很不幸，不得不再次简要介绍一下涉及的协议，首先要有点印象，否则讲到代理的部分有些名词会比较让人迷惑。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 远程桌面协议简述</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\nWindow上的远程协议一般是使用RDP，而Linux传统上更喜欢RFB<sup><a id=\"fnr.1\" name=\"fnr.1\" class=\"footref\" href=\"#fn.1\">1</a></sup>(Remote Frame Buffer)。Web的话只要解决的浏览器双向通信的问题也可以支持某些远程桌面协议。借助websocket或者早期的HTTP tunnel以及JavaScript可以实现很多应用层的协议。有一点需要注意，JavaScript和Python一样同属解释型语言，逻辑上能做的事情是差不多的，只是前者受到浏览器的限制。\n</p>\n</div>\n<div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> Linux图形协议</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n无论是Windows还是Linux都有图形桌面，但这两个区别比较大。这是在设计之初就决定的，Windows默认桌面是在一台主机上显示的，而Unix则默认桌面是可以远程显示的，图形的硬件也是可以远程的，所以X协议是client-server模式的。client-server模式带来了效率的下降，似乎还带来了一定的不稳定性。这也带来了一个结果，Windows早期并不能远程渲染，而Linux历来可以<sup><a id=\"fnr.2\" name=\"fnr.2\" class=\"footref\" href=\"#fn.2\">2</a></sup>。\n步入了21世纪之后随着Linux对于桌面的重视程度上升，新一代的的桌面远程桌面协议Wayland也虽然也是client-server模式的，但也不再支持远程渲染了。之所以说这个是因为X协议的架构比特别，但我们其实可以不去深究，毕竟都被取代了。\nLinux传统的远程桌面协议简称为X，目前这个标准出到了第11版，所以称为X11。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> RDP</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\nRDP协议（Remote Desktop Protocol），是微软开发的私有协议<sup><a id=\"fnr.2.100\" name=\"fnr.2.100\" class=\"footref\" href=\"#fn.2\">2</a></sup>，让用户可以通过网络连接上远程的主机，并提供相应的图形界面。使用的时候，要求远程主机启动了RDP服务器，而本地使用RDP客户端连接。RDP默认会监听本机UDP和TCP端口3389<sup><a id=\"fnr.3\" name=\"fnr.3\" class=\"footref\" href=\"#fn.3\">3</a></sup>。目前大多数主流的操作系统都有RDP客户端软件，而RDP服务器软件少一点，但是Unix和OS X下也是有的。目前RDP协议已经出到10.0版<sup><a id=\"fnr.4\" name=\"fnr.4\" class=\"footref\" href=\"#fn.4\">4</a></sup>了。值得一提的是早期微软并不公开RDP协议，所以可以看到网络上一些早期的对RDP协议的研究都是破解的结果。目前连接远程Windows主机一般使用RDP来实现，所以如果堡垒机管理的机器中包括Windows主机，就有必要实现RDP代理功能。相对的，Linux虽然目前也可以运行RDP服务器，但是Linux的图形界面一直不是很稳定（这几年更是处于从X协议转向Wayland的过程，而Wayland暂时不支持RDP），所以对于Linux来说支持RDP倒不是很要紧。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-3\" class=\"outline-3\">\n<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> VNC</h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n<p>\nVNC (Virtual Network Console)是虚拟网络控制台的缩写。它是一款优秀的远程控制工具软件，由著名的 AT&amp;T 的欧洲研究实验室开发的。VNC 是在基于 UNIX 和 Linux 操作系统的免费的开源软件，远程控制能力强大，高效实用，其性能可以和 Windows 和 MAC 中的任何远程控制软件媲美。 在 Linux 中，VNC 包括以下四个命令：vncserver，vncviewer，vncpasswd，和 vncconnect。大多数情况下用户只需要其中的两个命令：vncserver 和 vncviewer。\nVNC和RDP是非常相似的协议,两者都比较高效\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-4\" class=\"outline-3\">\n<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> Guacamole协议</h3>\n<div class=\"outline-text-3\" id=\"text-2-4\">\n<p>\nGuacamole协议是基于文本的远程桌面协议，之所以基于文本是为了方便JavaScript处理，同时它可以描述远程桌面的所有功能，是所有远程桌面协议的超集。也就是说远程桌面协议都可以翻译成Guacamole协议，Goacamole使用的协议格式。开发者只需要编写一个协议翻译器，作为文本协议，Guacamole协议数据可以很方便地处理和分析。同时也很方便扩展。比如哪天心情不好可以把文件协议弄进来什么的（目前其实已经这么做了）。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-5\" class=\"outline-3\">\n<h3 id=\"sec-2-5\"><span class=\"section-number-3\">2.5</span> 小结</h3>\n<div class=\"outline-text-3\" id=\"text-2-5\">\n<p>\n其实RDP和VNC是两个平台最常用的协议，除此之外还有大大小小很多其他的协议，但本质上只要是远程桌面协议，它们的能力就不会差太多。Guacamole协议就是利用了这一点设计的，所以之后如果要讲远程桌面协议这类图形的协议的话，会主要以Guacamole协议为例子（原因当然是不用了解二进制协议的各种细节）。另外，Guacamole和X协议依旧是不同级别的协议。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 远程桌面协议的代理</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n</div><div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> 远程远程桌面协议的代理方案</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\n堡垒机预研首要解决的是协议代理的可行性。开源世界完成度比较高直接代理软件是xrdp，它的代理模式是如下结构的：\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"xrdp概述/xrdpproxy.png\" alt=\"xrdpproxy.png\">\n</p>\n</div>\n\n<p>\n这个和web代理有点相似，web代理是统一用HTTP客户端来访问代理服务器，而xrdp采用的模式则是统一用RDP客户端访问xrdp代理服务器。当然两者的区别在于支持的协议，web代理服务器支持的协议差别比较大（如ssh、ftp等截然不同的协议）。\n</p>\n\n<p>\n另一方面，借助websocket协议或者HTTP tunnel，也可以统一使用web代理来代理RDP以及VNC这类的协议。\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"xrdp概述/rdpwebproxy.png\" alt=\"rdpwebproxy.png\">\n</p>\n</div>\n\n\n<p>\n这样做会有新的问题，比如JavaScript不擅长处理二进制数据，实现的协议栈可能不会太高效<sup><a id=\"fnr.5\" name=\"fnr.5\" class=\"footref\" href=\"#fn.5\">5</a></sup>。像Apache guacmole<sup><a id=\"fnr.6\" name=\"fnr.6\" class=\"footref\" href=\"#fn.6\">6</a></sup>的选择是再次设计了一个适合浏览器处理的远程桌面协议。当然这样做的协议转化的恶工作量其实要比原先要大得多，xrdp实质上只需要处理RFB到RDP的转化就可以了。而guacmole还需要再处理RDP到Guacamole协议的转化，可能还有ssh或者telnet的转化。\n</p>\n\n<p>\n另外，直接代理的方案除了使用xrdp那种方案以外，还有专门的vnc代理软件，好处是可以通过VNC客户端直接访问。\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"xrdp概述/vnc_proxy.png\" alt=\"vnc_proxy.png\">\n</p>\n</div>\n\n<p>\n这样做也不会有问题，但单纯就直接代理而言，编程复杂度也能有所下降，但对于后期统一处理图形数据不利。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2\" class=\"outline-3\">\n<h3 id=\"sec-3-2\"><span class=\"section-number-3\">3.2</span> Guacamole的web代理方案</h3>\n<div class=\"outline-text-3\" id=\"text-3-2\">\n<p>\n在浏览器支持了HTML5的websocket和canvas标签之后，远程桌面的web化的难点已经解决了（其实websocket也不是必须的）。Guacamole目前出到0.9.13，相比xrdp，其完成度要高得多，文档也要齐全得多。其架构值得学习。接下了是对第一篇文档的翻译，以及个人的一些解读。\n</p>\n\n<p>\nGuacamole不是一个完备的web应用，而是由好几个部分组成的。该web应用旨在设计得简洁和最小化，把大部分杂活交给底层模块来完成。\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"./xrdp概述/guaca.png\" alt=\"guaca.png\">\n</p>\n</div>\n\n<p>\n用户通过浏览器连接到Guacamole。Guacamole由JavaScript编写，用户通过它来取得Guacamole服务器内部的web服务器的服务。客户端一旦加载，就会通过在HTTP之上的Guacamole使用服务器。web应用被部署到Guacamole服务器，它接受Guacamole协议数据并转发到guacd，这是最原始的Guacamole代理。Guacamole协议和guacd程序提供了一个抽象：Guacamole客户端和web应用都不需要知道实际使用的远程桌面协议。\n</p>\n</div>\n<div id=\"outline-container-sec-3-2-1\" class=\"outline-4\">\n<h4 id=\"sec-3-2-1\"><span class=\"section-number-4\">3.2.1</span> Guacamole协议</h4>\n<div class=\"outline-text-4\" id=\"text-3-2-1\">\n<p>\nweb应用完全不需要知道任何远程桌面协议，它不包含对包括RDP、VNC在内的任何Guaciamole栈支持的协议的支持。实际上，web应用程序只需要知道Guacamole协议，这个协议是用于远程显示的渲染和事件的传输。一个有这种特征的协议自然会和远程桌面协议有相同的能力，当然远程桌面协议的设计原则和Guacamole还是不同的：Guacamole协议并不是为了实现特定桌面环境才有的功能。\n</p>\n\n<p>\n作为一个远程显示和交互的协议，Guacamole实现了一个已有的远程桌面协议功能的超集。因此，在为Guacamole增加对特定远程桌面协议（如RDP）的支持时，就会涉及到编写一个“中间层”来实现远程桌面协议和Guacamole协议的“翻译”。完成这种“翻译”的难度不会比实现任何原始的客户端难，除了这个实现是呈现给远程显示器的而不是本地的那个。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2-2\" class=\"outline-4\">\n<h4 id=\"sec-3-2-2\"><span class=\"section-number-4\">3.2.2</span> guacd</h4>\n<div class=\"outline-text-4\" id=\"text-3-2-2\">\n<p>\nguacd和所有客户端插件都依赖于common库、libguac库，它们让程序通过Guacamole协议通信变得更加容易，也提升了一点抽象程度。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2-3\" class=\"outline-4\">\n<h4 id=\"sec-3-2-3\"><span class=\"section-number-4\">3.2.3</span> web应用程序</h4>\n<div class=\"outline-text-4\" id=\"text-3-2-3\">\n<p>\n用户和Guacamole实际交互的部分是web应用。\n</p>\n\n<p>\n这个web应用就像之前提到的，没有实现任何远程桌面协议。它依赖于guacd，并且只实现了整洁的web接口和认证层。我们使用Java来实现server端的web应用，但并不是非要使用Java来编写。实际上，Guacamole旨在称为一套API，这也是我们鼓励的。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2-4\" class=\"outline-4\">\n<h4 id=\"sec-3-2-4\"><span class=\"section-number-4\">3.2.4</span> 远程桌面网关</h4>\n<div class=\"outline-text-4\" id=\"text-3-2-4\">\n<p>\n只要开发者学过HTML5的canvas标签并知道这个已经被Firefox和Chrome实现，一个用Javascript编写VNC客户端就不再是纸上谈兵了。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3-3\" class=\"outline-3\">\n<h3 id=\"sec-3-3\"><span class=\"section-number-3\">3.3</span> xrdp的直接代理方案</h3>\n<div class=\"outline-text-3\" id=\"text-3-3\">\n<p>\nxrdp支持的都是桌面或者远程桌面协议。如果服务器都是Linux，由于X协议是Linux目前最基本的图形桌面协议，所以其结构可以进一步细化：\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"xrdp概述/xrdpproxy_linux.png\" alt=\"xrdpproxy_linux.png\">\n</p>\n</div>\n\n<p>\nX协议是Linux绘制桌面最基本的协议，而VNC和RDP都只是传输桌面数据的协议而已，VNC server和RDP server的运行必须要有一个运行中的X server。VNC协议出现得比RDP要早得多，所以Unix上支持VNC客户端出现地要早得多，由于RDP协议和VNC协议都是远程图形桌面协议，所以两个协议可以比较容易地相互转化，所以xrdp直接在VNCserver的基础上开发了RDP服务器。\n</p>\n</div>\n<div id=\"outline-container-sec-3-3-1\" class=\"outline-4\">\n<h4 id=\"sec-3-3-1\"><span class=\"section-number-4\">3.3.1</span> xrdp代理实现</h4>\n<div class=\"outline-text-4\" id=\"text-3-3-1\">\n<p>\n由于xrdp需要支持不同协议的代理，加上RDP本本身是一个加密的协议，所以不能直接像TCP代理那样直接转发，大部分时间里，远程桌面协议还是处于获取用户的输入，改变桌面图像的过程中。所以RDP服务器可以看作一个由事件驱动的服务器，这里的事件或者是鼠标事件，或者是键盘事件。这里简单介绍一个交互过程：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">@startuml&#10;client -&#62; proxy :&#29992;&#25143;&#36755;&#20837;&#10;proxy -&#62; server :&#36716;&#21457;&#29992;&#25143;&#36755;&#20837;&#10;server -&#62; proxy :&#26700;&#38754;&#26356;&#26032;&#25968;&#25454;&#21253;&#10;proxy -&#62; client :&#36716;&#21457;&#26700;&#38754;&#26356;&#26032;&#25968;&#25454;&#21253;&#10;@enduml</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n这是作为一个代理服务器的操作时序。proxy和server沟通的过程涉及到协议的转化，所以proxy与server的沟通信息可以不同，相比之下，client和proxy的一直都是RDP协议，所以可以直接得到RDP协议的数据来处理，只要在修改协议栈的实现即可。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-3-2\" class=\"outline-4\">\n<h4 id=\"sec-3-3-2\"><span class=\"section-number-4\">3.3.2</span> <span class=\"todo TODO\">TODO</span> RDP协议转化的实现</h4>\n<div class=\"outline-text-4\" id=\"text-3-3-2\">\n<p>\nxrdp本身可以代理不同的协议，包括VNC和X11，同时xrdp既要支持作为RDP服务器，也要支持作为RDP代理，所以其内部的实现抽象程度较高。这里只关注一下对于RDP协议转化的实现。\n</p>\n</div>\n<ol class=\"org-ol\"><li><a id=\"sec-3-3-2-1\" name=\"sec-3-3-2-1\"></a>C语言的基于对象<br><div class=\"outline-text-5\" id=\"text-3-3-2-1\">\n<p>\n面向对象的三大特性，继承、封装和多态，而基于对象一般指的是只实现了封装和对象的概念。在服务器编程领域面向对象的特性并不是特别受欢迎，不少网络库都仅仅依靠基于对象的手法来组织代码。\n</p>\n\n<p>\n封装可以使用C语言已有的作用域规则模拟，可以考虑一下C++的面向对象的概念。结构体本身是C++类的前身，一个类需要有数据成员和函数成员，可以直接使用函数成员作为结构体的成员之一。接下来就是私有成员和共有成员的划分，C语言可以像Java那样使用一个文件编写一个类的方式，再加上static关键字模拟出私有函数成员的概念，然而结构体有一个问题是其字段都是公有的，这带来的结果是所有数据成员都共有的。当然我们也可以手动提供这种机制，比如像Python那样，所有的私有成员使用下划线开头。函数成员的第一个参数时self，这个也和Python使用的关键字一样，对于不使用self作为第一个参数的而又属于这个类的函数，可以认为是实现了友元或者类方法。\n</p>\n</div>\n</li>\n<li><a id=\"sec-3-3-2-2\" name=\"sec-3-3-2-2\"></a>窗口管理对象<br><div class=\"outline-text-5\" id=\"text-3-3-2-2\">\n<p>\n一个连接完全建立并且能给客户端返回桌面之后，窗口管理对象xrdp_wm会被建立。之后代理和客户端的交互都是通过调用RDP协议栈的接口和xrdp_wm的方法来处理。这里我们看一下，协议栈是如何处理RDP客户端发来的数据包的，这里只介绍协议栈的其中一个接口：libxrdp_process_data，从这个接口我们大致可以知道它是用来处理rdp报文的，它会解析报文的数据，调用响应的处理流程，这点我们知道，这个对象比较特别的一点是，它包含了处理这个反射的所有功能。\n</p>\n\n<p>\n接下来先看一下一个特别的函数，也是这个函数提供了统一的处理方式，让xrdp可以使用统一的逻辑来处理客户的RDP输入数据：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"title\">callback</span><span class=\"params\">(intptr_t id, <span class=\"keyword\">int</span> msg, intptr_t param1, intptr_t param2,</span><br><span class=\"line\">\t intptr_t param3, intptr_t param4)</span></span><br><span class=\"line\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rv;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> xrdp_wm *wm;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> xrdp_rect rect;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (id == <span class=\"number\">0</span>) <span class=\"comment\">/* \"id\" should be \"struct xrdp_process*\" as long */</span></span><br><span class=\"line\">    {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    wm = ((<span class=\"keyword\">struct</span> xrdp_process *)id)-&gt;wm;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (wm == <span class=\"number\">0</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    rv = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (msg)</span><br><span class=\"line\">    {</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>: <span class=\"comment\">/* RDP_INPUT_SYNCHRONIZE */</span></span><br><span class=\"line\">\t    rv = xrdp_wm_key_sync(wm, param3, param1);</span><br><span class=\"line\">\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"comment\">/* RDP_INPUT_SCANCODE */</span></span><br><span class=\"line\">\t    rv = xrdp_wm_key(wm, param3, param1);</span><br><span class=\"line\">\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>: <span class=\"comment\">/* RDP_INPUT_UNICODE */</span></span><br><span class=\"line\">\t    rv = xrdp_wm_key_unicode(wm, param3, param1);</span><br><span class=\"line\">\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0x8001</span>: <span class=\"comment\">/* RDP_INPUT_MOUSE */</span></span><br><span class=\"line\">\t    rv = xrdp_wm_process_input_mouse(wm, param3, param1, param2);</span><br><span class=\"line\">\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0x8002</span>: <span class=\"comment\">/* RDP_INPUT_MOUSEX (INPUT_EVENT_MOUSEX) */</span></span><br><span class=\"line\">\t    rv = xrdp_wm_process_input_mousex(wm, param3, param1, param2);</span><br><span class=\"line\">\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0x4444</span>: <span class=\"comment\">/* invalidate, this is not from RDP_DATA_PDU_INPUT */</span></span><br><span class=\"line\">\t    <span class=\"comment\">/* like the rest, it's from RDP_PDU_DATA with code 33 */</span></span><br><span class=\"line\">\t    <span class=\"comment\">/* it's the rdp client asking for a screen update */</span></span><br><span class=\"line\">\t    MAKERECT(rect, param1, param2, param3, param4);</span><br><span class=\"line\">\t    rv = xrdp_bitmap_invalidate(wm-&gt;screen, &amp;rect);</span><br><span class=\"line\">\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0x5555</span>: <span class=\"comment\">/* called from xrdp_channel.c, channel data has come in,</span><br><span class=\"line\">\t\t    pass it to module if there is one */</span></span><br><span class=\"line\">\t    rv = xrdp_wm_process_channel_data(wm, param1, param2, param3, param4);</span><br><span class=\"line\">\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0x5556</span>:</span><br><span class=\"line\">\t    rv = xrdp_mm_check_chan(wm-&gt;mm);</span><br><span class=\"line\">\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0x5557</span>:</span><br><span class=\"line\">\t    <span class=\"comment\">//g_writeln(\"callback: frame ack %d\", param1);</span></span><br><span class=\"line\">\t    xrdp_mm_frame_ack(wm-&gt;mm, param1);</span><br><span class=\"line\">\t    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rv;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n可以看到这个函数会处理RDP的所有输入，会根据RDP数据包来调用相应的处理流程，这里还看不出什么，可以深入到xrdp_wm_key，会发现如下这个部分:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xrdp_wm_key(<span class=\"keyword\">struct</span> xrdp_wm *self, <span class=\"keyword\">int</span> device_flags, <span class=\"keyword\">int</span> scan_code)</span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self-&gt;mm-&gt;mod != <span class=\"number\">0</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (self-&gt;mm-&gt;mod-&gt;mod_event != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t    ki = get_key_info_from_scan_code</span><br><span class=\"line\">\t\t (device_flags, scan_code, self-&gt;keys, self-&gt;caps_lock,</span><br><span class=\"line\">\t\t  self-&gt;num_lock, self-&gt;scroll_lock,</span><br><span class=\"line\">\t\t  &amp;(self-&gt;keymap));</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (ki != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t    {</span><br><span class=\"line\">\t\tself-&gt;mm-&gt;mod-&gt;mod_event(self-&gt;mm-&gt;mod, msg, ki-&gt;chr, ki-&gt;sym,</span><br><span class=\"line\">\t\t\t\t\t scan_code, device_flags); <span class=\"comment\">// 模块提供的</span></span><br><span class=\"line\">\t    }</span><br><span class=\"line\">\t}</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (self-&gt;focused_window != <span class=\"number\">0</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">\txrdp_bitmap_def_proc(self-&gt;focused_window,</span><br><span class=\"line\">\t\t\t     msg, scan_code, device_flags);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\nself-&gt;mm-&gt;mod-&gt;mod_event这个调用也是其他几个包处理函数最终会调用的函数。再需要深入就是模块系统了。\n</p>\n</div>\n</li>\n<li><a id=\"sec-3-3-2-3\" name=\"sec-3-3-2-3\"></a>模块系统<br><div class=\"outline-text-5\" id=\"text-3-3-2-3\">\n<p>\n这里先不讲连接初始化的过程，先说一下RDP连接建立后，对于每个RDP输入数据包，xrdp会响应的图像更新数据。作为代理这些数据会被各自的后台模块解析，之在模块的内部进行处理，各个模块的处理方式不同，如果是vnc后台，就会和给后台发送相应的数据，待后台处理完毕之后发响应通过前台发送回给客户端。\n说白了实际产生响应的部分由各个模块来实现，这就是xrdp使用模块系统的原因，可以看一下模块系统的代码：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> xrdp_mod</span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">int</span> size; <span class=\"comment\">/* size of this struct */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> version; <span class=\"comment\">/* internal version */</span></span><br><span class=\"line\">  <span class=\"comment\">/* client functions */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*mod_start)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> bpp);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*mod_connect)(<span class=\"keyword\">struct</span> xrdp_mod* v);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*mod_event)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> msg, <span class=\"keyword\">long</span> param1, <span class=\"keyword\">long</span> param2,</span><br><span class=\"line\">\t\t   <span class=\"keyword\">long</span> param3, <span class=\"keyword\">long</span> param4);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*mod_signal)(<span class=\"keyword\">struct</span> xrdp_mod* v);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*mod_end)(<span class=\"keyword\">struct</span> xrdp_mod* v);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*mod_set_param)(<span class=\"keyword\">struct</span> xrdp_mod *v, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *value);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*mod_session_change)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*mod_get_wait_objs)(<span class=\"keyword\">struct</span> xrdp_mod* v, tbus* read_objs, <span class=\"keyword\">int</span>* rcount,</span><br><span class=\"line\">\t\t\t   tbus* write_objs, <span class=\"keyword\">int</span>* wcount, <span class=\"keyword\">int</span>* timeout);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*mod_check_wait_objs)(<span class=\"keyword\">struct</span> xrdp_mod* v);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*mod_frame_ack)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> frame_id);</span><br><span class=\"line\">  tintptr mod_dumby[<span class=\"number\">100</span> - <span class=\"number\">10</span>]; <span class=\"comment\">/* align, 100 minus the number of mod</span><br><span class=\"line\">\t\t\t\t  functions above */</span></span><br><span class=\"line\">  <span class=\"comment\">/* server functions */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_begin_update)(<span class=\"keyword\">struct</span> xrdp_mod* v);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_end_update)(<span class=\"keyword\">struct</span> xrdp_mod* v);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_fill_rect)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> cx, <span class=\"keyword\">int</span> cy);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_screen_blt)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> cx, <span class=\"keyword\">int</span> cy,</span><br><span class=\"line\">\t\t\t   <span class=\"keyword\">int</span> srcx, <span class=\"keyword\">int</span> srcy);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_paint_rect)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> cx, <span class=\"keyword\">int</span> cy,</span><br><span class=\"line\">\t\t\t   <span class=\"keyword\">char</span>* data, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height,</span><br><span class=\"line\">\t\t\t   <span class=\"keyword\">int</span> srcx, <span class=\"keyword\">int</span> srcy);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_set_pointer)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y,</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">char</span>* data, <span class=\"keyword\">char</span>* mask);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_palette)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span>* palette);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_msg)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">char</span>* msg, <span class=\"keyword\">int</span> code);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_is_term)(<span class=\"keyword\">struct</span> xrdp_mod* v);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_set_clip)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> cx, <span class=\"keyword\">int</span> cy);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_reset_clip)(<span class=\"keyword\">struct</span> xrdp_mod* v);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_set_fgcolor)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> fgcolor);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_set_bgcolor)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> bgcolor);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_set_opcode)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> opcode);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_set_mixmode)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> mixmode);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_set_brush)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> x_origin, <span class=\"keyword\">int</span> y_origin,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> style, <span class=\"keyword\">char</span>* pattern);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_set_pen)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> style,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> width);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_draw_line)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> x1, <span class=\"keyword\">int</span> y1, <span class=\"keyword\">int</span> x2, <span class=\"keyword\">int</span> y2);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_add_char)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> font, <span class=\"keyword\">int</span> character,</span><br><span class=\"line\">\t\t\t <span class=\"keyword\">int</span> offset, <span class=\"keyword\">int</span> baseline,</span><br><span class=\"line\">\t\t\t <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, <span class=\"keyword\">char</span>* data);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_draw_text)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> font,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> mixmode, <span class=\"keyword\">int</span> clip_left, <span class=\"keyword\">int</span> clip_top,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> clip_right, <span class=\"keyword\">int</span> clip_bottom,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> box_left, <span class=\"keyword\">int</span> box_top,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> box_right, <span class=\"keyword\">int</span> box_bottom,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">char</span>* data, <span class=\"keyword\">int</span> data_len);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_reset)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, <span class=\"keyword\">int</span> bpp);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_query_channel)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> index,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">char</span>* channel_name,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">int</span>* channel_flags);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_get_channel_id)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_send_to_channel)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> channel_id,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">char</span>* data, <span class=\"keyword\">int</span> data_len,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> total_data_len, <span class=\"keyword\">int</span> flags);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_bell_trigger)(<span class=\"keyword\">struct</span> xrdp_mod* v);</span><br><span class=\"line\">  <span class=\"comment\">/* off screen bitmaps */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_create_os_surface)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> rdpindex,</span><br><span class=\"line\">\t\t\t\t  <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_switch_os_surface)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> rdpindex);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_delete_os_surface)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> rdpindex);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_paint_rect_os)(<span class=\"keyword\">struct</span> xrdp_mod* mod, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">int</span> cx, <span class=\"keyword\">int</span> cy,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">int</span> rdpindex, <span class=\"keyword\">int</span> srcx, <span class=\"keyword\">int</span> srcy);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_set_hints)(<span class=\"keyword\">struct</span> xrdp_mod* mod, <span class=\"keyword\">int</span> hints, <span class=\"keyword\">int</span> mask);</span><br><span class=\"line\">  <span class=\"comment\">/* rail */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_window_new_update)(<span class=\"keyword\">struct</span> xrdp_mod* mod, <span class=\"keyword\">int</span> window_id,</span><br><span class=\"line\">\t\t\t\t  <span class=\"keyword\">struct</span> rail_window_state_order* window_state,</span><br><span class=\"line\">\t\t\t\t  <span class=\"keyword\">int</span> flags);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_window_delete)(<span class=\"keyword\">struct</span> xrdp_mod* mod, <span class=\"keyword\">int</span> window_id);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_window_icon)(<span class=\"keyword\">struct</span> xrdp_mod* mod,</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">int</span> window_id, <span class=\"keyword\">int</span> cache_entry, <span class=\"keyword\">int</span> cache_id,</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">struct</span> rail_icon_info* icon_info,</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">int</span> flags);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_window_cached_icon)(<span class=\"keyword\">struct</span> xrdp_mod* mod,</span><br><span class=\"line\">\t\t\t\t   <span class=\"keyword\">int</span> window_id, <span class=\"keyword\">int</span> cache_entry,</span><br><span class=\"line\">\t\t\t\t   <span class=\"keyword\">int</span> cache_id, <span class=\"keyword\">int</span> flags);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_notify_new_update)(<span class=\"keyword\">struct</span> xrdp_mod* mod,</span><br><span class=\"line\">\t\t\t\t  <span class=\"keyword\">int</span> window_id, <span class=\"keyword\">int</span> notify_id,</span><br><span class=\"line\">\t\t\t\t  <span class=\"keyword\">struct</span> rail_notify_state_order* notify_state,</span><br><span class=\"line\">\t\t\t\t  <span class=\"keyword\">int</span> flags);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_notify_delete)(<span class=\"keyword\">struct</span> xrdp_mod* mod, <span class=\"keyword\">int</span> window_id,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">int</span> notify_id);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_monitored_desktop)(<span class=\"keyword\">struct</span> xrdp_mod* mod,</span><br><span class=\"line\">\t\t\t\t  <span class=\"keyword\">struct</span> rail_monitored_desktop_order* mdo,</span><br><span class=\"line\">\t\t\t\t  <span class=\"keyword\">int</span> flags);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_set_pointer_ex)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">char</span>* data,</span><br><span class=\"line\">\t\t\t       <span class=\"keyword\">char</span>* mask, <span class=\"keyword\">int</span> bpp);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_add_char_alpha)(<span class=\"keyword\">struct</span> xrdp_mod* mod, <span class=\"keyword\">int</span> font, <span class=\"keyword\">int</span> character,</span><br><span class=\"line\">\t\t\t       <span class=\"keyword\">int</span> offset, <span class=\"keyword\">int</span> baseline,</span><br><span class=\"line\">\t\t\t       <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, <span class=\"keyword\">char</span>* data);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_create_os_surface_bpp)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> rdpindex,</span><br><span class=\"line\">\t\t\t\t      <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, <span class=\"keyword\">int</span> bpp);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_paint_rect_bpp)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> cx, <span class=\"keyword\">int</span> cy,</span><br><span class=\"line\">\t\t\t       <span class=\"keyword\">char</span>* data, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height,</span><br><span class=\"line\">\t\t\t       <span class=\"keyword\">int</span> srcx, <span class=\"keyword\">int</span> srcy, <span class=\"keyword\">int</span> bpp);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_composite)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">int</span> srcidx, <span class=\"keyword\">int</span> srcformat,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> srcwidth, <span class=\"keyword\">int</span> srcrepeat, <span class=\"keyword\">int</span>* srctransform,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> mskflags, <span class=\"keyword\">int</span> mskidx, <span class=\"keyword\">int</span> mskformat,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> mskwidth, <span class=\"keyword\">int</span> mskrepeat, <span class=\"keyword\">int</span> op,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> srcx, <span class=\"keyword\">int</span> srcy, <span class=\"keyword\">int</span> mskx, <span class=\"keyword\">int</span> msky,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> dstx, <span class=\"keyword\">int</span> dsty, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height,</span><br><span class=\"line\">\t\t\t  <span class=\"keyword\">int</span> dstformat);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_paint_rects)(<span class=\"keyword\">struct</span> xrdp_mod* v,</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">int</span> num_drects, <span class=\"keyword\">short</span> *drects,</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">int</span> num_crects, <span class=\"keyword\">short</span> *crects,</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">char</span> *data, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height,</span><br><span class=\"line\">\t\t\t    <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> frame_id);</span><br><span class=\"line\">  <span class=\"keyword\">int</span> (*server_session_info)(<span class=\"keyword\">struct</span> xrdp_mod* v, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *data,</span><br><span class=\"line\">\t\t\t     <span class=\"keyword\">int</span> data_bytes);</span><br><span class=\"line\">  tintptr server_dumby[<span class=\"number\">100</span> - <span class=\"number\">44</span>]; <span class=\"comment\">/* align, 100 minus the number of server</span><br><span class=\"line\">\t\t\t\t     functions above */</span></span><br><span class=\"line\">  <span class=\"comment\">/* common */</span></span><br><span class=\"line\">  tintptr handle; <span class=\"comment\">/* pointer to self as int */</span></span><br><span class=\"line\">  tintptr wm; <span class=\"comment\">/* struct xrdp_wm* */</span></span><br><span class=\"line\">  tintptr painter;</span><br><span class=\"line\">  tintptr si;</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n以上是对于xrdp模块应该配置的接口列表，所有的模块都被编译成一个动态链接库，同时都会提供mod_init以及mod_exit这两个全局符号，在RDP连接初始化的过程中，就会有根据用户和输入和配置文件选择一个动态连接库，只后调用mod_init来建立和VNC服务器（或者rdp服务器）的连接。\n这个同内核态编写模块相似，当然用户态实现起来要简单得多。(man 一下dlopen就有了)\n近期大家都在学习Python，可能对于多态也有一定理解了，多态是一种效果，对于不同对象的调用同样的接口会产生不同的逻辑行为，说的就是这个。在C语言里一般使用函数指针来实现多态。当然这种多态实现和Python已经差了很多了，\n动态类型的语言本来就不需要提供额外的间接层。我们可以先看一下这些接口。\n如果阅读代码可以看到每个模块实现的接口都只是一部分，处理mod_init和mod_exit，需要特别实现以外。还有一个函数mod_event会接收客户端的输入事件，然后调用自身的逻辑来处理，这是每个模块都必须实现的。也是每个模块产生响应的接口。\n</p>\n</div>\n</li></ol>\n</div>\n</div>\n<div id=\"outline-container-sec-3-4\" class=\"outline-3\">\n<h3 id=\"sec-3-4\"><span class=\"section-number-3\">3.4</span> xrdp、freerdp、rdesktop</h3>\n<div class=\"outline-text-3\" id=\"text-3-4\">\n<p>\nrdesktop和freerdp这两个都是Linux下的RDP客户端。xrdp是基于freerdp和rdesktop开发的，rdesktop最早是通过逆向工程开发出来的，算是RDP客户端的鼻祖。而freerdp是rdesktop的一个分支，支持的RDP标准要高很多。\n</p>\n\n\n<p>\nxrdp的源码本身使用了基于对象做法来编写程序，其风格接近Python。freerdp也使用了基于对象的风格。只有比较早的rdesktop没有使用这种风格，所以rdp协议栈是最容易抽取的，可以直接使用，可惜目前只支持低版本的RDP标准。\n</p>\n\n<p>\nfreerdp和rdesktop作为客户端，需要解析绘图指令和图片缓存，将桌面显示在本机屏幕上或者窗口上。这个过程是之后开发 <b>回放功能</b> 的基础。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-5\" class=\"outline-3\">\n<h3 id=\"sec-3-5\"><span class=\"section-number-3\">3.5</span> Guacamole、FreeRDP-WebConnect</h3>\n<div class=\"outline-text-3\" id=\"text-3-5\">\n<p>\nFreeRDP的开发者又使用C++开发了FreeRDP-WebConnect服务器程序。由于使用的是C++，暂时不打算去看。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 借助远程桌面协议模拟ssh和telnet代理</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n一般在shell上运行一个程序，默认情况下，该程序会继承shell的文件描述符，标准输出指向终端的输出，标准输入指向终端的输入，所以终端是被当作文件来处理的。所以如果在web端实现一个功能强大的客户端的话，ssh或者telnet程序可以直接可以直接利用websocket来获得终端的输入，输出再利用websocket传回给web终端，这个是Gateone的实现技巧。这个方案需要实现一个浏览器的终端（一般使用JavaScript编写）。另一套方案就是借助远程桌面协议，至于原理很容易理解，我们可以在桌面开一个虚拟终端，并且全屏显示，这样就和终端没有什么区别了。所以既然实现了远程桌面终端其实也完全可以复用远程桌面的很多实现。我们当然不可能先开一个桌面再开一个终端来全屏显示，但这个做法的可行性暗示了我们这么一个事实：远程桌面协议完全有能力描述一个终端的所有功能。所以具体的做法就是实现一个将终端的显示转化为远程桌面协议的绘图数据，之后借助远程桌面协议的客户端来显示就可以了。这个方案其实要灵活得多，也不需要在浏览器上运行一个终端，但由此也引入了一定开销。终端操作的回放功能可以直接使用远程桌面的处理功能，如果要同时支持浏览器的远程桌面客户端，那么这个方案应该可以减少不少工作量。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> <span class=\"todo TODO\">TODO</span> Guacamole 协议</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n</div><div id=\"outline-container-sec-5-1\" class=\"outline-3\">\n<h3 id=\"sec-5-1\"><span class=\"section-number-3\">5.1</span> 概述</h3>\n<div class=\"outline-text-3\" id=\"text-5-1\">\n<p>\n本章是对Guacamole协议的概述，描述它的设计和一般用途。虽然这里会介绍一些指令和语法，但这不会是一份详尽可用指令清单。本文的目的仅仅是列出一般的类型和用法，如果你在寻找某个具体指令的语法和用途，请参考附录中的协议参考。\n</p>\n</div>\n<div id=\"outline-container-sec-5-1-1\" class=\"outline-4\">\n<h4 id=\"sec-5-1-1\"><span class=\"section-number-4\">5.1.1</span> <span class=\"todo TODO\">TODO</span> 设计</h4>\n<div class=\"outline-text-4\" id=\"text-5-1-1\">\n<p>\nGuacamole协议由指令组成，每个指令都是一个以逗号分隔的列表，结尾跟一个终止用的分号。列表的第一个元素是指令的操作码，剩下的都是指令的参数：\n</p>\n\n<p>\nOPCODE, ARG1, ARG2, ARG3, &#x2026;;\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-1-2\" class=\"outline-4\">\n<h4 id=\"sec-5-1-2\"><span class=\"section-number-4\">5.1.2</span> 事件</h4>\n<div class=\"outline-text-4\" id=\"text-5-1-2\">\n<p>\n当客户端或者服务器有什么东西改变，如某个键被按下、鼠标被移动、剪切板数据改变时，会发送一个指令来说明事件的发生。\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-5-2\" class=\"outline-3\">\n<h3 id=\"sec-5-2\"><span class=\"section-number-3\">5.2</span> Guacamole</h3>\n</div>\n<div id=\"outline-container-sec-5-3\" class=\"outline-3\">\n<h3 id=\"sec-5-3\"><span class=\"section-number-3\">5.3</span> Guacamole参考</h3>\n<div class=\"outline-text-3\" id=\"text-5-3\">\n</div><div id=\"outline-container-sec-5-3-1\" class=\"outline-4\">\n<h4 id=\"sec-5-3-1\"><span class=\"section-number-4\">5.3.1</span> 绘制</h4>\n<div class=\"outline-text-4\" id=\"text-5-3-1\">\n</div><ol class=\"org-ol\"><li><a id=\"sec-5-3-1-1\" name=\"sec-5-3-1-1\"></a>arc（弧线）<br></li></ol>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> xrdp的网络编程模型</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<p>\n虽然xrdp的使用的网络编程模型无法处理高并发的情景，但是它组织程序的方式和一些针对RDP协议的优化都是我们需要知道的，加上这个部分大家会比较熟悉，所以这里把其中重要的东西提取出来，供大家学习。\n</p>\n\n<p>\n无论式VNC、X11、还是RDP，其服务器的状态变化基本都可以用以事件作为输入的自动机来描述，这也是为什么基于事件<sup><a id=\"fnr.7\" name=\"fnr.7\" class=\"footref\" href=\"#fn.7\">7</a></sup>网络编程模型十分常用的原因。xrdp就选择了这种编程模型。绘制和处理的图形的计算主要由X server和X client完成<sup><a id=\"fnr.8\" name=\"fnr.8\" class=\"footref\" href=\"#fn.8\">8</a></sup>，RDP和VNC使用的RFB协议只是负责传输图形和输入用户事件，所以RDP服务器处理的主要是IO密集型的任务。\n</p>\n</div>\n<div id=\"outline-container-sec-6-1\" class=\"outline-3\">\n<h3 id=\"sec-6-1\"><span class=\"section-number-3\">6.1</span> IO模型</h3>\n<div class=\"outline-text-3\" id=\"text-6-1\">\n<p>\n《Unix网络编程 卷一：套接字联网API》提到了五种IO模型：\n</p>\n<ol class=\"org-ol\">\n<li>阻塞式I/O\n</li>\n<li>非阻塞I/O\n</li>\n<li>I/O复用\n</li>\n<li>信号驱动式I/O\n</li>\n<li>异步I/O\n</li>\n</ol>\n\n<p>\nxrdp服务器采用比较流行的做法，即使用非阻塞I/O和I/O复用模型。可以看一下源码：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"title\">trans_listen_address</span><span class=\"params\">(<span class=\"keyword\">struct</span> trans *self, <span class=\"keyword\">char</span> *port, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *address)</span></span><br><span class=\"line\"></span>{</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    g_tcp_set_non_blocking(self-&gt;sck);</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\nxrdp的listen socket会被设定为non_blocking。除此之外，对于xrdp中默认TCP连接的设置还包括如下内容：\n</p>\n<ul class=\"org-ul\">\n<li>关闭Nagle算法，提高是实时性。\n</li>\n<li>TCP_KEEPALIVE 定时探测连接是否断开，如果断开的时候没有断开的信息，连接也能被关闭。\n</li>\n<li>会设置send_buffer_bytes和recv_buffer_bytes。\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-6-2\" class=\"outline-3\">\n<h3 id=\"sec-6-2\"><span class=\"section-number-3\">6.2</span> 基于事件的网络编程模型</h3>\n<div class=\"outline-text-3\" id=\"text-6-2\">\n<p>\n基于事件的网络编程模型一般是建立一个事件循环，其逻辑大体如下，一般大家都比较熟悉，主要是一个事件循环：\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"xrdp概述/eventloop.png\" alt=\"eventloop.png\">\n</p>\n</div>\n\n<p>\nxrdp中最重要的两个“事件循环”包括：\n</p>\n<ol class=\"org-ol\">\n<li>监听线程的事件循环\n</li>\n<li>RDP会话线程的事件循环\n</li>\n</ol>\n\n<p>\n这里需要了解一些惯例，之前说过RDP使用的是TCP作为传输层协议，而TCP网络编程一般至少处理三个事件<sup><a id=\"fnr.3.100\" name=\"fnr.3.100\" class=\"footref\" href=\"#fn.3\">3</a></sup>：\n</p>\n<ol class=\"org-ol\">\n<li>连接建立。\n</li>\n<li>连接断开。\n</li>\n<li>消息到达，文件描述符可读。\n</li>\n</ol>\n\n<p>\n对于监听线程来说它主要处理连接建立的这个TCP事件，这其中还需要注意一下信号的处理。由于在多线程服务器编程中一般不会推荐信号，因为它是异步产生的，处理起来要复杂得多。同时，而且和基于事件网络编程模型很不搭，所以对于需要使用信号的场合。一般会通过两种方法将信号转化为文件描述符事件：\n</p>\n<ol class=\"org-ol\">\n<li>传统的方法，用signal handler 往一个特定的pipe写入一个字节，主程序监听这个pipe的事件，从而纳入统一的IO事件处理框架中。\n</li>\n<li>现代点的方法，使用signalfd把信号直接转化为文件描述符事件。\n</li>\n</ol>\n\n<p>\nxrdp使用了第一种方法:\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"title\">xrdp_listen_main_loop</span><span class=\"params\">(<span class=\"keyword\">struct</span> xrdp_listen *self)</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">//初始化...</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cont)</span><br><span class=\"line\">    {</span><br><span class=\"line\">\t  <span class=\"comment\">/* build the wait obj list */</span></span><br><span class=\"line\">\t  robjs_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t  robjs[robjs_count++] = term_obj;</span><br><span class=\"line\">\t  robjs[robjs_count++] = sync_obj;</span><br><span class=\"line\">\t  robjs[robjs_count++] = done_obj;</span><br><span class=\"line\">\t  timeout = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* if (self-&gt;listen_trans != 0) */</span></span><br><span class=\"line\">\t  {</span><br><span class=\"line\">\t      <span class=\"keyword\">if</span> (trans_get_wait_objs(self-&gt;listen_trans, robjs,</span><br><span class=\"line\">\t\t\t\t      &amp;robjs_count) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t      {</span><br><span class=\"line\">\t\t  log_message(LOG_LEVEL_ERROR,<span class=\"string\">\"Listening socket is in wrong state, \"</span></span><br><span class=\"line\">\t\t\t    <span class=\"string\">\"terminating listener\"</span>);</span><br><span class=\"line\">\t\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t      }</span><br><span class=\"line\">\t  } <span class=\"comment\">// 这里设置了所有的文件描述符，加起来一般有5个</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* wait - timeout -1 means wait indefinitely*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (g_obj_wait(robjs, robjs_count, <span class=\"number\">0</span>, <span class=\"number\">0</span>, timeout) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t  {</span><br><span class=\"line\">\t      <span class=\"comment\">/* error, should not get here */</span></span><br><span class=\"line\">\t      g_sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t  }</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">// dispatch相应的处理流程</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (g_is_wait_obj_set(term_obj)) <span class=\"comment\">/* termination called */</span></span><br><span class=\"line\">\t  {</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t  }</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* some function must be processed by this thread */</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (g_is_wait_obj_set(sync_obj))</span><br><span class=\"line\">\t  {</span><br><span class=\"line\">\t      g_reset_wait_obj(sync_obj);</span><br><span class=\"line\">\t      g_process_waiting_function(); <span class=\"comment\">/* run the function */</span></span><br><span class=\"line\">\t  }</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (g_is_wait_obj_set(done_obj)) <span class=\"comment\">/* pro_done_event */</span></span><br><span class=\"line\">\t  {</span><br><span class=\"line\">\t      g_reset_wait_obj(done_obj);</span><br><span class=\"line\">\t      <span class=\"comment\">/* a process has died remove it from lists*/</span></span><br><span class=\"line\">\t      xrdp_listen_delete_done_pro(self); <span class=\"comment\">// 一个process即可以是读也可以时写</span></span><br><span class=\"line\">\t  }</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"comment\">/* Run the callback when accept() returns a new socket*/</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (trans_check_wait_objs(self-&gt;listen_trans) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t  {</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t  }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n我们可以看到xrdp的监听线程主要由四个事件来驱动：\n</p>\n<ol class=\"org-ol\">\n<li>SIGINT和SIGTERM信号产生。\n</li>\n<li>同步事件发生。\n</li>\n<li>一个处理线程结束。\n</li>\n<li>连接可建立。\n</li>\n</ol>\n<p>\nxrdp使用了select来监听事件以及确认事件是否发生的。之所以使用select而不用更好用的poll甚至epoll，个人猜测是因为xrdp其实也需要兼容Windows，而Windows上只支持了select。这点其实制约了xrdp的实现。\n</p>\n\n<p>\n一旦连接建立之后，监听线程就会开辟一个新的线程来处理RDP会话，新的这个线程会accept这个连接的TCP文件描述符，之后监听线程就会等待下一个是事件的到来，所以xrdp采用的是每个连接一个线程的网络编程模型。显然这不是能够处理高并发的模型。\n带来的整个处理流程。以下是概念图：\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"xrdp概述/vncproxy.png\" alt=\"vncproxy.png\">\n</p>\n</div>\n\n<p>\n之前说过\n堡垒机中远程桌面协议代理这块的要点是协议的代理，\nRFB协议（VNC使用的协议）和VNC协议的RDP化，可以看到\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-6-3\" class=\"outline-3\">\n<h3 id=\"sec-6-3\"><span class=\"section-number-3\">6.3</span> RFB协议要点</h3>\n</div>\n\n<div id=\"outline-container-sec-6-4\" class=\"outline-3\">\n<h3 id=\"sec-6-4\"><span class=\"section-number-3\">6.4</span> VNC模块</h3>\n</div>\n<div id=\"outline-container-sec-6-5\" class=\"outline-3\">\n<h3 id=\"sec-6-5\"><span class=\"section-number-3\">6.5</span> 基本流程</h3>\n</div>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> 协议的处理方式</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n</div><div id=\"outline-container-sec-7-1\" class=\"outline-3\">\n<h3 id=\"sec-7-1\"><span class=\"section-number-3\">7.1</span> xrdp_process_data_in</h3>\n<div class=\"outline-text-3\" id=\"text-7-1\">\n<p>\n这个也是事件\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> 进展</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<ul class=\"org-ul\">\n<li>到目前为止，基本摸清了xrdp代理的结构，以及各个协议的地位，相关实现代码的基本结构。\n</li>\n<li>接下来会主要把精力放到如何保存rdp协议数据和回放的功能实现上。\n</li>\n<li>再之后就是处理会话数据的检索功能。\n</li>\n<li>后面才是对RDP协议的细致分析和处理。\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-9\" class=\"outline-2\">\n<h2 id=\"sec-9\"><span class=\"section-number-2\">9</span> <span class=\"todo TODO\">TODO</span> 问题</h2>\n<div class=\"outline-text-2\" id=\"text-9\">\n<ul class=\"org-ul\">\n<li>Once loaded是值什么？\n</li>\n<li>JavaScript不能处理二进制数据\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-10\" class=\"outline-2\">\n<h2 id=\"sec-10\"><span class=\"section-number-2\">10</span> FAQ</h2>\n<div class=\"outline-text-2\" id=\"text-10\">\n<ul class=\"org-ul\">\n<li>在没有websocket的时候如何完成代理的功能？\nHTTP tennel\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-11\" class=\"outline-2\">\n<h2 id=\"sec-11\"><span class=\"section-number-2\">11</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-11\">\n<ul class=\"org-ul\">\n<li><a href=\"http://www.xrdp.org/\">xrdp官网</a>\n</li>\n<li><a href=\"https://github.com/rdesktop/rdesktop\">https://github.com/rdesktop/rdesktop</a>\n</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Remote_Desktop_Protocol\">Wikipedia：Remote Desktop Protocol</a>\n</li>\n<li>RDP协议的代理与转发的研究和实现\n</li>\n<li><a href=\"http://qimo601.iteye.com/blog/614649\">RDP协议详细解析</a>\n</li>\n<li><a href=\"https://zh.wikipedia.org/zh-hans/%E4%BD%8D%E5%9B%BE\">维基百科:位图</a>\n</li>\n<li><a href=\"http://cn.linux.vbird.org/linux_basic/0590xwindow.php\">鸟哥的Linux私房菜：X Window配置介绍</a>\n</li>\n<li>宗波. 浅析堡垒机概念及工作原理[J]. 及计算机光盘软件与应用，2012,18：070\n</li>\n<li>基于代理的远程访问审计系统的设计于实现\n</li>\n<li>RDP协议的代理与转发的研究与实现 乔俊峰\n</li>\n<li>基于代理的远程访问审计系统的设计与实现 李灏  \n</li>\n<li>浅析运维堡垒机的设计和应用前景\n</li>\n<li><a href=\"https://github.com/neutrinolabs/xrdp\">https://github.com/neutrinolabs/xrdp</a>\n</li>\n<li><a href=\"https://github.com/neutrinolabs/NeutrinoRDP\">https://github.com/neutrinolabs/NeutrinoRDP</a>\n</li>\n<li><a href=\"https://github.com/silenceli/rdpproxy\">https://github.com/silenceli/rdpproxy</a>\n</li>\n<li><a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\">C11标准的最终定稿的草案</a>\n</li>\n<li><a href=\"https://wiki.wireshark.org/RDP\">RDP - The Wireshark Wiki</a>\n</li>\n<li><a href=\"http://yosefk.com/blog/oo-c-is-passable.html\">oo-c-is-passable</a>\n</li>\n<li><a href=\"https://baike.baidu.com/item/VNC/2906305?fr=aladdin\">百度百科:VNC</a>\n</li>\n<li>The RFB Protocol    \n</li>\n</ul>\n</div>\n</div>\n<div id=\"footnotes\">\n<h2 class=\"footnotes\">Footnotes: </h2>\n<div id=\"text-footnotes\">\n\n<div class=\"footdef\"><sup><a id=\"fn.1\" name=\"fn.1\" class=\"footnum\" href=\"#fnr.1\">1</a></sup> <p>VNC使用的协议</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.2\" name=\"fn.2\" class=\"footnum\" href=\"#fnr.2\">2</a></sup> <p>X manager就是这样的</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.3\" name=\"fn.3\" class=\"footnum\" href=\"#fnr.3\">3</a></sup> <p>xrdp默认只监听TCP端口</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.4\" name=\"fn.4\" class=\"footnum\" href=\"#fnr.4\">4</a></sup> <p>历史版本包括4.0、5.0、5.1、5.2、6.0、6.1、7.0、8.0、8.1、10.0</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.5\" name=\"fn.5\" class=\"footnum\" href=\"#fnr.5\">5</a></sup> <p>最新的浏览器其实有办法解决这个问题，不过不必考虑</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.6\" name=\"fn.6\" class=\"footnum\" href=\"#fnr.6\">6</a></sup> <p>浏览器端</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.7\" name=\"fn.7\" class=\"footnum\" href=\"#fnr.7\">7</a></sup> <p>一般指文件描述符事件</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.8\" name=\"fn.8\" class=\"footnum\" href=\"#fnr.8\">8</a></sup> <p>Windows上没有X协议，这里只是说明RDP和VNC这类协议的职责所在而已。</p></div>\n\n\n</div>\n</div>\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
