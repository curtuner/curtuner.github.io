{"md5":"79df136afdf5a629a65a39f13334eab7","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n静态链接的缺点是空间利用存在太多的浪费，所以人们将链接的过程推迟到了运行时。接口兼容是共享库的一大问题。缺少共享库的版本管理的话，就容易出现Windows下的DLL Hell。ELF文件中就有动态共享对象（Dynamic Shared Objects）。一般动态链接库也被当作程序的主要模块。最常用的一些模块或者库一般都是动态链接的。程序如果使用了动态链接库，那么在加载时动态链接器会将动态库load到进程空间中。动态库和静态库相比会有一定的性能损失。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 要点</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<ul class=\"org-ul\">\n<li>共享对象的加载地址是在运行时有动态链接器根据地址空闲情况确定的\n</li>\n<li>在32位Linux系统中，动态链接库的映射区一般是从1GB开始的\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> -fpic和fPIC</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\n-fpic存在平台上的限制\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> Linux 共享库的组织</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n共享库的使用太多了\n</p>\n</div>\n\n<div id=\"outline-container-sec-4-1\" class=\"outline-3\">\n<h3 id=\"sec-4-1\"><span class=\"section-number-3\">4.1</span> 共享库的版本命名</h3>\n<div class=\"outline-text-3\" id=\"text-4-1\">\n<p>\n共享对象命名一般是这种形式：\nlibname.so.x.y.z\n其中x一般是在进行了不兼容的重大升级之后会改动的。y一般是在增加了新的接口符号后才改动的，保持了向后兼容。z则是在进行了一些错误修正和性能改进后才改动的，完全保持向后兼容。\n</p>\n</div>\n</div>\n</div>\n\nLast Updated 2017-06-28 三 15:02.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
