{"md5":"489fc2abc4e6f994a7db8d7fb00787d9","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nGuacamole目前已经有一套基础的审计解决方案了，但是xrdp并没有，所以目前的重心在于实验考察xrdp审计的解决方案。做了一些尝试后，看到了一些以前没察觉的问题。另一方面，Guacamole的开销会比较成问题，所以经过了一些测试和讨论之后，想法也发生了一些改变。这次主要讲一下一些思路还有遇到的问题，可能会再说一些基本概念。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 关于协议转换</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n无论是xrdp还是Guacamole都涉及到了协议的转化，Guacamole就如之前说的图形协议会统一转换成方便前端解析的Guacamole协议。而xrdp作为RDP服务器最常用的转换是vnc到rdp的转换。xrdp和Guacamole都不是一开始就支持所有的协议转换的，而是慢慢增加的。所以这两个软件采用了设计一个 <b>中间层</b> 的做法来方便之后的添加新的协议。\n设计中间层意味着其代理方式不是直接转发数据包的形式，而是会先将数据进行解析成一个中间表示，之后再把这个中间表示转化成另一类协议格式。服务端的响应模式都是下面这种形式：\n</p>\n\n<div class=\"figure\">\n<p><img src=\"guacamole和xrdp审计方案/protocol_convert.png\" alt=\"protocol_convert.png\">\n</p>\n</div>\n\n<p>\nxrdp和Guacamole和用户直接沟通使用的协议都只有一种，所以为了转化方便，中间层一般会更加贴近用户客户端使用的协议，所以xrdp的中间层设计得更贴近RDP协议，Guacamole的中间层则是Guacamole协议。这也是这两个软件代理复杂性的一大来源。RDP协议远远比Guacamole协议要复杂，所以xrdp的中间层的复杂程度远比Guacamole协议高得多。连带地xrdp代码理解的难度要比Guacamole高不少。尤其是涉及到中间层的部分。\n</p>\n</div>\n<div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> Guacamole的中间层</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n相比xrdp，Guacamole的中间层其实要简单得多，虽然Guacamole协议大量使用了HTML5的canvas编程的原语，但是对于图形的处理方式其实更加接近RFB协议的处理方式。这里简单介绍一下基本的概念，如果稍微用过PS，应该知道要完成一副图片，往往会先建立多个图层（layer），最后再组合成一幅图片。RFB和Guacamole绘制桌面的做法差不多就是基于这种思路，这样做的好处是很多时候对于图像的改变只会影响某几个图层，而其他图层不会受到影响，也就是说桌面的更新只需要改变几个图层的内容<sup><a id=\"fnr.1\" name=\"fnr.1\" class=\"footref\" href=\"#fn.1\">1</a></sup>。这种思路的延伸自然就是把桌面的组成元素进一步细分，在这方面接近极致的就是RDP协议。\n这个中间层大家可以想象成在堡垒机上有一个屏幕，这个屏幕会播放内容。而播放的内容会被转化称为RDP或者Guacamole协议发送给客户端。对于程序员来说，屏幕可以看成一块缓存。通过不断更新这块缓存就实现了屏幕画面的改变。对于用户来说，屏幕的变化相当于播放一帧一帧的画面。\n默认情况下帧的最短间隔时间设定40ms, 也就是最高帧速是25帧每秒。这个帧速是一般电视的帧速，所以多数时候不会觉得卡。实际画面的变化速度或者说频率要高于这个帧速能达到的效果，所以Guacamole会在内部积累这些变化，一次性转发给用户。在计算机资源和带宽足够的情况下，会觉得卡的情况是玩游戏的时候，25帧每秒并不能满足高端游戏的需求。\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> GUAC_VNC_FRAME_DURATION <span class=\"number\">40</span></span></span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\nguacenc只需根据其中时间戳和每帧来显示图像而已，\n这里帧简化了还多东西，一个帧里面有很多图层，实际方便起见统一叫帧了。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> xrdp的中间层</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\nxrdp只能和rdp客户端通信，也就是会把其他协议转换成RDP协议，所以中间层使用的是RDP协议的表示层。这个表示层除在图形的处理上和RFB协议的思路是差不多的，其他的东西和RFB差距很大。所以从RFB到RDP本身不好理解。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 共享会话</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n</div><div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> 共享会话</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\n之前提到的Guacamole的实时审计其实使用了共享会话的技术，严格来说在Guacamole中就是这么叫的。两个最重要的图形协议中中VNC默认就是支持共享会话的，所以如果是支持共享会话功能的话只要把rdp协议完成就可以了，当然可以的话纳入同一个框架中是最好的。\n当然事情其实有些复杂，以前给大家看过这个图：\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"guacamole和xrdp审计方案/xrdpproxy_linux.png\" alt=\"xrdpproxy_linux.png\">\n</p>\n</div>\n\n<p>\n   早期的xrdp默认会选用第三种路径，也就是借助VNC来构建桌面数据，但这样就意味着即便使用RDP的情况下，也可能构建共享的会话。当然不应该做这个假设, <b>因为到了Windows上一定不行</b> ，RDP代理还是要独立完成一套审计工具， <b>因为到了Windows上一定不行</b> 。\nyy   就协议来说，RDP协议并没有共享会话的内容，所以是否能共享会话取决于RDP底层的实现，显然Windows的底层实现没有考虑这个。\n   也就是说直接通过Guacamole登录一个同名的帐号来完成实时审计和历史记录的方案提前流产了。目前可以的做法是。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2\" class=\"outline-3\">\n<h3 id=\"sec-3-2\"><span class=\"section-number-3\">3.2</span> 共享会话和历史记录</h3>\n<div class=\"outline-text-3\" id=\"text-3-2\">\n<p>\n一旦实现了共享会话功能，就可以使用粗糙的方式支持历史记录功能。支持历史记录\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 开销</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\nGuacamole本身是内存消耗大户，对于CPU的压力其实还好，线程还是阻塞的时间比较多，压力比较大的是图片压缩的过程，这个对于xrdp也是同样，这个连接相对独立的应用，一般使用多线程比较不稳定。所以最终大概还是会使用进程模型。进程模型\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> freerdp绘图层接口</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n</div><div id=\"outline-container-sec-5-1\" class=\"outline-3\">\n<h3 id=\"sec-5-1\"><span class=\"section-number-3\">5.1</span> xrdp</h3>\n<div class=\"outline-text-3\" id=\"text-5-1\">\n<p>\n这里的显示中间是xrdp<sub>bitmap，最终的显示都是bitmap，其他的图像都在这之上显示。这个bitmap对象了可以表示很多图形对象，总共有九种：</sub>\n</p>\n<ul class=\"org-ul\">\n<li>bitmap\n</li>\n<li>window\n</li>\n<li>screen\n</li>\n<li>button\n</li>\n<li>image\n</li>\n<li>edit\n</li>\n<li>label\n</li>\n<li>combo\n</li>\n<li>special\n</li>\n</ul>\n<p>\n这东西直接看不是很好理解，所以要一步一步来，这些bitmap组成了结构xrdp<sub>bitmap，所以没有很多的恶对象可以做到类似于。下面先看一下xrdp</sub><sub>bitmap的定义：</sub>\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* window or bitmap */</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> xrdp_bitmap</span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"comment\">/* 0 = bitmap 1 = window 2 = screen 3 = button 4 = image 5 = edit</span><br><span class=\"line\">       6 = label 7 = combo 8 = special */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> type;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> width;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> height;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> xrdp_wm* wm;</span><br><span class=\"line\">    <span class=\"comment\">/* msg 1 = click 2 = mouse move 3 = paint 100 = modal result */</span></span><br><span class=\"line\">    <span class=\"comment\">/* see messages in constants.h */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*notify)(<span class=\"keyword\">struct</span> xrdp_bitmap* wnd, <span class=\"keyword\">struct</span> xrdp_bitmap* sender,</span><br><span class=\"line\">\t\t  <span class=\"keyword\">int</span> msg, <span class=\"keyword\">long</span> param1, <span class=\"keyword\">long</span> param2);</span><br><span class=\"line\">    <span class=\"comment\">/* for bitmap */</span></span><br><span class=\"line\">    <span class=\"comment\">// 每个像素的bit数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> bpp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> line_size; <span class=\"comment\">/* in bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> do_not_free_data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这是存放bitmap像素信息的地方，需要注意的是这是原始图片，没有图片格式一说</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>* data;</span><br><span class=\"line\">    <span class=\"comment\">/* for all but bitmap */</span></span><br><span class=\"line\">    <span class=\"comment\">// 应该是button的专用信息...</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pointer;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> bg_color;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tab_stop;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* caption1;</span><br><span class=\"line\">    <span class=\"comment\">/* for window or screen */</span></span><br><span class=\"line\">    <span class=\"comment\">//模式对话框</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> xrdp_bitmap* modal_dialog;</span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> xrdp_bitmap* focused_control;</span><br><span class=\"line\">    <span class=\"comment\">// 创建这个窗口的窗口</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> xrdp_bitmap* owner; <span class=\"comment\">/* window that created us */</span></span><br><span class=\"line\">    <span class=\"comment\">// 包含这个窗口的窗口</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> xrdp_bitmap* parent; <span class=\"comment\">/* window contained in */</span></span><br><span class=\"line\">    <span class=\"comment\">/* for modal dialog */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> xrdp_bitmap* default_button; <span class=\"comment\">/* button when enter is pressed */</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> xrdp_bitmap* esc_button; <span class=\"comment\">/* button when esc is pressed */</span></span><br><span class=\"line\">    <span class=\"comment\">/* list of child windows */</span></span><br><span class=\"line\">    <span class=\"comment\">// 像srceen就会有很多的子窗口</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"built_in\">list</span>* child_list;</span><br><span class=\"line\">    <span class=\"comment\">/* for edit */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> edit_pos;</span><br><span class=\"line\">    twchar password_char;</span><br><span class=\"line\">    <span class=\"comment\">/* for button or combo */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> state; <span class=\"comment\">/* for button 0 = normal 1 = down */</span></span><br><span class=\"line\">    <span class=\"comment\">/* for combo */</span></span><br><span class=\"line\">    <span class=\"comment\">// combo的选项</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"built_in\">list</span>* string_list;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"built_in\">list</span>* data_list;</span><br><span class=\"line\">    <span class=\"comment\">/* for combo or popup */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> item_index;</span><br><span class=\"line\">    <span class=\"comment\">/* for popup */</span></span><br><span class=\"line\">    <span class=\"comment\">// 到底由那个窗口弹出</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> xrdp_bitmap* popped_from;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> item_height;</span><br><span class=\"line\">    <span class=\"comment\">/* crc */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> crc32;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> crc16;</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n当bitmap是window或者screen的，screen一般来说只有一个，是最底层的图层。而window则会有多个，一般每个应用一个。\n可以看到除了数据以外，提供了一个接口notify，用于传输事件。窗口间进行沟通。传输事件。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-2\" class=\"outline-3\">\n<h3 id=\"sec-5-2\"><span class=\"section-number-3\">5.2</span> xrdp<sub>bitmap</sub><sub>create</sub></h3>\n<div class=\"outline-text-3\" id=\"text-5-2\">\n<p>\n一个bitmap是方块和vnc的triangle差不多。所以基础的属性是宽度、高度、bpp，类型。\n基本的流程是：\n</p>\n<ol class=\"org-ol\">\n<li>设置类型\n</li>\n</ol>\n</div>\n</div>\n<div id=\"outline-container-sec-5-3\" class=\"outline-3\">\n<h3 id=\"sec-5-3\"><span class=\"section-number-3\">5.3</span> xrdp<sub>process</sub></h3>\n<div class=\"outline-text-3\" id=\"text-5-3\">\n<p>\nprocess是每个进程或线程都会维护一个数据结构来完成，这个结构体不难，所以可以直接观察：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* rdp process */</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> xrdp_process</span><br><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> trans* server_trans; <span class=\"comment\">/* in tcp server mode */</span></span><br><span class=\"line\">  tbus self_term_event;</span><br><span class=\"line\">    <span class=\"comment\">// 难道还可以有不同的恶listener, 可能是为了后面扩展</span></span><br><span class=\"line\">  <span class=\"keyword\">struct</span> xrdp_listen* lis_layer; <span class=\"comment\">/* owner */</span></span><br><span class=\"line\">  <span class=\"keyword\">struct</span> xrdp_session* session;</span><br><span class=\"line\">  <span class=\"comment\">/* create these when up and running */</span></span><br><span class=\"line\">  <span class=\"keyword\">struct</span> xrdp_wm* wm; </span><br><span class=\"line\">  <span class=\"comment\">//int app_sck;</span></span><br><span class=\"line\">  tbus done_event;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> session_id;</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n可以看到每个process都有唯一一个xrdp<sub>wm，所以也是一个进程一个。那么问题就是如何利用资源，这里我们看看listener有什么资源可以给我们用。</sub>\n一个listener会用很多的，比方说参数会被存储在xrdp<sub>listen，同时会维护所有的process，毕竟都是由它来衍生的。listen算是最顶层的数据结构了。里面也包含这参数的信息。如何控制之后的建立连接也在这个对象的信息里。之所以是顶层的对象是因为之后对象的创建都会收到原本对象的影响。如收到连接后是建立线程还是进程。</sub>\nxrdp接口的设计上并不统一，调用了process<sub>run之后就会进入process的处理中去，之后会调用process</sub><sub>main</sub><sub>loop来完成。</sub>\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-4\" class=\"outline-3\">\n<h3 id=\"sec-5-4\"><span class=\"section-number-3\">5.4</span> xrdp<sub>wm</sub></h3>\n<div class=\"outline-text-3\" id=\"text-5-4\">\n<p>\n是一个process的关键资源，是我们的中间层，这个结构体对应我们看到的rdp窗口，可以看到有一个session，这个也也是process的，所以显得不是很优雅，可能最开始并没打算作为代理来使用吧。\nxrdp<sub>wm和session都是process的资源之一。</sub>\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-5\" class=\"outline-3\">\n<h3 id=\"sec-5-5\"><span class=\"section-number-3\">5.5</span> xrdp<sub>mm</sub></h3>\n<div class=\"outline-text-3\" id=\"text-5-5\">\n<p>\n这个结构是每个wm一个，用于和sesman连接，会保存一个mod<sub>handle来连接，会在xrdp</sub><sub>mm</sub><sub>connect的时候建立，</sub>\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-6\" class=\"outline-3\">\n<h3 id=\"sec-5-6\"><span class=\"section-number-3\">5.6</span> xrdp<sub>session</sub></h3>\n<div class=\"outline-text-3\" id=\"text-5-6\">\n<p>\nrdp层的处理对象，这个看定义就可以知道了：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> xrdp_session</span><br><span class=\"line\">{</span><br><span class=\"line\">    tintptr id;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> trans *trans;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*callback)(<span class=\"keyword\">intptr_t</span> id, <span class=\"keyword\">int</span> msg, <span class=\"keyword\">intptr_t</span> param1, <span class=\"keyword\">intptr_t</span> param2,</span><br><span class=\"line\">\t\t    <span class=\"keyword\">intptr_t</span> param3, <span class=\"keyword\">intptr_t</span> param4);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *rdp;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *orders;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> xrdp_client_info *client_info;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> up_and_running;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*is_term)(<span class=\"keyword\">void</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> in_process_data; <span class=\"comment\">/* inc / dec libxrdp_process_data calls */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> source_info si;</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n可以有，一开始建立的是和客户端的sessionn，需要注意的是client<sub>info，所以对象的问题。协议栈的交互是通过session来维护的。</sub>\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> <span class=\"todo TODO\">TODO</span> 中间层</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<p>\nlib<sub>framebuffer</sub><sub>update</sub>\nserver<sub>paint</sub><sub>rect</sub>(struct xrdp<sub>mod</sub>* mod, int x, int y, int cx, int cy,\nxrdp/xrdp.h:400:server<sub>paint</sub><sub>rect</sub><sub>bpp</sub>(struct xrdp<sub>mod</sub>* mod, int x, int y, int cx, int cy,\nxrdp/xrdp.h:410:server<sub>paint</sub><sub>rects</sub>(struct xrdp<sub>mod</sub>* mod, int num<sub>drects</sub>, short *drects,\nxrdp/xrdp.h:482:server<sub>paint</sub><sub>rect</sub><sub>os</sub>\nmod-&gt;painter各个模块是什么\nxrdp<sub>painter</sub><sub>copy的解析</sub>\n   remote applications integrated locally (RAIL),\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> <span class=\"todo TODO\">TODO</span> 问题</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<ul class=\"org-ul\">\n<li>Guacamole上传文件使用的是什么形式\n</li>\n<li>xrdp的资源利用体系\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> 用户态缓存</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<p>\nxrdp的用户态缓存是使用的freerdp的东西，叫stream。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9\" class=\"outline-2\">\n<h2 id=\"sec-9\"><span class=\"section-number-2\">9</span> 基础</h2>\n<div class=\"outline-text-2\" id=\"text-9\">\n</div><div id=\"outline-container-sec-9-1\" class=\"outline-3\">\n<h3 id=\"sec-9-1\"><span class=\"section-number-3\">9.1</span> modal dialog</h3>\n<div class=\"outline-text-3\" id=\"text-9-1\">\n<p>\n模态对话框，指的是用户想和其他的应用程序操作的时候需要先完成和它的交互，否则其他的用户无法得到信息。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9-2\" class=\"outline-3\">\n<h3 id=\"sec-9-2\"><span class=\"section-number-3\">9.2</span> comboBox</h3>\n<div class=\"outline-text-3\" id=\"text-9-2\">\n<p>\n下拉框\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9-3\" class=\"outline-3\">\n<h3 id=\"sec-9-3\"><span class=\"section-number-3\">9.3</span> popup</h3>\n<div class=\"outline-text-3\" id=\"text-9-3\">\n<p>\n弹窗\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9-4\" class=\"outline-3\">\n<h3 id=\"sec-9-4\"><span class=\"section-number-3\">9.4</span> Bpp</h3>\n<div class=\"outline-text-3\" id=\"text-9-4\">\n<p>\nByte per pixel\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9-5\" class=\"outline-3\">\n<h3 id=\"sec-9-5\"><span class=\"section-number-3\">9.5</span> stream</h3>\n<div class=\"outline-text-3\" id=\"text-9-5\">\n<p>\n有一个用户态的缓存，这个显然是因为到了rdp的应用层。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9-6\" class=\"outline-3\">\n<h3 id=\"sec-9-6\"><span class=\"section-number-3\">9.6</span> target<sub>surface</sub></h3>\n<div class=\"outline-text-3\" id=\"text-9-6\">\n<p>\nsurface应该类似于Guacamole的display\n</p>\n</div>\n</div>\n</div>\n<div id=\"footnotes\">\n<h2 class=\"footnotes\">Footnotes: </h2>\n<div id=\"text-footnotes\">\n\n<div class=\"footdef\"><sup><a id=\"fn.1\" name=\"fn.1\" class=\"footnum\" href=\"#fnr.1\">1</a></sup> <p>实际比这要复杂得多，这里这么将只是方便理解。</p></div>\n\n\n</div>\n</div>\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
