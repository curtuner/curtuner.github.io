{"md5":"46d3c05786e6adc25b63b5bbefd95565","content":"\n\n\n<div id=\"outline-container-orgaaec711\" class=\"outline-2\">\n<h2 id=\"orgaaec711\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\ncJSON在openwrt中使用，和前端交互时使用比较多。其基本的使用也很简单，数据结构也很简单。json每个对象都是一个名字\n</p>\n</div>\n</div>\n<div id=\"outline-container-org718bd0d\" class=\"outline-2\">\n<h2 id=\"org718bd0d\"><span class=\"section-number-2\">2</span> 解析</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-org429a60f\" class=\"outline-3\">\n<h3 id=\"org429a60f\"><span class=\"section-number-3\">2.1</span> 构建JSON数据结构cJSON</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n有两种方法，一种是parse字符串来得到，即：\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">cJSON* root = cJSON_Parse(my_json_string);</span><br></pre></td></tr></table></figure>\n</div>\n<p>\ncJSON的定义是：\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> cJSON {</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> cJSON *next,*prev;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> cJSON *child;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> type;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *valuestring;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> valueint; <span class=\"comment\">/* writing to valueint is DEPRECATED, please use cJSON_SetNumberValue instead */</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> valuedouble;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *<span class=\"built_in\">string</span>;</span><br><span class=\"line\">} cJSON;</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n可以看到cJSON其实是一棵N-tree\n数组的关键没有名称，只能用索引引用。对于cjson中的数组和对象起始数据结构上没有本质区别，只在与索引方式。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-orgc1c7859\" class=\"outline-3\">\n<h3 id=\"orgc1c7859\"><span class=\"section-number-3\">2.2</span> 查询数据结构的内容</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\n首先，要了解数据结构的内容，cJSON的每一项都是cJSON，没有树叶，所以值要从中获取，但是我们没法知道是否是树叶，所以要手动确认。得到子对象的方法是使用cJSON<sub>GetObjectItem</sub>，得到一个新的\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">cJSON_GetObjectItem(format, <span class=\"string\">\"frame rate\"</span>)</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n以功能而言是将指针指向的，双向链表便利一遍。其实一个object指的是一个链表，\n一个节点有三种语义：对象、数字、字符串。它们使用一个字段名来引用\n</p>\n</div>\n</div>\n<div id=\"outline-container-org7013661\" class=\"outline-3\">\n<h3 id=\"org7013661\"><span class=\"section-number-3\">2.3</span> 析构数据结构</h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n<p>\nc没有自动内存管理，所以要手动析构，使用函数cJSON<sub>Delete</sub>(root);\n</p>\n</div>\n</div>\n</div>\n\nLast Updated 2017-04-25 二 13:53.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.2.1 (<a href=\"http://orgmode.org\">Org</a> mode 9.0.5)\n"}
