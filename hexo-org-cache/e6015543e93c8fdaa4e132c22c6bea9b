{"md5":"8b1a670903d032261fbb48d6dd86081d","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 基本知识</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> TCP网络编程和事件</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\nTCP网络编程最本质上需要处理的三个半事件：\n</p>\n<ol class=\"org-ol\">\n<li>连接的建立，包括服务端接受（accept）新连接和客户端成功发起（connect）连接。TCP连接一旦建立，客户端和服务端时平等的，可以各自收发数据。\n</li>\n<li>连接断开，包括主动断开（close，shutdown）和被动断开(read返回0)。\n</li>\n<li>消息到达，文件描述符可读。这是最为重要的事件，对它的处理方式决定了网络编程的风格（阻塞还是非阻塞，如何处理分包，应用层的缓冲如何设计，等等）。\n</li>\n</ol>\n<p>\n3.5) 消息发送完毕，这算半个。对于低流量的服务，可以不必关心这个事件，另外，这里的“完毕发送”是指将数据写入操作系统的缓冲区，将由TCP负责数据的发送和重传，不代表对方已经收到数据。\n</p>\n\n<p>\n为什么连接被动断开时read返回0呢？因为TCP提供基于连接的可靠的数据流服务。所以read返回0代表数据流已经到头了。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> muduo网络库参考</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> 前言</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n编写服务器的一大问题是使用何种网络库，我的想法是先尝试实现一个网络库，了解一个网络库的实现。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> socket包装</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\n先看一下对于socket接口的包装。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 并发模型</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n</div><div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> 一次服务一个客户</h3>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 多线程模型实例</h2>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 最大并发连接数问题</h2>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> sshd处理的方式</h2>\n</div>\n\n\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> <span class=\"todo TODO\">TODO</span> 问题</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<ul class=\"org-ul\">\n<li><code>[&#xa0;]</code> xrdp代理的时候是如何处理代理的程序的\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<ul class=\"org-ul\">\n<li>《Linux多线程服务端编程》\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
