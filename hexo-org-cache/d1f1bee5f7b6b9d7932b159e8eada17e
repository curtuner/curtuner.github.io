{"md5":"b320242cf8118cb34e555121f67103b5","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n想留下痕迹而已。。。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> TL-WR703N</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n使用4M的flash\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 获取源码</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\nOpenWrt是一个用于嵌入式设备的Linux系统，可以使用opkg包管理系统拓展功能（另一个方法，是linux的驱动管理系统也提供类似的功能）\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/openwrt/openwrt.git</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> opkg 包管理系统</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n它和ubuntu的apt-get以及Arch的pacman是同等的存在，只是它并不能直接下载软件包，要自己写入合适的软件包。\n主要使用方法：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看帮助</span></span><br><span class=\"line\">opkg <span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 更新数据库</span></span><br><span class=\"line\">opkg update</span><br><span class=\"line\"><span class=\"comment\"># 列出已安装的包</span></span><br><span class=\"line\">opkg list-installed</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> <span class=\"todo TODO\">TODO</span> 源码基本结构概要</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n</div><div id=\"outline-container-sec-5-1\" class=\"outline-3\">\n<h3 id=\"sec-5-1\"><span class=\"section-number-3\">5.1</span> <span class=\"todo TODO\">TODO</span> 原始目录</h3>\n<div class=\"outline-text-3\" id=\"text-5-1\">\n<ul class=\"org-ul\">\n<li>target：不同平台在这个目录定义编译firmware和kernel的过程\n</li>\n<li>package：包含针对各个软件包的Makefile，各软件参照这个模板定义了自己的信息，如软件包的版本、下载地址、编译方式、安装地址等，要注意的一点是其中包含内核包，和用户包\n</li>\n<li>feeds：OpenWrt环境所需要的软件包套件，feed指一系列软件包，这些软件包是通过一个统一的接口地址访问的，脚本./scripts/feeds 可以看作软件包套件管理器\n</li>\n<li>include：openwrt的Makefile都在这里\n</li>\n<li>tools：编译时host需要的工具\n</li>\n<li>toolchian：包含一些命令去获取kernel headers, C library, bin-utils, compiler, debugger\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-5-2\" class=\"outline-3\">\n<h3 id=\"sec-5-2\"><span class=\"section-number-3\">5.2</span> <span class=\"todo TODO\">TODO</span> 编译时生成的目录（不确定linux*是否正确）</h3>\n<div class=\"outline-text-3\" id=\"text-5-2\">\n<ul class=\"org-ul\">\n<li>bin：编译完成后，firmware和ipk会放到此目录下\n</li>\n<li>dl：软件包下载后放在这个目录下\n</li>\n<li>script：一些Perl和Shell脚本\n</li>\n<li>build<sub>dir：解压所有的压缩文件，并在这个目录下编译。其内包含三个目录</sub>\n<ol class=\"org-ol\">\n<li>build<sub>dir</sub>/host：用于编译在你要host上运行的程序（有时需要特定的版本）\n</li>\n<li>build<sub>dir</sub>/linux*：用于编译内核的运行在内核态的软件包，新版的openwrt有将两种软件包分开了\n</li>\n<li>build<sub>dir</sub>/target*：用于编译各个软件包\n</li>\n<li>build<sub>dir</sub>/toolchain：用于编译交叉C编译器和C标准库\n</li>\n</ol>\n</li>\n<li>staging<sub>dir：在build</sub><sub>dir中编译的软件和工具链最终安装到这里，包含编译好的target工具链和主机的工具链，还有根文件系统</sub>\n<ol class=\"org-ol\">\n<li>staging<sub>dir</sub>/host：一个迷你的Linux根文件系统，可以认为之后的编译过程使用该根文件系统\n</li>\n<li>staging<sub>dir</sub>/toolchain*：也是一个mini的Linux根文件系统，包含交叉编译的工具链\n</li>\n<li>staging<sub>dir</sub>/target*：包含根文件系统staging<sub>dir</sub>/target/root*目录和生成包以及开发包的工具\nstaging<sub>dir</sub>/target/root* 用于生成ipk文件，\n</li>\n</ol>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-5-3\" class=\"outline-3\">\n<h3 id=\"sec-5-3\"><span class=\"section-number-3\">5.3</span> ar71xx</h3>\n<div class=\"outline-text-3\" id=\"text-5-3\">\n<p>\nAR71XX指从AR7130开始的一系列兼容CPU，包含AR7130 AR7141 AR7161 AR724X AR913X AR9331 AR934X QCA953X QCA955X QCA956X\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 常用接口</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">do_system</span><span class=\"params\">( <span class=\"keyword\">char</span> *command, <span class=\"keyword\">int</span> i_debug )</span></span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\n第一个参数是shell命令，当i<sub>debug非0时，将命令打印出来</sub>\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> 从源码编译固件</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<p>\n大体上，从源码的目录结构我们可以发现，编译可以分成三个阶段\n</p>\n<ol class=\"org-ol\">\n<li>编译host，构造一个mini主机，它带有相应版本的软件\n</li>\n<li>编译toolchain\n</li>\n<li>编译出目标根文件系统，并压缩成firmware\n</li>\n</ol>\n<p>\n以上其实也揭示了lfs编译的方式\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> 合成固件的方式</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<p>\n首先，核心的东西是内核，内核源码编译后得到相应的elf文件，可以用objcopy将不必要的信息出去，剩下代码和数据，在将该部分压缩，之后作为数据，在运行时解压。可以用一个elf文件包装，之后与其他文件链接得到vmlinux.elf\n编译内核完成，内核本身不是elf文件格式，\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9\" class=\"outline-2\">\n<h2 id=\"sec-9\"><span class=\"section-number-2\">9</span> 刷入OpenWrt</h2>\n<div class=\"outline-text-2\" id=\"text-9\">\n</div><div id=\"outline-container-sec-9-1\" class=\"outline-3\">\n<h3 id=\"sec-9-1\"><span class=\"section-number-3\">9.1</span> 建立TFTP服务器</h3>\n<div class=\"outline-text-3\" id=\"text-9-1\">\n<p>\nOpenWrt官网提供了编译好的WR703N固件，所以可以\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-10\" class=\"outline-2\">\n<h2 id=\"sec-10\"><span class=\"section-number-2\">10</span> 要点</h2>\n<div class=\"outline-text-2\" id=\"text-10\">\n<p>\n虽然编译内核源码后的文件是elf文件格式，实际用于启动的内核却不是，\nTARGET<sub>DIR</sub> 在staging目录中\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-11\" class=\"outline-2\">\n<h2 id=\"sec-11\"><span class=\"section-number-2\">11</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-11\">\n<ul class=\"org-ul\">\n<li><a href=\"http://www.dreamxu.com/compile-your-own-openwrt/\">编译自己的OpenWrt固件</a>\n</li>\n<li><a href=\"http://blog.csdn.net/clirus/article/details/50496958\"> openwrt源码框架解析</a>\n</li>\n<li><a href=\"https://linuxtoy.org/archives/howto-install-openwrt-on-tl-wr703n.html\">折腾：给 TL-WR703N 安装 OpenWrt</a>\n</li>\n<li><a href=\"https://gist.github.com/ninehills/2627163\">WR703N OpenWrt 配置流程</a>\n</li>\n<li><a href=\"https://wiki.openwrt.org/zh-cn/doc/techref/opkg\">OpenWrt opkg</a>\n</li>\n<li><a href=\"https://stackoverflow.com/questions/26030670/openwrt-buildroot-build-dir-and-staging-dir\">openwrt buildroot build<sub>dir</sub> and staging<sub>dir</sub></a>\n</li>\n<li><a href=\"https://wiki.openwrt.org/toh/tp-link/tl-wr703n\">tl-wr703n openwrt文档</a>\n</li>\n<li><a href=\"https://wiki.archlinux.org/index.php/TFTP\">Archlinux tftp文档</a>\n</li>\n<li><a href=\"http://www.openwrtdl.com/wordpress/openwrt%E7%94%9F%E6%88%90%E5%9B%BA%E4%BB%B6firmware%E6%B5%81%E7%A8%8B\">生成固件的流程</a>\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2017-06-26 一 22:58.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
