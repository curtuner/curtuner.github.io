{"md5":"8308761d659d7b4c7303338f99006661","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> bootloader</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> 概述</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n由于本文主要针对intel CPU来，所以\n计算机内存是挥发性的，即断电之后内存中的数据会丢失。所以要把操作系统内核保存到不挥发的介质中，如flash、磁盘等。所以引导系统的一大问题就是从不挥发介质中引导。操作系统通过引导扇区来提供自己的引导手段。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> 编写bootloader的原因</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\n计算机内存是挥发性的，即断电之后内存中的数据会丢失。所以要把操作系统内核保存到不挥发的介质中，如flash、磁盘等。所以引导系统的一大问题就是从不挥发介质中引导。操作系统通过引导扇区来提供自己的引导手段。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\"><span class=\"section-number-3\">1.3</span> 流程</h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n</div><div id=\"outline-container-sec-1-3-1\" class=\"outline-4\">\n<h4 id=\"sec-1-3-1\"><span class=\"section-number-4\">1.3.1</span> 硬件自检</h4>\n<div class=\"outline-text-4\" id=\"text-1-3-1\">\n<p>\n自检程序在RPROM中，叫BIOS。这是现在PC机的惯例。它的功能主要检测计算机是否满足运行的基本条件，并获取硬件信息，并加载MBR到内存中运行。要注意的是MBR中的程序其实是和操作系统相关的。之后操作系统会将引导扇区读入到基本内存中地址为0x7c00的位置。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-3-2\" class=\"outline-4\">\n<h4 id=\"sec-1-3-2\"><span class=\"section-number-4\">1.3.2</span> RPROM中的BIOS</h4>\n<div class=\"outline-text-4\" id=\"text-1-3-2\">\n<p>\n这是CPU最开始运行的程序，\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-1-4\" class=\"outline-3\">\n<h3 id=\"sec-1-4\"><span class=\"section-number-3\">1.4</span> 程序编写</h3>\n<div class=\"outline-text-3\" id=\"text-1-4\">\n</div><div id=\"outline-container-sec-1-4-1\" class=\"outline-4\">\n<h4 id=\"sec-1-4-1\"><span class=\"section-number-4\">1.4.1</span> bootloader</h4>\n<div class=\"outline-text-4\" id=\"text-1-4-1\">\n</div><ol class=\"org-ol\"><li><a id=\"sec-1-4-1-1\" name=\"sec-1-4-1-1\"></a>MBR<br><div class=\"outline-text-5\" id=\"text-1-4-1-1\">\n<p>\n编写一个操作系统要从MBR中的程序开始，它会被BIOS读入内存地址为0x7c00的位置。MBR先是只包含初始化寄存器和地址线的代码。之后调用内核初始化代码。\n然而这部分并不重要，这里为了方便直接使用xv6的代码即可。注意到gas支持宏定义。\n</p>\n</div>\n</li>\n<li><a id=\"sec-1-4-1-2\" name=\"sec-1-4-1-2\"></a>第一阶段<br><div class=\"outline-text-5\" id=\"text-1-4-1-2\">\n<p>\nCPU自身的初始化\n</p>\n</div>\n</li></ol>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 引导启动程序的编写</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n首先编写，存放在第一个扇区的程序,这里就是bootloader。在这之前要了解如何编译，\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 内存管理</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\nx86的内存管理机制有两种，一种是分段机制，一种是分页机制\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 关闭系统</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n系统调用提供了reboot()接口\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> <span class=\"todo TODO\">TODO</span> 思考</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<ul class=\"org-ul\">\n<li>bootloader并不是内核的一部分，我们要知道的是bootloader为内核构建了什么环境\n</li>\n<li>建立抽象包括，建立数据抽象和操作抽象\n</li>\n<li>实现的接口通用\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<ul class=\"org-ul\">\n<li>ld文档\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
