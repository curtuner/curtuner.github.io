{"md5":"7afdb7c15f030e33a32ce788d2fa107d","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 工程建立</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ qmake -project</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n它会自动分析源码和其他信息建立工程，产生“目录名.pro\"文件\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 程序编写</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> 要点</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<ul class=\"org-ul\">\n<li>Application类的对象是每一各Qt应用必须创建的对象（除了控制台的应用）\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> 居中显示</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Window win;</span><br><span class=\"line\">win.setWindowTitle(<span class=\"string\">\"hehe\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">auto</span> screenGeo = QApplication::desktop()-&gt;screenGeometry();</span><br><span class=\"line\">win.move((screenGeo.width() - win.width()) / <span class=\"number\">2</span>,</span><br><span class=\"line\">      (screenGeo.height() - win.height()) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">win.show();</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 布局管理</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\n直观来说布局管理就是管理控件的尺寸和位置。Qt中QWidget和QLayout是独立的类但往往又是不可分离使用的。Qt提供了两种布局方法：\n</p>\n<ul class=\"org-ul\">\n<li>手动布局\n</li>\n<li>布局管理器\n</li>\n<li>new一个布局管理器时，如果没有参数就意味者要将它加入到另一个布局管理器\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> Qt中的布局管理方式</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<ul class=\"org-ul\">\n<li>绝对定位：调用QWidget::setGeometry()，对控件进行绝对定位\n</li>\n<li>手工定位：在resizeEvent等函数中调用，根据参数编写代码对空间进行定位\n</li>\n<li>使用布局管理器：如使用QLayout管理控件\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2\" class=\"outline-3\">\n<h3 id=\"sec-3-2\"><span class=\"section-number-3\">3.2</span> 常用的布局管理的类</h3>\n<div class=\"outline-text-3\" id=\"text-3-2\">\n</div><div id=\"outline-container-sec-3-2-1\" class=\"outline-4\">\n<h4 id=\"sec-3-2-1\"><span class=\"section-number-4\">3.2.1</span> QVBoxLayout</h4>\n<div class=\"outline-text-4\" id=\"text-3-2-1\">\n<p>\n垂直的布局管理器\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2-2\" class=\"outline-4\">\n<h4 id=\"sec-3-2-2\"><span class=\"section-number-4\">3.2.2</span> QHBoxLayout</h4>\n<div class=\"outline-text-4\" id=\"text-3-2-2\">\n<p>\n水平的布局管理器\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2-3\" class=\"outline-4\">\n<h4 id=\"sec-3-2-3\"><span class=\"section-number-4\">3.2.3</span> QFormLayout</h4>\n<div class=\"outline-text-4\" id=\"text-3-2-3\">\n<p>\n表格，用于填写数据\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2-4\" class=\"outline-4\">\n<h4 id=\"sec-3-2-4\"><span class=\"section-number-4\">3.2.4</span> QGridLayout</h4>\n<div class=\"outline-text-4\" id=\"text-3-2-4\">\n<p>\n比较通用的布局管理器\n</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 元对象系统</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n</div><div id=\"outline-container-sec-4-1\" class=\"outline-3\">\n<h3 id=\"sec-4-1\"><span class=\"section-number-3\">4.1</span> 目的</h3>\n<div class=\"outline-text-3\" id=\"text-4-1\">\n<p>\n统一实现对象间的通信\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4-2\" class=\"outline-3\">\n<h3 id=\"sec-4-2\"><span class=\"section-number-3\">4.2</span> 三个基础</h3>\n<div class=\"outline-text-3\" id=\"text-4-2\">\n<ol class=\"org-ol\">\n<li>QObject: 为所有需要元对象系统的对象提供基类\n</li>\n<li>QOBJECT: 通常声明在类的私有段中，让该类可以使用元对象的特性，比如动态属性，信号和槽\n</li>\n<li>编译器：为每个QObject子对象自动生成必要的代码来实现元对象的特性\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 重要类和重要继承关系的理解</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n</div><div id=\"outline-container-sec-5-1\" class=\"outline-3\">\n<h3 id=\"sec-5-1\"><span class=\"section-number-3\">5.1</span> QObject</h3>\n<div class=\"outline-text-3\" id=\"text-5-1\">\n<p>\nQObject所有Qt类的基类。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-2\" class=\"outline-3\">\n<h3 id=\"sec-5-2\"><span class=\"section-number-3\">5.2</span> QWidget</h3>\n<div class=\"outline-text-3\" id=\"text-5-2\">\n<p>\nQWidget是在Qt中建立用户接口的最基本元素。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-3\" class=\"outline-3\">\n<h3 id=\"sec-5-3\"><span class=\"section-number-3\">5.3</span> QAction</h3>\n<div class=\"outline-text-3\" id=\"text-5-3\">\n<ul class=\"org-ul\">\n<li>提供可以插入到QWidget一个抽象接口\n</li>\n<li>每个QMenu都至少有一个QAction\n</li>\n<li>主要用于菜单栏和工具栏的组件，在菜单栏上显示为文本。\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-5-4\" class=\"outline-3\">\n<h3 id=\"sec-5-4\"><span class=\"section-number-3\">5.4</span> QPainter和QPaintDevice</h3>\n<div class=\"outline-text-3\" id=\"text-5-4\">\n<p>\n两者都是最基本的类，应该和属于utility的部分，是基本控件的非必要部分\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 事件驱动</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<p>\n一般的Gui的用户输入的频率较低，使用轮询效率比较低下。而且可能比较难于处理。事件驱动可以有中心的程序将事件派送给需要的部分。我的理解是在这种情况下Gui和内核一样就是一个被动等待唤醒的程序。只不过与操作系统相比Qt没有硬件的帮助，所以要自己设置环境一个不断等待时间的程序，这里应该使用了轮询才对。Application类的对象的exec()方法就是启动这个轮询环境的接口。\n一个对象可能产生的signal事先可以有定义，\nconnect() 连接了signal和一个slot\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> 数据结构</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n</div><div id=\"outline-container-sec-7-1\" class=\"outline-3\">\n<h3 id=\"sec-7-1\"><span class=\"section-number-3\">7.1</span> QString及其子类QConstString</h3>\n<div class=\"outline-text-3\" id=\"text-7-1\">\n</div><div id=\"outline-container-sec-7-1-1\" class=\"outline-4\">\n<h4 id=\"sec-7-1-1\"><span class=\"section-number-4\">7.1.1</span> 功能</h4>\n<div class=\"outline-text-4\" id=\"text-7-1-1\">\n<p>\n提供了Unicode字符串，内部由2-bytes的QChar组成。原生的string不能使用了，一个框架往往会提供自己的数据结构，这点要习惯。为此可能需要了解相互之间转化的方法。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-7-1-2\" class=\"outline-4\">\n<h4 id=\"sec-7-1-2\"><span class=\"section-number-4\">7.1.2</span> 接口和资源管理</h4>\n</div>\n</div>\n\n<div id=\"outline-container-sec-7-2\" class=\"outline-3\">\n<h3 id=\"sec-7-2\"><span class=\"section-number-3\">7.2</span> QList及其子类QQueue, QStringList</h3>\n</div>\n<div id=\"outline-container-sec-7-3\" class=\"outline-3\">\n<h3 id=\"sec-7-3\"><span class=\"section-number-3\">7.3</span> QVector及其子类QStack</h3>\n</div>\n<div id=\"outline-container-sec-7-4\" class=\"outline-3\">\n<h3 id=\"sec-7-4\"><span class=\"section-number-3\">7.4</span> QHash及其QMultiHash</h3>\n</div>\n<div id=\"outline-container-sec-7-5\" class=\"outline-3\">\n<h3 id=\"sec-7-5\"><span class=\"section-number-3\">7.5</span> QMap及其QMultiMap</h3>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> Utility</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n</div><div id=\"outline-container-sec-8-1\" class=\"outline-3\">\n<h3 id=\"sec-8-1\"><span class=\"section-number-3\">8.1</span> QDate, QTime, QDateTime</h3>\n</div>\n<div id=\"outline-container-sec-8-2\" class=\"outline-3\">\n<h3 id=\"sec-8-2\"><span class=\"section-number-3\">8.2</span> QFile, QDir, QFileInfo（提供了平台独立的方法）</h3>\n</div>\n<div id=\"outline-container-sec-8-3\" class=\"outline-3\">\n<h3 id=\"sec-8-3\"><span class=\"section-number-3\">8.3</span> 内置图标</h3>\n<div class=\"outline-text-3\" id=\"text-8-3\">\n<p>\n所以Qt还是提供了图标来使用的，在QStyle::standIcon中\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-9\" class=\"outline-2\">\n<h2 id=\"sec-9\"><span class=\"section-number-2\">9</span> 零散</h2>\n<div class=\"outline-text-2\" id=\"text-9\">\n<ul class=\"org-ul\">\n<li>signal也是函数\n</li>\n<li>qApp是一个指向application object的全局指针，定义在QApplication头文件中\n</li>\n<li>声明slot时private slots来表明之后是slot函数，其中slot是空宏，所以private slots的含义和private相同，只是可读性上升了而已\n</li>\n<li>元对象似乎要放在单独的文件中所以需要使用，一般编译器生成相应的代码\n</li>\n<li>QT的多继承还是比较保守的, 基本语义多是implements\n</li>\n<li>在没有设置布局时的默认地点是在左上角开始\n</li>\n<li>没有设置spacing的情况下, 使用的是默认值\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-10\" class=\"outline-2\">\n<h2 id=\"sec-10\"><span class=\"section-number-2\">10</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-10\">\n<ul class=\"org-ul\">\n<li><a href=\"http://zetcode.com/gui/qt5/\">http://zetcode.com/gui/qt5/</a>\n</li>\n<li><a href=\"http://blog.csdn.net/colorant/article/details/5367376\">http://blog.csdn.net/colorant/article/details/5367376</a>\n</li>\n<li>Qt官方文档\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
