{"md5":"576baec4f0b9daa62d7cdb07f899c270","content":"\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> <span class=\"todo TODO\">TODO</span> 某个数据结构的源码剖析</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> 概念</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n实际数据结构只是最终的实现，而且往往不是最终是实现。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> <span class=\"todo TODO\">TODO</span> 理解结构体的定义</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\n关注点是，我们使用了程序的设施实现了哪些抽象，构建了哪些概念，以及如何构造这些概念。\n一个结构体是一个什么样的结构体呢？从简单的结构体开始：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> One {</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n这算是最简单的结构体了，单纯只有数据聚合的作用。数学一点讲，这起到笛卡尔积的作用。其结果和构成二元组一样。当然这只是常见的场景，其实x字段和y字段并不一定是没有任何关系的。比如x可以是y的两倍，虽然乍看之下没有太大意义，但这确实是常见的现象，有时不同的字段相关性很强，有时只是为了避免重复计算（如hash值字段）。\nC语言中对于没有指针的结构体，我认为是\n一个结构体是否依赖外部定义，是这个结构体的基本问题？\n一个结构体什么时候会达成概念的完全？\n达成概念的完全是否意味着初始化的达成？\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 结构的创建（抽象的达成）</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n之前我以为这是一个需要放到抽象里的内容，但是现在的想法有所变化，抽象的达成过程不应该提前引入抽象。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 结构的各个操作</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\n如果是关联的数据结构如hash表，树等就需要有查询(搜索)的能力。之后就是基础的能力，完成一个抽象之后需要有的能力，读取对象的能力（如输出对象所有元素的值），修改对象状态的能力，如果有结构属性就还有映射对象的能力（一般是增加元素或者删除元素）\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 隐藏的局部实现（如某些优化）</h2>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 进行数据结构的hack</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<p>\n目标的话我认为是先建立感性认知吧，毕竟读完代码后其实逻辑上没问题，遇到问题也知道去哪里寻找问题，但是反应却很慢。这是没有建立起感性认知的锅。所以我的想法是先跟踪对象的建立和在所有操作下的行为并打印出来，以此来建立感性认知。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 自己实现</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<p>\n如果要自己实现，最好要有所限制，一定要抽取最本质的概念，实现最简单的部分，尽量不要去考虑优化问题。一般情况下我们要跟踪对象，达成所有函数的调用。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> 资源池（为了提供素材）</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> <span class=\"todo TODO\">TODO</span> 问题</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<ul class=\"org-ul\">\n<li><code>[&#xa0;]</code> Python对于对象的分类对于数据结构定义的启发有多大\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-9\" class=\"outline-2\">\n<h2 id=\"sec-9\"><span class=\"section-number-2\">9</span> 思考</h2>\n<div class=\"outline-text-2\" id=\"text-9\">\n<ul class=\"org-ul\">\n<li></li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
