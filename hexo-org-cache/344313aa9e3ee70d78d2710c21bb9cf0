{"md5":"57859137861263961bd30e3279111bb1","content":"\n\n\n<div id=\"outline-container-orgfa84fc7\" class=\"outline-2\">\n<h2 id=\"orgfa84fc7\"><span class=\"section-number-2\">1</span> 概述</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nPython的一大特点是各种概念十分简单而灵活。Python中一切皆对象，即使类型也是对象。所以有编程经验的人学习Python可以先理解其对象的构造。\n</p>\n</div>\n</div>\n<div id=\"outline-container-org343eec6\" class=\"outline-2\">\n<h2 id=\"org343eec6\"><span class=\"section-number-2\">2</span> Python对象</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\nPython解释器先编译源码后生成了pyc文件，之后在启动虚拟机后加载pyc文件。\n</p>\n</div>\n<div id=\"outline-container-orgde8adf6\" class=\"outline-3\">\n<h3 id=\"orgde8adf6\"><span class=\"section-number-3\">2.1</span> 生成器对象</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n带有yield的函数可以\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgbff0f21\" class=\"outline-3\">\n<h3 id=\"orgbff0f21\"><span class=\"section-number-3\">2.2</span> 作用域和命名空间</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\nPython中作用域往往没有明确的制定，我们可以制定一个符号的作用域。除了global作用域以外（或者global其实最终也被加入到某个函数之内？），总是关联到某个函数。按字面意义就是某个符号绑定有效的区域。\n相对而言，命名空间是显式指定的，要在名称前加前缀\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgc772dd3\" class=\"outline-3\">\n<h3 id=\"orgc772dd3\"><span class=\"section-number-3\">2.3</span> 内存布局</h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n<p>\n默认情况下，Python对象的开头是一个用于引用计数的指针，之后是只是对象类型的Type。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org5b98ea8\" class=\"outline-2\">\n<h2 id=\"org5b98ea8\"><span class=\"section-number-2\">3</span> 符号绑定</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n</div><div id=\"outline-container-org8592ad5\" class=\"outline-3\">\n<h3 id=\"org8592ad5\"><span class=\"section-number-3\">3.1</span> 概述</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\n简单地说，Python使用符号来绑定对象来复用对象。虽然Python的绑定方式语法不止一种，但实际上都是一样的。类似import、def等都是可以看作是绑定对象和符号的语法糖。可以理解为对于某些类型的对象是可以有特殊的绑定方式以便于阅读（？）。\n跟C++比较不同，个人感觉Python的对于内在一致性还是比较重视的，如Python3把print关键字都去掉了。是可以有特殊的绑定方式以便于阅读（？）。\n跟C++比较不同，个人感觉Python的对于内在一致性还是比较重视的，如Python3把print关键字都去掉了。\n跟Java不同，Python其实不存在C语言概念上的值，一切皆对象，表达式求值其实得到的是对象。C语言中的值是指的变量表示的内存块的状态，而Python的值指的反而倾向指某个对象，所以C语言的赋值指的是改变变量状态。\nC++对象系统的一个设计目标是是对象的表现得像基本数据类型一样，Python没有基本数据类型，所以对象系统整体要简单得多。\nPython终归是过程式语言，所以还是必须有改变状态的操作，对象占用实际的内存，所以改变对象的状态的能力还是需要的。函数\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgcc552df\" class=\"outline-2\">\n<h2 id=\"orgcc552df\"><span class=\"section-number-2\">4</span> Python的编译流程</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n</div><div id=\"outline-container-org4af7b6d\" class=\"outline-3\">\n<h3 id=\"org4af7b6d\"><span class=\"section-number-3\">4.1</span> 虚拟机</h3>\n<div class=\"outline-text-3\" id=\"text-4-1\">\n<p>\nPython的虚拟机相比Java的更加抽象，也就是说离真实的机器更远。这也意味着我们能优化的粒度不大。Python的虚拟机主要在于模拟cpu运行程序的过程。它运行的是PyCodeObject包含了程序的字节码指令和静态信息。\n</p>\n</div>\n</div>\n<div id=\"outline-container-org224c46e\" class=\"outline-3\">\n<h3 id=\"org224c46e\"><span class=\"section-number-3\">4.2</span> 编译器</h3>\n<div class=\"outline-text-3\" id=\"text-4-2\">\n<p>\n虚拟机运行的代码是用一个PycodeObject来表示的，相关的信息存储在该对象中。作用域本身在代码中是隐含的概念，但在编译后其实是一个实在的概念，它会对应一个PyCodeObject。\nPyCodeObject，\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgf4d01f0\" class=\"outline-2\">\n<h2 id=\"orgf4d01f0\"><span class=\"section-number-2\">5</span> Python对数据结构和算法的支持</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n</div><div id=\"outline-container-orge016b7e\" class=\"outline-3\">\n<h3 id=\"orge016b7e\"><span class=\"section-number-3\">5.1</span> 前言</h3>\n<div class=\"outline-text-3\" id=\"text-5-1\">\n<p>\n一般而言数据结构最为重要的依然是读写和映射机制。\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgb13a4f0\" class=\"outline-3\">\n<h3 id=\"orgb13a4f0\"><span class=\"section-number-3\">5.2</span> 可迭代对象</h3>\n</div>\n</div>\n\n<div id=\"outline-container-org7e24c72\" class=\"outline-2\">\n<h2 id=\"org7e24c72\"><span class=\"section-number-2\">6</span> 实用知识</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n</div><div id=\"outline-container-org1e582dd\" class=\"outline-3\">\n<h3 id=\"org1e582dd\"><span class=\"section-number-3\">6.1</span> <span class=\"todo TODO\">TODO</span> 将数据结构读取到文件中</h3>\n</div>\n<div id=\"outline-container-org73b1243\" class=\"outline-3\">\n<h3 id=\"org73b1243\"><span class=\"section-number-3\">6.2</span> 如何提供引用计数功能</h3>\n<div class=\"outline-text-3\" id=\"text-6-2\">\n<p>\n首先Python中使用到的对象每个在内存中的第一个位置就是引用计数的整数内存，目前是64位的整数。编程时要手动使用增加和减少引用计数来维护。由于比较常用，所以可以使用宏或者inline函数来减少开销。\n引用计数的增加和减少，需要注意的是指针为NULL的情况\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">    (((PyObject*)(op))-&amp;gt;(ob_refcnt++))          \\</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> Py_DECREF(op)\\</span><br><span class=\"line\">    do {             \\</span><br><span class=\"line\">        PyObject* _py_decref_tmp = (pyObject*)(op);\\</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--(_py_decref_tmp) == <span class=\"number\">0</span>) {             \\</span><br><span class=\"line\">            _Py_Dealloc(_py_decref_tmp);           \\</span><br><span class=\"line\">        }                                          \\</span><br><span class=\"line\">    } while(<span class=\"number\">0</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> Py_XINCREF(o)                           <span class=\"number\">1</span>       \\</span><br><span class=\"line\">    do {                                                \\</span><br><span class=\"line\">        PyObject* _py_xincref_tmp = (PyObject*)o;       \\</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_py_xincref_tmp) {                          \\</span><br><span class=\"line\">                                                        \\</span><br><span class=\"line\">        }                                               \\</span><br><span class=\"line\">    } while (<span class=\"number\">0</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-org2da7bc7\" class=\"outline-2\">\n<h2 id=\"org2da7bc7\"><span class=\"section-number-2\">7</span> 零散</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<ul class=\"org-ul\">\n<li>复制语句有不同的解释</li>\n<li>名称解析到哪个作用域是函数定义的时候就决定了</li>\n<li>赋值的说法其实是是C语言的概念，虽然多数时候可以套用，但是如果不把好其中的区别，很容易会出错。</li>\n<li>表达式有多种，一个共同的特点是只有一个返回值。返回一个列表也算是只有返回值，这个和Python的解构绑定可以达到返回多个值的效果。</li>\n<li>函数也是对象</li>\n<li>符号在哪个作用域解析是静态决定的，而符号解析到值的过程实在运行时决定的。</li>\n<li>一切皆对象可以让内存被统一管理，而对象的类型择提供了如何使用的信息，包括管理。所以类型对象是虚拟机基础的部件。另一方面，这也说明不同类型直接的差别可以非常巨大。</li>\n<li>要注意C和Python的隔离，不要把概念混淆</li>\n<li>Python源码的实现有很多看起来对于学习编译原理没有用的东西，但要有耐心，这是工业级的代码</li>\n<li>突然对于C语言有了新的想法，其实全局的内容（表现是拥有全局的符号）构成了一个程序的基础结构。而其他局部的数据则构成了各个局部对象的内容</li>\n<li>对于static即使取得了外部地址，也会引起段错误。虽然实在运行时发现的错误，不过也可以说明这是没有漏洞的。</li>\n<li>一切皆对象的另一个作用是统一了内存管理的形式，虚拟机的构建也是基于该结构的</li>\n<li>栈帧是执行环境的一种实现，Python使用PyFrameObject来实现，Python倾向用链表实现栈</li>\n<li>静态数据</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-org36e2f92\" class=\"outline-2\">\n<h2 id=\"org36e2f92\"><span class=\"section-number-2\">8</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<ul class=\"org-ul\">\n<li></li>\n</ul>\n</div>\n</div>\n\nLast Updated 2017-08-16 三 20:59.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.2.1 (<a href=\"http://orgmode.org\">Org</a> mode 9.0.8)\n"}
