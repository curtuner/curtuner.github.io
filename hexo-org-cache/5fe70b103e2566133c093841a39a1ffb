{"md5":"54d23ceb89745d3bb9eafe545b1e607d","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 基本知识</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> <span class=\"todo TODO\">TODO</span> 概述</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n在讲内核之前，首先要分清操作系统和内核之间的关系。一般的操作系统教科书所讲的操作系统往往指的是内核，与我们正常所认为的操作系统不同。为了避免混淆，我使用一般点的概念，即认为操作系统包括内核以及提供基础服务的系统组件，而内核就是操作系统的核心模块。如何理解内核？在我看来Tanenbaum的解读方式最好，内核提供两种服务：一种是作为资源管理器，一种是提供一个虚拟机。前者面向系统软件程序员（如驱动和内核开发），后者面向应用软件程序员。我认为最重要的还是提供了一个虚拟机降低了编程的复杂度这一方面，虽然系统软件领域还还是必不可少，但大展拳脚的机会相对比较少。所以看待对于一般的程序员如果不是特别感兴趣，只要自顶向下来看待内核即可。实际上，很多Java程序员也只需要对Java虚拟机有足够理解即可。这也是虚拟机存在的意义，让我们不必了解太多不必要的细节。尽管如此，我们学习操作系统，大部分时间还是要花在内核的资源管理上，否则也就没必要学习内核知识了。\n对于一般程序员而已，虚拟机和物理机没有本质的区别。我统一把它们看作虚拟机，那么内核的实现就是在虚拟机上构建另一个虚拟机的过程。这里再引入一个概念，体系结构，由接口规范和接口操纵的资源的逻辑行为来描述。而虚拟机提供一个体系结构。这样我们的目标就变成了在一个体系结构上实现另一个“等价的”体系结构。对于内核而言，一般是在指令集体系结构（ISA）上实现。所以编写内核的模块时最先要理解的是ISA提供相应的接口机器操纵资源的逻辑。\n内核主要的模块包括内存管理、进程、文件系统。。。\n操作系统的设计和提供的服务，计算机世界的一大矛盾是人们日益增长的性能需要和不足的硬件资源之间的矛盾。为了让计算机资源不被某些程序浪费同时可以被多人共享。操作系统有必要把程序的概念抽象出来，达到能够操控程序运行的目的。进程不是一个一开始就有的概念。照这个逻辑\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> 一个可用操作系统包括什么</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\n内核的关键在于提供一个进程级别的虚拟机，我们使用的用户级ISA其实表达能力已经足够构建一个抽象层了。这是我们编写内核时容易忽略的点。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\"><span class=\"section-number-3\">1.3</span> 内核模块</h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n<p>\n可在运行时加入到内核中的代码称为“模块（module）”\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-4\" class=\"outline-3\">\n<h3 id=\"sec-1-4\"><span class=\"section-number-3\">1.4</span> 网络模块的应用层诊断工具</h3>\n<div class=\"outline-text-3\" id=\"text-1-4\">\n<ul class=\"org-ul\">\n<li>iputil\n</li>\n<li>net-tools：目前已经不用了\n</li>\n<li>iproute2：取代了net-tools\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-1-5\" class=\"outline-3\">\n<h3 id=\"sec-1-5\"><span class=\"section-number-3\">1.5</span> 内核接口</h3>\n</div>\n\n<div id=\"outline-container-sec-1-6\" class=\"outline-3\">\n<h3 id=\"sec-1-6\"><span class=\"section-number-3\">1.6</span> Linux设备的分类</h3>\n<div class=\"outline-text-3\" id=\"text-1-6\">\n</div><div id=\"outline-container-sec-1-6-1\" class=\"outline-4\">\n<h4 id=\"sec-1-6-1\"><span class=\"section-number-4\">1.6.1</span> 字符设备</h4>\n<div class=\"outline-text-4\" id=\"text-1-6-1\">\n<p>\n能够像字节流（类似文件）一样被访问的设备。字符设备和文件的不同在于大多字符设备只能顺序访问数据通道\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-6-2\" class=\"outline-4\">\n<h4 id=\"sec-1-6-2\"><span class=\"section-number-4\">1.6.2</span> 块设备</h4>\n<div class=\"outline-text-4\" id=\"text-1-6-2\">\n<p>\n每次只能传输一个或多个完整的块\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-6-3\" class=\"outline-4\">\n<h4 id=\"sec-1-6-3\"><span class=\"section-number-4\">1.6.3</span> 网络接口</h4>\n<div class=\"outline-text-4\" id=\"text-1-6-3\">\n<p>\n一个能够和其他主机交换数据的设备，负责接受和发送数据包。在文件系统没有对应的节点\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-1-7\" class=\"outline-3\">\n<h3 id=\"sec-1-7\"><span class=\"section-number-3\">1.7</span> 内核空间和用户空间的接口</h3>\n<div class=\"outline-text-3\" id=\"text-1-7\">\n<p>\n除了系统调用提供的接口，还可以通过虚拟文件系统和netlink套接口。sysctl和procfs，虚拟文件系统用于读写属于操作系统内核的数据\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-8\" class=\"outline-3\">\n<h3 id=\"sec-1-8\"><span class=\"section-number-3\">1.8</span> 内核基本结构</h3>\n<div class=\"outline-text-3\" id=\"text-1-8\">\n<p>\n对于程序员，对硬件的操作是用ISA来描述的，为了安全和效率考虑，需要在之上建立一个虚拟机，内核是虚拟机组成的一部分。计算机的资源大体分成几类：\n</p>\n<ol class=\"org-ol\">\n<li>存储资源，包括寄存器，RAM\n</li>\n<li>计算资源\n</li>\n<li>其他的硬件\n</li>\n</ol>\n<p>\n内核本质是一个虚拟机，用于包装对于底层硬件的操作\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 内核编译和安装</h2>\n</div>\n\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> <span class=\"todo TODO\">TODO</span> 源码阅读</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n</div><div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> 源码编译</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\n在源码目录的顶层，执行以下指令：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">make menuconfig</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n目的是生成.config命令，配置时有三种选择：\n</p>\n<ul class=\"org-ul\">\n<li>Y：将功能编译进内核\n</li>\n<li>N：不将功能编译进内核\n</li>\n<li>M：将该功能编译成可以在需要时动态插入到内核中的模块\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2\" class=\"outline-3\">\n<h3 id=\"sec-3-2\"><span class=\"section-number-3\">3.2</span> <span class=\"todo TODO\">TODO</span> 目录结构</h3>\n<div class=\"outline-text-3\" id=\"text-3-2\">\n<ul class=\"org-ul\">\n<li>arch：同openwrt的target目录类似，包含所有的体系结构相关的代码，一般PC机使用的是arch/x86目录下的代码，它支持x86和x86<sub>64</sub>\n</li>\n<li>mm：包含与体系结构无关的内存管理代码，与体系结构相关的内存管理代码位于arch/*/mm中\n</li>\n<li>ipc：核心进程间通信的代码\n</li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-sec-3-3\" class=\"outline-3\">\n<h3 id=\"sec-3-3\"><span class=\"section-number-3\">3.3</span> 协议栈</h3>\n<div class=\"outline-text-3\" id=\"text-3-3\">\n</div><div id=\"outline-container-sec-3-3-1\" class=\"outline-4\">\n<h4 id=\"sec-3-3-1\"><span class=\"section-number-4\">3.3.1</span> 套接口缓存</h4>\n<div class=\"outline-text-4\" id=\"text-3-3-1\">\n<p>\n协议栈的用户接口是socket接口，网络模块最重要的数据结构是sk<sub>buff，在TCP</sub>/IP协议栈中被二到四层的协议使用，其中的某些数据成员会在层次传递过程中变化。尽量少操作内存，是这个设计结构体的要求。\n</p>\n</div>\n<ol class=\"org-ol\"><li><a id=\"sec-3-3-1-1\" name=\"sec-3-3-1-1\"></a>sk<sub>buff结构体的理解</sub><br><div class=\"outline-text-5\" id=\"text-3-3-1-1\">\n<p>\n先去\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** </span><br><span class=\"line\"> *       struct sk_buff - socket buffer</span><br><span class=\"line\"> *       @next: Next buffer in list</span><br><span class=\"line\"> *       @prev: Previous buffer in list</span><br><span class=\"line\"> *       @tstamp: Time we arrived/left</span><br><span class=\"line\"> *       @rbnode: RB tree node, alternative to next/prev for netem/tcp</span><br><span class=\"line\"> *       @sk: Socket we are owned by</span><br><span class=\"line\"> *       @dev: Device we arrived on/are leaving by</span><br><span class=\"line\"> *       @cb: Control buffer. Free for use by every layer. Put private vars here</span><br><span class=\"line\"> *       @_skb_refdst: destination entry (with norefcount bit)</span><br><span class=\"line\"> *       @sp: the security path, used for xfrm</span><br><span class=\"line\"> *       @len: Length of actual data</span><br><span class=\"line\"> *       @data_len: Data length</span><br><span class=\"line\"> *       @mac_len: Length of link layer header</span><br><span class=\"line\"> *       @hdr_len: writable header length of cloned skb</span><br><span class=\"line\"> *       @csum: Checksum (must include start/offset pair)</span><br><span class=\"line\"> *       @csum_start: Offset from skb-&gt;head where checksumming should start</span><br><span class=\"line\"> *       @csum_offset: Offset from csum_start where checksum should be stored</span><br><span class=\"line\"> *       @priority: Packet queueing priority</span><br><span class=\"line\"> *       @ignore_df: allow local fragmentation</span><br><span class=\"line\"> *       @cloned: Head may be cloned (check refcnt to be sure)</span><br><span class=\"line\"> *       @ip_summed: Driver fed us an IP checksum</span><br><span class=\"line\"> *       @nohdr: Payload reference only, must not modify header</span><br><span class=\"line\"> *       @pkt_type: Packet class</span><br><span class=\"line\"> *       @fclone: skbuff clone status</span><br><span class=\"line\"> *       @ipvs_property: skbuff is owned by ipvs</span><br><span class=\"line\"> *       @tc_skip_classify: do not classify packet. set by IFB device</span><br><span class=\"line\"> *       @tc_at_ingress: used within tc_classify to distinguish in/egress</span><br><span class=\"line\"> *       @tc_redirected: packet was redirected by a tc action</span><br><span class=\"line\"> *       @tc_from_ingress: if tc_redirected, tc_at_ingress at time of redirect</span><br><span class=\"line\"> *       @peeked: this packet has been seen already, so stats have been</span><br><span class=\"line\"> *               done for it, don't do them again</span><br><span class=\"line\"> *       @nf_trace: netfilter packet trace flag</span><br><span class=\"line\"> *       @protocol: Packet protocol from driver</span><br><span class=\"line\"> *       @destructor: Destruct function</span><br><span class=\"line\"> *       @_nfct: Associated connection, if any (with nfctinfo bits)</span><br><span class=\"line\"> *       @nf_bridge: Saved data about a bridged frame - see br_netfilter.c</span><br><span class=\"line\"> *       @skb_iif: ifindex of device we arrived on</span><br><span class=\"line\"> *       @tc_index: Traffic control index</span><br><span class=\"line\"> *       @hash: the packet hash</span><br><span class=\"line\"> *       @queue_mapping: Queue mapping for multiqueue devices</span><br><span class=\"line\"> *       @xmit_more: More SKBs are pending for this queue</span><br><span class=\"line\"> *       @ndisc_nodetype: router type (from link layer)</span><br><span class=\"line\"> *       @ooo_okay: allow the mapping of a socket to a queue to be changed</span><br><span class=\"line\"> *       @l4_hash: indicate hash is a canonical 4-tuple hash over transport</span><br><span class=\"line\"> *               ports.</span><br><span class=\"line\"> *       @sw_hash: indicates hash was computed in software stack</span><br><span class=\"line\"> *       @wifi_acked_valid: wifi_acked was set</span><br><span class=\"line\"> *       @wifi_acked: whether frame was acked on wifi or not</span><br><span class=\"line\"> *       @no_fcs:  Request NIC to treat last 4 bytes as Ethernet FCS</span><br><span class=\"line\"> *       @dst_pending_confirm: need to confirm neighbour</span><br><span class=\"line\">  *      @napi_id: id of the NAPI struct this skb came from</span><br><span class=\"line\"> *       @secmark: security marking</span><br><span class=\"line\"> *       @mark: Generic packet mark</span><br><span class=\"line\"> *       @vlan_proto: vlan encapsulation protocol</span><br><span class=\"line\"> *       @vlan_tci: vlan tag control information</span><br><span class=\"line\"> *       @inner_protocol: Protocol (encapsulation)</span><br><span class=\"line\"> *       @inner_transport_header: Inner transport layer header (encapsulation)</span><br><span class=\"line\"> *       @inner_network_header: Network layer header (encapsulation)</span><br><span class=\"line\"> *       @inner_mac_header: Link layer header (encapsulation)</span><br><span class=\"line\"> *       @transport_header: Transport layer header</span><br><span class=\"line\"> *       @network_header: Network layer header</span><br><span class=\"line\"> *       @mac_header: Link layer header</span><br><span class=\"line\"> *       @tail: Tail pointer</span><br><span class=\"line\"> *       @end: End pointer</span><br><span class=\"line\"> *       @head: Head of buffer</span><br><span class=\"line\"> *       @data: Data head pointer</span><br><span class=\"line\"> *       @truesize: Buffer size</span><br><span class=\"line\"> *       @users: User count - see {datagram,tcp}.c</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> sk_buff {</span><br><span class=\"line\">\t<span class=\"keyword\">union</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">struct</span> {</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* These two members must be first. */</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">struct</span> sk_buff           *next;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">struct</span> sk_buff           *prev;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">union</span> {</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">ktime_t</span>          tstamp;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">struct</span> skb_mstamp skb_mstamp;</span><br><span class=\"line\">\t\t\t};</span><br><span class=\"line\">\t\t};</span><br><span class=\"line\">\t\t<span class=\"keyword\">struct</span> rb_node   rbnode; <span class=\"comment\">/* used in netem &amp; tcp stack */</span></span><br><span class=\"line\">\t};</span><br><span class=\"line\">\t<span class=\"comment\">// host的传输控制块，当skb只在二层和三层转发时，值为NULL</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> sock              *sk;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">union</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">struct</span> net_device        *dev;</span><br><span class=\"line\">\t\t<span class=\"comment\">/* Some protocols might use this space to store information,</span><br><span class=\"line\">\t\t * while device pointer would be NULL.</span><br><span class=\"line\">\t\t * UDP receive path is one user.</span><br><span class=\"line\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>            dev_scratch;</span><br><span class=\"line\">\t};</span><br><span class=\"line\">\t<span class=\"comment\">/*</span><br><span class=\"line\">\t * This is the control buffer. It is free to use for every</span><br><span class=\"line\">\t * layer. Please put your private variables there. If you</span><br><span class=\"line\">\t * want to keep them across layers you have to do a skb_clone()</span><br><span class=\"line\">\t * first. This is owned by whoever has the skb queued ATM.</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span>                     cb[<span class=\"number\">48</span>] __aligned(<span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>            _skb_refdst;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span>                     (*destructor)(<span class=\"keyword\">struct</span> sk_buff *skb);</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">ifdef</span> CONFIG_XFRM</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span>   sec_path        *sp;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">if</span> defined(CONFIG_NF_CONNTRACK) || defined(CONFIG_NF_CONNTRACK_MODULE)</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>             _nfct;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">if</span> IS_ENABLED(CONFIG_BRIDGE_NETFILTER)</span></span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> nf_bridge_info    *nf_bridge;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>             len,<span class=\"comment\">// 数据部分长度</span></span><br><span class=\"line\">\t\t\t\tdata_len;</span><br><span class=\"line\">\t__u16                    mac_len, <span class=\"comment\">// 二层首部长度</span></span><br><span class=\"line\">\t\t\t\thdr_len;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Following fields are _not_ copied in __copy_skb_header()</span><br><span class=\"line\">\t * Note that queue_mapping is here mostly to fill a hole.</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\tkmemcheck_bitfield_begin(flags1);</span><br><span class=\"line\">\t__u16                    queue_mapping;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* if you move cloned around you also must adapt those constants */</span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">ifdef</span> __BIG_ENDIAN_BITFIELD</span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> CLONED_MASK      (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">7</span>)</span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> CLONED_MASK      <span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> CLONED_OFFSET()          offsetof(struct sk_buff, __cloned_offset)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t__u8                     __cloned_offset[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t__u8                     cloned:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\tnohdr:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\tfclone:<span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\tpeeked:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\thead_frag:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\txmit_more:<span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\t__unused:<span class=\"number\">1</span>; <span class=\"comment\">/* one bit hole */</span></span><br><span class=\"line\">\tkmemcheck_bitfield_end(flags1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* fields enclosed in headers_start/headers_end are copied</span><br><span class=\"line\">\t * using a single memcpy() in __copy_skb_header()</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"comment\">/* private: */</span></span><br><span class=\"line\">\t__u32                    headers_start[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"comment\">/* public: */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* if you move pkt_type around you also must adapt those constants */</span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">ifdef</span> __BIG_ENDIAN_BITFIELD</span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> PKT_TYPE_MAX     (<span class=\"number\">7</span> &lt;&lt; <span class=\"number\">5</span>)</span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> PKT_TYPE_MAX     <span class=\"number\">7</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">define</span> PKT_TYPE_OFFSET()        offsetof(struct sk_buff, __pkt_type_offset)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t__u8                     __pkt_type_offset[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t__u8                     pkt_type:<span class=\"number\">3</span>;</span><br><span class=\"line\">\t__u8                     pfmemalloc:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     ignore_df:<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__u8                     nf_trace:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     ip_summed:<span class=\"number\">2</span>;</span><br><span class=\"line\">\t__u8                     ooo_okay:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     l4_hash:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     sw_hash:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     wifi_acked_valid:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     wifi_acked:<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__u8                     no_fcs:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">/* Indicates the inner headers are valid in the skbuff. */</span></span><br><span class=\"line\">\t__u8                     encapsulation:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     encap_hdr_csum:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     csum_valid:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     csum_complete_sw:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     csum_level:<span class=\"number\">2</span>;</span><br><span class=\"line\">\t__u8                     csum_bad:<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__u8                     dst_pending_confirm:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">ifdef</span> CONFIG_IPV6_NDISC_NODETYPE</span></span><br><span class=\"line\">\t__u8                     ndisc_nodetype:<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\t__u8                     ipvs_property:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     inner_protocol_type:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     remcsum_offload:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">ifdef</span> CONFIG_NET_SWITCHDEV</span></span><br><span class=\"line\">\t__u8                     offload_fwd_mark:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">ifdef</span> CONFIG_NET_CLS_ACT</span></span><br><span class=\"line\">\t__u8                     tc_skip_classify:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     tc_at_ingress:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     tc_redirected:<span class=\"number\">1</span>;</span><br><span class=\"line\">\t__u8                     tc_from_ingress:<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">ifdef</span> CONFIG_NET_SCHED</span></span><br><span class=\"line\">\t__u16                    tc_index;       <span class=\"comment\">/* traffic control index */</span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">union</span> {</span><br><span class=\"line\">\t\t__wsum           csum;</span><br><span class=\"line\">\t\t<span class=\"keyword\">struct</span> {</span><br><span class=\"line\">\t\t\t__u16    csum_start;</span><br><span class=\"line\">\t\t\t__u16    csum_offset;</span><br><span class=\"line\">\t\t};</span><br><span class=\"line\">\t};</span><br><span class=\"line\">\t__u32                    priority;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>                      skb_iif;</span><br><span class=\"line\">\t__u32                    hash;</span><br><span class=\"line\">\t__be16                   vlan_proto;</span><br><span class=\"line\">\t__u16                    vlan_tci;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">if</span> defined(CONFIG_NET_RX_BUSY_POLL) || defined(CONFIG_XPS)</span></span><br><span class=\"line\">\t<span class=\"keyword\">union</span> {</span><br><span class=\"line\">\t\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>     napi_id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>     sender_cpu;</span><br><span class=\"line\">\t};</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">ifdef</span> CONFIG_NETWORK_SECMARK</span></span><br><span class=\"line\">\t__u32            secmark;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">union</span> {</span><br><span class=\"line\">\t\t__u32            mark;</span><br><span class=\"line\">\t\t__u32            reserved_tailroom;</span><br><span class=\"line\">\t};</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">union</span> {</span><br><span class=\"line\">\t\t__be16           inner_protocol;</span><br><span class=\"line\">\t\t__u8             inner_ipproto;</span><br><span class=\"line\">\t};</span><br><span class=\"line\"></span><br><span class=\"line\">\t__u16                    inner_transport_header;</span><br><span class=\"line\">\t__u16                    inner_network_header;</span><br><span class=\"line\">\t__u16                    inner_mac_header;</span><br><span class=\"line\"></span><br><span class=\"line\">\t__be16                   protocol;</span><br><span class=\"line\">\t__u16                    transport_header;</span><br><span class=\"line\">\t__u16                    network_header;</span><br><span class=\"line\">\t__u16                    mac_header;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* private: */</span></span><br><span class=\"line\">\t__u32                    headers_end[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"comment\">/* public: */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* These elements must be at the end, see alloc_skb() for details.  */</span></span><br><span class=\"line\">\t<span class=\"keyword\">sk_buff_data_t</span>           tail;</span><br><span class=\"line\">\t<span class=\"keyword\">sk_buff_data_t</span>           end;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>            *head,</span><br><span class=\"line\">\t\t\t\t*data;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>             truesize;</span><br><span class=\"line\">\t<span class=\"keyword\">atomic_t</span>         users; <span class=\"comment\">// 引用计数</span></span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</li></ol>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 进程</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n进程描述符是 <code>task_struct</code> 类型的结构，轻量级进程之所以不叫线程，是因为它和其他进程一样都占用一个进程描述符。也就是task<sub>struct占用独立的内存，所以内容等价性所以是否属于同一个进程要看task</sub><sub>struct的内容，而不是看内存地址。所以需要一个进程标识，task</sub><sub>stuct的pid字段已经是Linu进程的标识了。相对的，为了支持线程的概念，又增加了tgid字段表示出轻量级进程的所属线程组。一般我们使用getpid</sub>() 的时候返回的是进程的tgpid，当然这个没有什么问题。\n进程描述符现在是存在内核栈中，位置取决于如何分配内核栈\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 内存管理</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n</div><div id=\"outline-container-sec-5-1\" class=\"outline-3\">\n<h3 id=\"sec-5-1\"><span class=\"section-number-3\">5.1</span> 分页机制</h3>\n<div class=\"outline-text-3\" id=\"text-5-1\">\n<p>\n分页机制负责把32位的线性地址翻译成一般我们把页面的大小一般为4K，它负责把\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 文件系统</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n</div><div id=\"outline-container-sec-6-1\" class=\"outline-3\">\n<h3 id=\"sec-6-1\"><span class=\"section-number-3\">6.1</span> 概述</h3>\n<div class=\"outline-text-3\" id=\"text-6-1\">\n<p>\n文件一般是指磁盘文件，而在Linux中认为凡是能产出和消耗信息的都是文件（可读可写）。类似Socket可以发送和接收信息这点来看把Socket看作文件是合理的。而文件系统的意思在不同语境下不同，这里指的是操作系统中用于管理文件和对文件进行操作的机制及其实现。\nLinux的文件系统最早使用的是minix的文件系统，之后经过不断改进形成了Ext2文件系统\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> 虚拟文件系统</h2>\n</div>\n\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> 轻量级进程</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<p>\nLWP是一种实现多线程的方法，在Linux中指的是与其他进程共享地址空间和系统资源的进程，它是作为进程被调度的。它的私有资源一般要包括最小执行上下文和进程调度所需要的统计信息。说白了一个线程只需要执行和调度信息即可。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9\" class=\"outline-2\">\n<h2 id=\"sec-9\"><span class=\"section-number-2\">9</span> 系统调用的跟踪</h2>\n</div>\n\n<div id=\"outline-container-sec-10\" class=\"outline-2\">\n<h2 id=\"sec-10\"><span class=\"section-number-2\">10</span> 内核提供的数据结构</h2>\n<div class=\"outline-text-2\" id=\"text-10\">\n<p>\n先确定状态，之后的状态转移，除非有哪些动作是特别要求，可以方便用户，否则改变状态的动作以结构为主，那种切换能保证操作高效就用哪些，否则应该考虑换结构。\n</p>\n</div>\n<div id=\"outline-container-sec-10-1\" class=\"outline-3\">\n<h3 id=\"sec-10-1\"><span class=\"section-number-3\">10.1</span> 双向链表</h3>\n<div class=\"outline-text-3\" id=\"text-10-1\">\n<ul class=\"org-ul\">\n<li>初始化宏(状态生成)：LIST<sub>HEAD</sub>(list<sub>name</sub>)\n</li>\n<li>list<sub>add</sub><sub>tail</sub>(n, h)：添加\n</li>\n<li>list<sub>add</sub>(n, p)：将n指向的元素插入p指向的元素之\n</li>\n<li>list<sub>del</sub>(p)：删除p指向的元素\n</li>\n<li>list<sub>empty</sub>(h):确定吃否是空链表\n</li>\n<li></li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-11\" class=\"outline-2\">\n<h2 id=\"sec-11\"><span class=\"section-number-2\">11</span> 思考</h2>\n<div class=\"outline-text-2\" id=\"text-11\">\n<ul class=\"org-ul\">\n<li>抽象分为局部抽象和大局抽象，命名空间的问题确实巨大，有接口是否爆漏的问题。\n</li>\n<li>为什么使用指针呢？很多时候是为了动态绑定增加灵活性。\n</li>\n<li>驱动的符号不应是全局的，这样会污染命名空间。\n</li>\n<li>在大的程序中，尤其是内核对于符号空间的控制要比较注意。内核还是留下了不少符号的\n</li>\n<li>为什么会有僵死进程呢？我们需要进程终止的信息，但是处理必须依托一个执行流，Linux的执行流依托域进程，所以必须有进程主动处理。\n</li>\n<li>从用户态切换到内核态之后进程的栈是空的，另外内核栈的空间很小只有7KB多一点。\n</li>\n<li>我们重视讨论多态，其实宏是否使用宏来实现有时并不必要。本来C语言的类型检查就很弱了。\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-12\" class=\"outline-2\">\n<h2 id=\"sec-12\"><span class=\"section-number-2\">12</span> <span class=\"todo TODO\">TODO</span> 问题 <code>[0%]</code></h2>\n<div class=\"outline-text-2\" id=\"text-12\">\n<ul class=\"org-ul\">\n<li><code>[&#xa0;]</code> Linux 4.0管理进程集合的方式已经不是进程链表了，那么是什么呢？\n</li>\n<li><code>[&#xa0;]</code> 用宏来作为内部实现是否可行\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-13\" class=\"outline-2\">\n<h2 id=\"sec-13\"><span class=\"section-number-2\">13</span> FAQ</h2>\n<div class=\"outline-text-2\" id=\"text-13\">\n</div><div id=\"outline-container-sec-13-1\" class=\"outline-3\">\n<h3 id=\"sec-13-1\"><span class=\"section-number-3\">13.1</span> 文件系统节点是什么？</h3>\n<div class=\"outline-text-3\" id=\"text-13-1\">\n<p>\n文件系统可以表示成一棵树，一般内部节点是目录，叶节点是文件\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-13-2\" class=\"outline-3\">\n<h3 id=\"sec-13-2\"><span class=\"section-number-3\">13.2</span> .ko文件是什么类型的文件？</h3>\n<div class=\"outline-text-3\" id=\"text-13-2\">\n<p>\n是Linux内核模块文件，一般是驱动程序\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-13-3\" class=\"outline-3\">\n<h3 id=\"sec-13-3\"><span class=\"section-number-3\">13.3</span> 接口和设备的关系？</h3>\n<div class=\"outline-text-3\" id=\"text-13-3\">\n<p>\n接口一般都有独立的接口芯片，所以接口设备就是接口\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-13-4\" class=\"outline-3\">\n<h3 id=\"sec-13-4\"><span class=\"section-number-3\">13.4</span> 什么是系统调用？</h3>\n<div class=\"outline-text-3\" id=\"text-13-4\">\n<p>\n指运行在用户态的程序向操作系统内核要求需要更高权限的服务\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-13-5\" class=\"outline-3\">\n<h3 id=\"sec-13-5\"><span class=\"section-number-3\">13.5</span> 文件系统和内核的关系？</h3>\n<div class=\"outline-text-3\" id=\"text-13-5\">\n<p>\nLinux内核实现了虚拟文件系统（VFS），VFS可以看作一个抽象层，所以特定的文件系统如ext4、ntfs和btrfs等都是可以看作VFS接口的某个具体实现。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-13-6\" class=\"outline-3\">\n<h3 id=\"sec-13-6\"><span class=\"section-number-3\">13.6</span> 一个模块涉及什么？</h3>\n<div class=\"outline-text-3\" id=\"text-13-6\">\n<p>\n一个模块其实是一个抽象层，一开始我们要考虑的是模块的抽象对象，抽象对象就是什么呢？一般的抽象有自底向上，自顶向下也有，两种的使用范围不同。一般自顶向下是建模的技巧\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-13-7\" class=\"outline-3\">\n<h3 id=\"sec-13-7\"><span class=\"section-number-3\">13.7</span> 内核什么时候处于被动阶段？</h3>\n<div class=\"outline-text-3\" id=\"text-13-7\">\n<p>\n开始运行用户程序之后，\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-13-8\" class=\"outline-3\">\n<h3 id=\"sec-13-8\"><span class=\"section-number-3\">13.8</span> 有集中陷入内核的机制和方式？</h3>\n</div>\n<div id=\"outline-container-sec-13-9\" class=\"outline-3\">\n<h3 id=\"sec-13-9\"><span class=\"section-number-3\">13.9</span> 主设备号和次设备号</h3>\n</div>\n<div id=\"outline-container-sec-13-10\" class=\"outline-3\">\n<h3 id=\"sec-13-10\"><span class=\"section-number-3\">13.10</span> 编写内核的难点在哪里？</h3>\n<div class=\"outline-text-3\" id=\"text-13-10\">\n<p>\n内核为内核提供了完整的内核的机制。真正的困难在于理解设备并最大化其性能。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-14\" class=\"outline-2\">\n<h2 id=\"sec-14\"><span class=\"section-number-2\">14</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-14\">\n<ul class=\"org-ul\">\n<li>《Linux内核源码情景分析》\n</li>\n<li>《程序设计语言&#x2013;实践之路》\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2017-11-06 一 17:21.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
