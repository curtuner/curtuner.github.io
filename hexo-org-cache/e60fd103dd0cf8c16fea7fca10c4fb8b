{"md5":"068a6bce2be884490c393ed2af8efbd9","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n使用多道程序设计的有点，可以将一个大型的应用程序系统的复杂性降低，通过小型的简单的进程相互协作构建一个大型系统。这点对于熟悉函数式编程的人来说不奇怪，躲过使用小函数构建大函数来实现功能是被证明可行的。早期的程序涉及倾向域设计一个复杂的单进程程序。多道程序设计在Linux下受到推崇。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> IPC机制的发展</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> 早期的Unix的IPC机制</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n早期的Unix提供了管道、信号（软中断）和跟踪（Trace），然而它们都只能在有关系的父子进程之间通信。为了实现在没有关系的进程间的通信，又增加了命名管道。命名管道通过在文件系统中建立一个FIFO文件来实现共享，说白了就是建立的贡献资源\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> System V IPC</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\nAT&amp;T为了更好支持商业应用中的事务处理又增加了3中IPC机制，报文、共享内存和信号量机制\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-3\" class=\"outline-3\">\n<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> BSD Unix对IPC机制的扩充：Socket</h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n<p>\n可以看作对于命名管道的进一步扩充，使其适用于不同计算机的进程间的通信。相比其他，Socket其实是最通用的IPC手段。现在的Unix系统中的管道机制改成了使用Socket来实现。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-4\" class=\"outline-3\">\n<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> POSIX标准</h3>\n<div class=\"outline-text-3\" id=\"text-2-4\">\n<p>\n如今IPC机制已经是POSIX标准的一部分了。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 实例</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n</div><div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> 存储映射I/O</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\nlinux mmap可以将一个给定文件映射到存储区：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">mmap</span><span class=\"params\">(<span class=\"keyword\">void</span>* addr, size_t len, )</span></span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 信号量</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n</div><div id=\"outline-container-sec-4-1\" class=\"outline-3\">\n<h3 id=\"sec-4-1\"><span class=\"section-number-3\">4.1</span> 概述</h3>\n<div class=\"outline-text-3\" id=\"text-4-1\">\n<p>\n一般讲到信号量，默认时进程间通信的信号量。也叫有名信号量。线程使用无名信号量来通信。因为线程Linux。线程也可以使用有名信号量，线程也可以使用有名信号量，但是使用复杂\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4-2\" class=\"outline-3\">\n<h3 id=\"sec-4-2\"><span class=\"section-number-3\">4.2</span> 基本操作</h3>\n<div class=\"outline-text-3\" id=\"text-4-2\">\n<ol class=\"org-ol\">\n<li>测试控制该资源的信号量\n</li>\n<li>若此资源为正，则进程可以使用该资源。这种情况下，进城会将信号量减1，表示使用一个资源单位。\n</li>\n<li>否则，若此信号量的值为0,则进程进入休眠状态，直至信号量值大于0，。进程被唤醒后进入步骤1\n</li>\n</ol>\n</div>\n</div>\n<div id=\"outline-container-sec-4-3\" class=\"outline-3\">\n<h3 id=\"sec-4-3\"><span class=\"section-number-3\">4.3</span> 接口</h3>\n<div class=\"outline-text-3\" id=\"text-4-3\">\n<p>\n信号量的值代表资源单位，如果取值只有0或者1，则其实和互斥量差不多，获取资源的接口包括：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sem_wait()</span><br><span class=\"line\">sem_trywait()</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n一个阻塞版本，一个非阻塞版本。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 思考</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<ul class=\"org-ul\">\n<li>进程的无副作用性，保持是否重要呢？\n</li>\n<li>文件系统其实管理着系统大部分的资源，虽然有些特殊的文件系统\n</li>\n<li>网络接口也是一种资源，共享的是资源的话对进程的依赖也不会太严重\n</li>\n<li>Linux本身喜欢把资源当作文件来管理\n</li>\n<li>进程间的通信\nclosed \n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<ul class=\"org-ul\">\n<li>《Linux内核源码情景分析》\n</li>\n<li>《Unix环境高级编程》\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
