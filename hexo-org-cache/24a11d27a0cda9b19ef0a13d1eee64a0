{"md5":"4e6ffa34cd85ea04a04fe7e80123452b","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 多核</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> 引言</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n我们目前使用的多核处理器结构是SMP（对称多处理器结构，所以），即每个CPU都是对等的，共享内存和设备。进程调度要考虑多核时，一个必须的要求是多个核必须同步进程队列，进程必须有多个CPU\n由于有多个CPU，所以必须要能管理它们，为此，第一步就要抽象出CPU的定义。CPU的抽象，这里我们需要知道CPU有哪些状态。通过改变CPU状态来改变CPU的内容。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> CPU控制</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\n改变进程\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 程序的启动</h2>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 进程的调度</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n</div><div id=\"outline-container-sec-4-1\" class=\"outline-3\">\n<h3 id=\"sec-4-1\"><span class=\"section-number-3\">4.1</span> 进程的抽象</h3>\n</div>\n\n<div id=\"outline-container-sec-4-2\" class=\"outline-3\">\n<h3 id=\"sec-4-2\"><span class=\"section-number-3\">4.2</span> 第一个进程的启动</h3>\n</div>\n<div id=\"outline-container-sec-4-3\" class=\"outline-3\">\n<h3 id=\"sec-4-3\"><span class=\"section-number-3\">4.3</span> 程序的加载</h3>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 锁</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n</div><div id=\"outline-container-sec-5-1\" class=\"outline-3\">\n<h3 id=\"sec-5-1\"><span class=\"section-number-3\">5.1</span> 自旋锁（spinlock）</h3>\n<div class=\"outline-text-3\" id=\"text-5-1\">\n</div><div id=\"outline-container-sec-5-1-1\" class=\"outline-4\">\n<h4 id=\"sec-5-1-1\"><span class=\"section-number-4\">5.1.1</span> 概要</h4>\n<div class=\"outline-text-4\" id=\"text-5-1-1\">\n<p>\n锁其实是一个对所有进程可见的的一块内存，进程通过检查它的状态来决定是否运行。所以其实只要一个寄存器大小的内存就够了。锁也能用于CPU间的同步\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-1-2\" class=\"outline-4\">\n<h4 id=\"sec-5-1-2\"><span class=\"section-number-4\">5.1.2</span> 实现</h4>\n<div class=\"outline-text-4\" id=\"text-5-1-2\">\n<p>\n这里的锁用于同步多个CPU所以必须考虑CPU，也就必须抽象CPU\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> ext2</h2>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> 零散</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<ul class=\"org-ul\">\n<li>系统调用的一个重要的点是，即使没有得到想要的效果，也可以继续运行。\n</li>\n<li>操作系统是一个由中断驱动的程序\n</li>\n<li>最基础的调度是时钟中断引起的\n</li>\n<li>作用于内存一般不需要\n</li>\n<li>同应用编程不同，系统编程一般是自底向上的，专注于对已有资源的抽象，对于体系结构的理解是十分必要的。CPU、内存和IO设备之间的相关行是不大的并没有什么共用部分，仅仅存在通信而已，本身是不同的整体。\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
