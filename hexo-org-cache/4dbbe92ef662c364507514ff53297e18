{"md5":"81ad9e2edda0c44451b5302dbc36ccd5","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nOpenGL是一套专业的图形接口，也可以把它当作一套图形库。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> OpenGL概念介绍</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\nOpenGL中，我们操作的图形对象统一在三维空间中，而最终显示窗口都是二维的像素。OpenGL大部分工作都是把3D坐标转化成屏幕的二维像素，这个过程是在OpenGL的图形渲染管线管理的。图形渲染管线主要包括两个部分：\n</p>\n<ol class=\"org-ol\">\n<li>把3D坐标转化为2D坐标\n</li>\n<li>把2D坐标转化为有颜色的像素<sup><a id=\"fnr.1\" name=\"fnr.1\" class=\"footref\" href=\"#fn.1\">1</a></sup>\n</li>\n</ol>\n\n<p>\n渲染管线有多个阶段，每个阶段会把前一个阶段的输出作为输入。这个阶段是可以并行的，多数显卡有大量的小处理核心，它们在每个阶段上运行各自的小程序，从而在图形渲染管线中快速处理你的数据，这些小程序叫做着色器(Shader)。\n</p>\n\n<p>\n某些着色器可以是用户配置的，OpenGL使用GLSL（OpenGL Shading Language）来编写语言。\n</p>\n</div>\n<div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> 顶点着色器</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n顶点着色器，主要是把一种3D坐标转化成另一种3D坐标，如图形的旋转，移动等都是在顶点着色器中完成的。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> 对象</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\n使用对象有一个好处\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-3\" class=\"outline-3\">\n<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> 渲染管线（pipeline）</h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n<p>\n接下来可以看到渲染管线的示意图：\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"./OpenGL入门/pipeline.png\" alt=\"pipeline.png\">\n</p>\n</div>\n\n<p>\n以上蓝色的部分是我们需要编写的部分\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-4\" class=\"outline-3\">\n<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> 顶点输入</h3>\n<div class=\"outline-text-3\" id=\"text-2-4\">\n<p>\n首先，我们要知道输入pipeline的顶点如何表示。OpenGL的顶点是在所谓的标准化设备坐标范围内表示的\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-5\" class=\"outline-3\">\n<h3 id=\"sec-2-5\"><span class=\"section-number-3\">2.5</span> 编译着色器</h3>\n<div class=\"outline-text-3\" id=\"text-2-5\">\n<p>\n着色器是在运行时动态编译的，\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-6\" class=\"outline-3\">\n<h3 id=\"sec-2-6\"><span class=\"section-number-3\">2.6</span> 一个绘制三角的简单程序</h3>\n<div class=\"outline-text-3\" id=\"text-2-6\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;glad/glad.h&gt;</span></span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow *window)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// settings</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> SCR_WIDTH = <span class=\"number\">800</span>; <span class=\"comment\">// 窗口的宽度</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> SCR_HEIGHT = <span class=\"number\">600</span>; <span class=\"comment\">// 窗口的高度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *vertexShaderSource = <span class=\"string\">\"#version 330 core\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"layout (location = 0) in vec3 aPos;\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"void main()\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"{\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"}\\0\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *fragmentShaderSource = <span class=\"string\">\"#version 330 core\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"out vec4 FragColor;\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"void main()\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"{\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\\n\"</span></span><br><span class=\"line\">    <span class=\"string\">\"}\\n\\0\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>{</span><br><span class=\"line\">    <span class=\"comment\">// glfw: initialize and configure</span></span><br><span class=\"line\">    <span class=\"comment\">// ------------------------------</span></span><br><span class=\"line\">    glfwInit();</span><br><span class=\"line\">    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, <span class=\"number\">3</span>);</span><br><span class=\"line\">    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">ifdef</span> __APPLE__</span></span><br><span class=\"line\">    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); <span class=\"comment\">// uncomment this statement to fix compilation on OS X</span></span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// glfw window creation</span></span><br><span class=\"line\">    <span class=\"comment\">// --------------------</span></span><br><span class=\"line\">    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, <span class=\"string\">\"LearnOpenGL\"</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (window == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    {</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Failed to create GLFW window\"</span> &lt;&lt; <span class=\"built_in\">std</span>::endl;</span><br><span class=\"line\">\tglfwTerminate();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    glfwMakeContextCurrent(window);</span><br><span class=\"line\">    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// glad: load all OpenGL function pointers</span></span><br><span class=\"line\">    <span class=\"comment\">// ---------------------------------------</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))</span><br><span class=\"line\">    {</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Failed to initialize GLAD\"</span> &lt;&lt; <span class=\"built_in\">std</span>::endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// build and compile our shader program</span></span><br><span class=\"line\">    <span class=\"comment\">// ------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\">// vertex shader</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vertexShader = glCreateShader(GL_VERTEX_SHADER); <span class=\"comment\">// </span></span><br><span class=\"line\">    glShaderSource(vertexShader, <span class=\"number\">1</span>, &amp;vertexShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    glCompileShader(vertexShader);</span><br><span class=\"line\">    <span class=\"comment\">// check for shader compile errors</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> success;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> infoLog[<span class=\"number\">512</span>];</span><br><span class=\"line\">    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success)</span><br><span class=\"line\">    {</span><br><span class=\"line\">\tglGetShaderInfoLog(vertexShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"</span> &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::endl;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// fragment shader</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class=\"line\">    glShaderSource(fragmentShader, <span class=\"number\">1</span>, &amp;fragmentShaderSource, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    glCompileShader(fragmentShader);</span><br><span class=\"line\">    <span class=\"comment\">// check for shader compile errors</span></span><br><span class=\"line\">    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success)</span><br><span class=\"line\">    {</span><br><span class=\"line\">\tglGetShaderInfoLog(fragmentShader, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\\n\"</span> &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::endl;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\">// link shaders</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> shaderProgram = glCreateProgram();</span><br><span class=\"line\">    glAttachShader(shaderProgram, vertexShader);</span><br><span class=\"line\">    glAttachShader(shaderProgram, fragmentShader);</span><br><span class=\"line\">    glLinkProgram(shaderProgram);</span><br><span class=\"line\">    <span class=\"comment\">// check for linking errors</span></span><br><span class=\"line\">    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success) {</span><br><span class=\"line\">\tglGetProgramInfoLog(shaderProgram, <span class=\"number\">512</span>, <span class=\"literal\">NULL</span>, infoLog);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\"</span> &lt;&lt; infoLog &lt;&lt; <span class=\"built_in\">std</span>::endl;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    glDeleteShader(vertexShader);</span><br><span class=\"line\">    glDeleteShader(fragmentShader);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set up vertex data (and buffer(s)) and configure vertex attributes</span></span><br><span class=\"line\">    <span class=\"comment\">// ------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> vertices[] = {</span><br><span class=\"line\">\t-<span class=\"number\">0.5f</span>, -<span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// left  </span></span><br><span class=\"line\">\t <span class=\"number\">0.5f</span>, -<span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>, <span class=\"comment\">// right </span></span><br><span class=\"line\">\t <span class=\"number\">0.0f</span>,  <span class=\"number\">0.5f</span>, <span class=\"number\">0.0f</span>  <span class=\"comment\">// top   </span></span><br><span class=\"line\">    }; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> VBO, VAO;</span><br><span class=\"line\">    glGenVertexArrays(<span class=\"number\">1</span>, &amp;VAO); <span class=\"comment\">// </span></span><br><span class=\"line\">    glGenBuffers(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\">    <span class=\"comment\">// bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).</span></span><br><span class=\"line\">    glBindVertexArray(VAO);</span><br><span class=\"line\"></span><br><span class=\"line\">    glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br><span class=\"line\">    glBufferData(GL_ARRAY_BUFFER, <span class=\"keyword\">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class=\"line\"></span><br><span class=\"line\">    glVertexAttribPointer(<span class=\"number\">0</span>, <span class=\"number\">3</span>, GL_FLOAT, GL_FALSE, <span class=\"number\">3</span> * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">float</span>), (<span class=\"keyword\">void</span>*)<span class=\"number\">0</span>);</span><br><span class=\"line\">    glEnableVertexAttribArray(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind</span></span><br><span class=\"line\">    glBindBuffer(GL_ARRAY_BUFFER, <span class=\"number\">0</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other</span></span><br><span class=\"line\">    <span class=\"comment\">// VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.</span></span><br><span class=\"line\">    glBindVertexArray(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// uncomment this call to draw in wireframe polygons.</span></span><br><span class=\"line\">    <span class=\"comment\">//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// render loop</span></span><br><span class=\"line\">    <span class=\"comment\">// -----------</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!glfwWindowShouldClose(window))</span><br><span class=\"line\">    {</span><br><span class=\"line\">\t<span class=\"comment\">// input</span></span><br><span class=\"line\">\t<span class=\"comment\">// -----</span></span><br><span class=\"line\">\tprocessInput(window);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// render</span></span><br><span class=\"line\">\t<span class=\"comment\">// ------</span></span><br><span class=\"line\">\tglClearColor(<span class=\"number\">0.2f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">0.3f</span>, <span class=\"number\">1.0f</span>);</span><br><span class=\"line\">\tglClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// draw our first triangle</span></span><br><span class=\"line\">\tglUseProgram(shaderProgram);</span><br><span class=\"line\">\tglBindVertexArray(VAO); <span class=\"comment\">// seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized</span></span><br><span class=\"line\">\tglDrawArrays(GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// glBindVertexArray(0); // no need to unbind it every time </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)</span></span><br><span class=\"line\">\t<span class=\"comment\">// -------------------------------------------------------------------------------</span></span><br><span class=\"line\">\tglfwSwapBuffers(window);</span><br><span class=\"line\">\tglfwPollEvents();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// optional: de-allocate all resources once they've outlived their purpose:</span></span><br><span class=\"line\">    <span class=\"comment\">// ------------------------------------------------------------------------</span></span><br><span class=\"line\">    glDeleteVertexArrays(<span class=\"number\">1</span>, &amp;VAO);</span><br><span class=\"line\">    glDeleteBuffers(<span class=\"number\">1</span>, &amp;VBO);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// glfw: terminate, clearing all previously allocated GLFW resources.</span></span><br><span class=\"line\">    <span class=\"comment\">// ------------------------------------------------------------------</span></span><br><span class=\"line\">    glfwTerminate();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">processInput</span><span class=\"params\">(GLFWwindow *window)</span></span><br><span class=\"line\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class=\"line\">\tglfwSetWindowShouldClose(window, <span class=\"literal\">true</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// glfw: whenever the window size changed (by OS or user resize) this callback function executes</span></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">framebuffer_size_callback</span><span class=\"params\">(GLFWwindow* window, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span></span><br><span class=\"line\"></span>{</span><br><span class=\"line\">    <span class=\"comment\">// make sure the viewport matches the new window dimensions; note that width and </span></span><br><span class=\"line\">    <span class=\"comment\">// height will be significantly larger than specified on retina displays.</span></span><br><span class=\"line\">    glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 纹理</h2>\n</div>\n\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 零散</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<ul class=\"org-ul\">\n<li>OpenGL中ID应该都是全局的，大概是因为时状态机吧，所有的状态统一维护\n</li>\n<li>对象的ID用GLuint存储，其实也可以看作对象的 <b>名称</b> 。\n</li>\n<li>OpenGL在CPU端管理的所有对象使用ageunsigned int来控制。\n</li>\n<li>OpenGL应该是显卡驱动实现的\n</li>\n<li>OpenGL允许我们同时绑定多个缓冲，只要它们是不同的缓冲类型，这个进一步说明OpenGL是基于状态机模型的\n</li>\n<li>OpenGL对象的生成可能还是在内存中，而在绑定到状态机上的时候才会赋值到显存中去\n</li>\n<li>对象时OpenGL状态机可以直接绑定的东西，对象本身还可以绑定函数\n</li>\n<li>顶点数组对象通常保存三种内容:\n<ol class=\"org-ol\">\n<li>glEnableVertexAttribArray和glDisableVertexAttribArray的调用\n</li>\n<li>通过glVertexAttribPointer设置的顶点属性配置。\n</li>\n<li>通过glVertexAttribPointer调用与顶点属性关联的顶点缓冲对象。\n</li>\n</ol>\n<p>\nVAO之后会和顶点缓冲对象关联，所以GL<sub>ARRAY</sub><sub>BUFFER不需要再调用，此时解绑也可以</sub>\n</p>\n</li>\n<li>顶点属性默认时禁用的，所以必须启动顶点属性\n</li>\n<li>着色器是运行在GPU中的小程序\n</li>\n</ul>\n</div>\n</div>\n<div id=\"footnotes\">\n<h2 class=\"footnotes\">Footnotes: </h2>\n<div id=\"text-footnotes\">\n\n<div class=\"footdef\"><sup><a id=\"fn.1\" name=\"fn.1\" class=\"footnum\" href=\"#fnr.1\">1</a></sup> <p>2D坐标是精确表示一个点在二维空间中的位置，而2D像素只是这个点的近似值，受到屏幕/窗口的限制。</p></div>\n\n\n</div>\n</div>\nLast Updated 2017-12-03 日 20:04.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
