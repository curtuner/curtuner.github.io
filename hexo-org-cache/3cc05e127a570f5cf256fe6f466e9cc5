{"md5":"58b079238bbdbbebd3e31f7caa58fa3f","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n由于最近接触Web框架比较多，而很多人对于Web开发本身却不太了解，导致直接学习Web框架概念的时候理解出现了很多偏差。本文原本打算讲的是Python Web框架，但是考虑到如果直接讲到Web框架的话，可能并不会比网络上讲解Web框架的资料讲得更多或者更好，所以转而补充理解Web框架需要的Web相关的知识，依我观察，大部分人还是受限于Web基本知识的不足。本文主要简单介绍的web开发的一些知识，不会介绍具体的实现，最多讲讲原理。考虑到大家对于Python不熟悉，而对于Python Web框架我目前还没有想到如何在不讲到Python特性的情况下讲透，所以只能放到下次再讲。除此之外，我筛选出了一些我觉得需要了解的东西，希望能减少读者对于Web开发的一些误解。\n</p>\n\n<p>\nWeb一般是World Wide Web的简称，对于用户来说，Web是一个 <b>由巨大的全球范围的文档或者说Web页面集合组成的</b> 。Web开发目的也就是提供给用户各种Web页面，这些Web页面可以包含各种资源的。现代的浏览器提供了和服务器通信的能力。而Web能提供的资源已经从过去的静态资源变成今天各种动态资源了。如何利用Web提供丰富的资源是本文最重要的主题。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> REST架构和HTTP</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\nHTTP（Hypertext Transfer Protocol，超文本传输协议）是在World Wide Web（万维网）上进行通信的协议，它定义了传输Web页面的方式。讲到Web就不得不讲到HTTP，当然对于这个协议我假设大家或多或少都懂一些，所以本文不会讲它的标准和细节。\n</p>\n\n<p>\n现代Web开发受到HTTP的深刻影响，所以要理解Web开发也可以从HTTP入手。最早的HTTP主要用来传输静态的Web页面，之后随着Web的流行，人们开始希望Web服务器能提供更多的资源，包括数据库、动态页面这些。同时，人们还希望能用一个统一的方式来访问Internet的资源（而不限于万维网），无论这个资源是什么类型。这个方法自然就是我们原先访问静态页面的方法了，也就是HTTP。\n那么该如何做到这一点呢？接下来会介绍到这些技术。在这之前需要先了解HTTP协议的内在逻辑。\n</p>\n</div>\n<div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> REST架构和HTTP关系</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\nHTTP协议，中文翻译是超文本传输协议，也就是说第二个“T”（Transfer）被翻译成了“传输”。但是HTTP设计者之一，Roy Thomas Fielding<sup><a id=\"fnr.1\" name=\"fnr.1\" class=\"footref\" href=\"#fn.1\">1</a></sup>后来在他那篇著名博士论文中，提出了REST（Representational State Transfer）架构。在那篇论文中，对于Transfer的使用更加偏向“（状态）转移”的意思。考虑到HTTP在设计之初就不只是为了传输静态Web页面而设计的<sup><a id=\"fnr.2\" name=\"fnr.2\" class=\"footref\" href=\"#fn.2\">2</a></sup>，REST架构可以算是HTTP设计过程中未成型的构想。所以虽然HTTP出现得比REST架构要晚，但是使用REST架构的概念来理解HTTP协议却不失一种好方法。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> REST架构</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\n这里并不会讲REST架构的所有细节，只是借用主要的概念来理解Web，帮助大家建立现代Web开发的蓝图。这里还要提醒一下，这个只是理解Web的其中一种方式，实际上Web开发的自由度要高多了，所以还有不同角度的理解。不过REST是我比较喜欢的，也可以方便我之后引出其他概念。\n</p>\n</div>\n<div id=\"outline-container-sec-2-2-1\" class=\"outline-4\">\n<h4 id=\"sec-2-2-1\"><span class=\"section-number-4\">2.2.1</span> 资源（Resource）</h4>\n<div class=\"outline-text-4\" id=\"text-2-2-1\">\n<p>\nREST是Representational State Transfer的缩写。这个短语省略了主语Resource（资源），资源可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个某个实体。你可以用一个URI（统一资源定位符）<sup><a id=\"fnr.2.100\" name=\"fnr.2.100\" class=\"footref\" href=\"#fn.2\">2</a></sup>指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或 <b>独一无二</b> 的标识符。HTTP就是依靠URI来定位资源的（过去只是静态资源，今天已经没有限制了）。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2-2\" class=\"outline-4\">\n<h4 id=\"sec-2-2-2\"><span class=\"section-number-4\">2.2.2</span> 表现形式（Representation）</h4>\n<div class=\"outline-text-4\" id=\"text-2-2-2\">\n<p>\n这里的表现形式是指 <b>资源的</b> 表现形式，最早的Web资源只有一种表现形式：静态Web页面<sup><a id=\"fnr.3\" name=\"fnr.3\" class=\"footref\" href=\"#fn.3\">3</a></sup>。所以早期的Web开发没有必要把资源和表现形式分开，因为那时两者还是一一对应的关系。到了今天就像前面看到的，资源的概念已经很宽泛了，而表现形式其实比较有限，一般包括各种格式，如HTML格式、XML格式、JSON格式、PNG图片格式等等。就如同一个图片可以有多种图片格式一样，一个资源可以有多种表现形式。HTTP最终传输的就是这些表现形式，说白了只是用不同的格式表示相同的信息。\n</p>\n\n<p>\n在讨论Web的时候，资源和表现形式不是严格区分开来的，一个资源至少要有一种表现形式。表现形式是HTTP传输的实体，如果没有一种可以供HTTP协议传输的实体，就没有讨论的意义了。需要注意的是URI定位的是资源，而不是表现形式。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2-3\" class=\"outline-4\">\n<h4 id=\"sec-2-2-3\"><span class=\"section-number-4\">2.2.3</span> 状态转移（State Transfer）</h4>\n<div class=\"outline-text-4\" id=\"text-2-2-3\">\n<p>\n由于HTTP是一个无状态协议，也就是说客户端是不会保存状态的，资源的状态会被服务端维护。如果客户端要操作资源，必须通过某种手段，让服务器端的资源的表现形式发生状态转移。需要注意的是在REST中的状态转移是发生在表现形式上的，原因我觉得是对于客户端往往只能知道资源的表现形式，很多时候用户并不知道自己获得的Web页面是动态生成的还是静态的，所以操作资源的状态转移只能在表现形式上。这种做法其实我们也很熟悉，差不过就是一般面向对象编程语言中封装的概念，状态转移的接口需要应用的设计者提供，但不会暴露内部的实现。对于用户来就只能理解为表现形式上的状态转移。\n</p>\n\n<p>\nHTTP提供了对资源的表现形式进行操作的原语：\n</p>\n<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">\n\n\n<colgroup>\n<col class=\"left\">\n\n<col class=\"left\">\n</colgroup>\n<thead>\n<tr>\n<th scope=\"col\" class=\"left\">方法</th>\n<th scope=\"col\" class=\"left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"left\">GET</td>\n<td class=\"left\">获取资源（读）</td>\n</tr>\n\n<tr>\n<td class=\"left\">PUT</td>\n<td class=\"left\">更新资源（写）</td>\n</tr>\n\n<tr>\n<td class=\"left\">POST</td>\n<td class=\"left\">新建资源（也可以用于更新）</td>\n</tr>\n\n<tr>\n<td class=\"left\">DELETE</td>\n<td class=\"left\">删除资源</td>\n</tr>\n</tbody>\n</table>\n\n<p>\n这也进一步说明了HTTP协议一开始就考虑了后续的扩展，如果早期的HTTP真的只是为了传输静态文件，那么就没必要出现这些方法，只需要一个URI就够了。也正是这个通过的设计，我们今天才可以借助HTTP来实现各种各样的应用。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-2-3\" class=\"outline-3\">\n<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> 小结</h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n<p>\n一开始也说到，REST只是一种网络架构，理解万维网并不一定从REST开始。但是利用REST的思想可以帮助我们很方便地理解很多Web的概念。REST最为重要的一点是把资源和表现形式相互分离，这是我们理解Web应用的基础。至于让状态转移只局限于表现形式，则更多的是一种原则，实际上，很多网络应用可能最终并没有严格按照这个原则。这个原则在于不将资源暴露给Web用户，而暴露接口，其好处和不将程序内部实现暴露给用户的好处是一样的，这里不多说。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 网关（gateway）</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\nHTTP的扩展和接口的发展是由用户需求驱动的，要在Web上发布更复杂的资源的需求出现时，人们很快就明确了一点：单个应用程序无法处理所有这些能想到的资源。为了解决这个问题，开发者提出了 <b>网关（gateway）</b> <sup><a id=\"fnr.3.100\" name=\"fnr.3.100\" class=\"footref\" href=\"#fn.3\">3</a></sup>这个概念，网关作为某种翻译器使用，它抽象出了一种能够到达资源的方法。简单来说，网关是连接<sup><a id=\"fnr.4\" name=\"fnr.4\" class=\"footref\" href=\"#fn.4\">4</a></sup>其他应用程序的 <i>特殊Web服务器</i> 。\n</p>\n\n<p>\nWeb网关在一侧使用HTTP协议，在另一侧使用另一种协议<sup><a id=\"fnr.4.100\" name=\"fnr.4.100\" class=\"footref\" href=\"#fn.4\">4</a></sup>，下面使用斜杠来分隔客户端和服务端协议，并以此对网关进行描述：\n</p>\n\n<p>\n&lt;客户端协议&gt;/&lt;服务器端协议&gt;\n</p>\n\n<p>\n按照网关使用HTTP跟哪一端通信，可以把网关分成两类：\n</p>\n<ul class=\"org-ul\">\n<li>服务端网关：HTTP/*\n</li>\n<li>客户端网关：*/HTTP\n</li>\n</ul>\n\n<p>\n本文只打算讨论服务端网关，实际上这个也是最常用的。\n网关的分类方式不止一种，根据资源的位置和获取资源的方式，又可以对服务端网关进行分类，主要包括协议网关和资源网关。网关也会涉及到比较复杂的概念。\n</p>\n</div>\n<div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> 协议网关</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\n协议网关指的是资源在远程服务器上，同时不能使用HTTP访问的情况：\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"Web开发概述/protocol_gateway.png\" alt=\"protocol_gateway.png\">\n</p>\n</div>\n\n<p>\n这是一个服务端Web网关，也是最常用的网关之一。我们可以看到网关会将HTTP请求转化成 <i>其网络协议</i> 操作，之后把结果转化成HTTP响应发送会给客户端。根据网关转换的协议的不同又有不同的叫法，例如如果右端是HTTPS，则一般称为服务端安全网关。协议网关只是单纯的网络协议转换器，比较简单。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2\" class=\"outline-3\">\n<h3 id=\"sec-3-2\"><span class=\"section-number-3\">3.2</span> 资源网关</h3>\n<div class=\"outline-text-3\" id=\"text-3-2\">\n<p>\n资源网关指的是网关自身带有资源的的情况，前面的协议网关则是需要通过网关来获取远程服务器的资源。我们也把资源网关称为 <b>应用程序服务器</b> 。它会把目标服务器和网关结合在一个服务器中实现：\n</p>\n\n<div class=\"figure\">\n<p><img src=\"Web开发概述/app_gateway.png\" alt=\"app_gateway.png\">\n</p>\n</div>\n\n<p>\n可以看到和协议网关一样，该有的基本实体（网关、服务端）依然存在，只是位置不同了而已。在应用程序服务器中，资源指的是应用程序或者有应用程序提供。按照REST架构的逻辑，其实资源网关和协议网关没有本质的区别。\n</p>\n\n<p>\n前面提到网关起着协议翻译器的作用，上图中使用Web服务器充当网关，所以接下来要解决的问题是如何通过web服务器如何把HTTP请求翻译成为应用程序（服务端）能够理解的内容。这个问题也暗示了Web服务器和应用程序需要某种协议来通信。由于在本机上，所以自然就不需要借助网络协议（类似FTP、SSH这些）。\n</p>\n\n<p>\n现在的问题就是：同一台机器上不同程序模块如何通信？这是一个古老的话题，一般如果把不同程序模块分配在不同的进程中，就可以借助进程间通信技巧；如果把程序模块分配给不同线程中，就要处理线程通信带来的问题；如果把多个程序模块分配给同一个执行流，就是接口设计和如何调用的问题<sup><a id=\"fnr.5\" name=\"fnr.5\" class=\"footref\" href=\"#fn.5\">5</a></sup>。上图的应用程序（服务端）只代表某个或者某些程序模块，虽说程序模块的使用需要借助执行流，但我觉得在本文中没必要。实际上如果愿意也可以借助Web服务器自身的执行流，只是效率上不大能接受而已<sup><a id=\"fnr.6\" name=\"fnr.6\" class=\"footref\" href=\"#fn.6\">6</a></sup>。\n</p>\n\n<p>\n对于应用程序服务器来说，为了让Web服务器和应用程序模块（应用程序服务端）<sup><a id=\"fnr.7\" name=\"fnr.7\" class=\"footref\" href=\"#fn.7\">7</a></sup>通信，就需要提供一个通信的方案，这个方案叫 <i>协议</i> 或者 <i>接口</i> 规范都可以，没有本质的区别。所以即便是网关和服务端在同一台机器上的时候，网关也依旧充当协议转换器的作用。方便起见，本文称网关和应用程序的通信规范为网关接口（gateway interface），而不是协议（实际上网关接口有时也被教成网关协议）。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-3\" class=\"outline-3\">\n<h3 id=\"sec-3-3\"><span class=\"section-number-3\">3.3</span> 网关接口（gateway interface）</h3>\n<div class=\"outline-text-3\" id=\"text-3-3\">\n<p>\n这里再简要介绍一下常见的网关接口，不会讲太具体，有需要可以阅读标准文档。\n</p>\n\n<p>\n接触过Web应用开发的人一般都会接触到某种网关接口，常见的包括：\n</p>\n<ul class=\"org-ul\">\n<li>CGI（Common Gateway Interface, 通用网关接口）。\n</li>\n<li>FastCGI（FastCommon Gateway Interface，快速通用网关接口）。\n</li>\n<li>WSGI（Python Web Server Gateway Interface，Python Web服务器网关接口）。\n</li>\n<li>JSGI（Java Server Gateway Interface, Java服务器网关接口）。\n</li>\n</ul>\n\n<p>\n现在我们也知道以上网关接口都是用网关和应用程序的通信规范了。除了这些之外还有很多其他的通信规范，很多是和语言相关的，像WSGI是Python应用程序专用的，Ruby、PHP也提供了自己的网关接口。那么为什么会为不同的语言提供不同的网关接口呢？前面也说过我们实际需要的是一个 <i>程序模块的通信规范</i> ，而不同的程序语言其实可以提供不同的模块间通信方案，现代很多语言都会包含比C语言丰富得多的模块间通信方案。这也是Python以及其他的高级语言会提供专用的网关接口的原因<sup><a id=\"fnr.8\" name=\"fnr.8\" class=\"footref\" href=\"#fn.8\">8</a></sup>。所以如果要理解WSGI这个Python专用的网关接口，就无法避免去了解Python的一些特性，尤其是模块通信相关的部分。接下来只会简单介绍一下以上几个网关接口。\n</p>\n</div>\n<div id=\"outline-container-sec-3-3-1\" class=\"outline-4\">\n<h4 id=\"sec-3-3-1\"><span class=\"section-number-4\">3.3.1</span> CGI</h4>\n<div class=\"outline-text-4\" id=\"text-3-3-1\">\n<p>\n知道了网关接口本质只是一种模块间通信的方案就很容易理解CGI这种网关接口为什么这么设计了，“通用”的含义也就很明确了。CGI出现得比较早，使用的方案是原始的进程间通信方案。服务器程序对于每个需要Web应用程序处理的HTTP请求，主要内容就是fork一个应用程序的进程，应用程序的进程从环境变量和标准输入中读取数据，处理数据，之后向标准输出发送数据。这是很原始的做法，但的确是最通用的做法，进城的概念本来就无关语言。对于简单的应用程序服务器来说这不是问题，但对于复杂的用户量大的应用程序服务器来说CGI并不实用，所以今天用得比较少了。有时候人们说的CGI指的是FastCGI，这个就要看语境了。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-3-2\" class=\"outline-4\">\n<h4 id=\"sec-3-3-2\"><span class=\"section-number-4\">3.3.2</span> FastCGI</h4>\n<div class=\"outline-text-4\" id=\"text-3-3-2\">\n<p>\nFastCGI是CGI的改进版，其实现主要是两个部分：\n</p>\n<ul class=\"org-ul\">\n<li>进程/线程池\n</li>\n<li>FastCGI进程\n</li>\n</ul>\n<p>\n进程/线程池用于为Web应用程序安置控制流，这算是一种优化方式。对于Web服务器程序来说，会通过TCP或者命名管道来完成和FastCGI程序的进程间通信。就模块间通信来说，其实对于Web服务器程序而言其实和CGI没有什么区别，本质上基本都是进程间通信方案。所以CGI程序可以方便地移植到FastCGI中，这也是两者常常混用的原因。\n</p>\n\n<p>\nFastCGI的虽然相对于CGI提升了效率，但是对于处理大量请求来说还存在一定不足，比如它不支持异步处理请求，这对于高并发的服务器来说这是一个不得不解决的问题。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-3-3\" class=\"outline-4\">\n<h4 id=\"sec-3-3-3\"><span class=\"section-number-4\">3.3.3</span> WSGI</h4>\n<div class=\"outline-text-4\" id=\"text-3-3-3\">\n<p>\n无论是CGI还是FastCGI都是通用的并且语言无关的，因为进程的概念基本是编程语言通用的<sup><a id=\"fnr.9\" name=\"fnr.9\" class=\"footref\" href=\"#fn.9\">9</a></sup>。WSGI这个网关接口是一个语言层面的接口约定，使用了Python提供模块间通信机制。由于和FastCGI的通信方案（一个是进程间通信，一个是语言层面的模块通信）并没有重叠的部分，所以两个方案也常常一起使用。值得一提的是要理解这个接口大概也避不开对Python特性的理解。所以这个放到下次再讲。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3-4\" class=\"outline-3\">\n<h3 id=\"sec-3-4\"><span class=\"section-number-3\">3.4</span> Web框架概述</h3>\n<div class=\"outline-text-3\" id=\"text-3-4\">\n<p>\n一般情况下，我们编写的Web应用程序服务器不只一个应用，而且往往不断增加新的Web应用，所以一般的Web应用服务器更接近下图：\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"Web开发概述/resource_gateway_ex.png\" alt=\"resource_gateway_ex.png\">\n</p>\n</div>\n\n<p>\n之前说过，Web服务器通过预先选择的网关接口来和应用程序沟通。然而WSGI解决的问题主要也就是通信的问题，为应用程序服务器添加一个Web应用程序还需要解决其他的问题。这里我想先考虑如果解决了这些问题，能够得到什么？之前说的REST架构，差不多就是我们解决了这些问题能够达到的结果<sup><a id=\"fnr.10\" name=\"fnr.10\" class=\"footref\" href=\"#fn.10\">10</a></sup>。按照这个架构的概念可以大致理清一个Web框架需要解决的问题。显然资源（resource）对应Web应用程序，而资源需要URI来标识，也就是说Web应用程序就自然需要URI来标识。资源需要表现形式，这个表现形式就是动态生成的Web页面<sup><a id=\"fnr.11\" name=\"fnr.11\" class=\"footref\" href=\"#fn.11\">11</a></sup>，所以还需要一个生成动态页面的通用机制。表现形式的状态转移则依旧根据HTTP请求来。总的来说，一个框架需要把Web应用包装成如下的形式：\n</p>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">WebPage <span class=\"title\">a_URI</span><span class=\"params\">(HTTPRequest request)</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> GeneratePage(result);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n这也就是一个Web应用最终达到的形式。简单来说，Web框架应该能够通过唯一URI以及HTTP方法来调用Web应用，之后返回页面。\n</p>\n\n<p>\n因此，一个Web框架要解决的主要问题就清晰了：\n</p>\n<ol class=\"org-ol\">\n<li>路由：URI和Web应用程序（资源）的绑定，同时能处理HTTP请求信息；\n</li>\n<li>生成动态页面：为资源提供表现形式。\n</li>\n</ol>\n\n<p>\n不同的Web框架一个主要的区别就是为这两个问题选择了不同的解决方案。路由的方案一般会使用到Python的特性，这个也不讲。而生成动态页面只要借助模板库就差不多了，不算难点。所以最终一个框架的地位就很明确了，它会作为应用程序和Web服务器之间的中间层，提供给服务器一个类似函数调用般的抽象。类似于很多动态语言虚拟机的函数调用功能。下面是加入和Web框架之后的应用程序服务器的拓扑图：\n</p>\n\n<div class=\"figure\">\n<p><img src=\"Web开发概述/resourcess_gateway_ex.png\" alt=\"resourcess_gateway_ex.png\">\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-3-5\" class=\"outline-3\">\n<h3 id=\"sec-3-5\"><span class=\"section-number-3\">3.5</span> 更强力的资源网关</h3>\n<div class=\"outline-text-3\" id=\"text-3-5\">\n<p>\n到目前为止，虽然规范了通信的方式，但是似乎对于Web应用的复杂程度似乎没有什么限制，实际也是如此，所以对于Web应用的能力还是不要局限于本机。一个Web应用完全可以支持其他的网络协议，也就是说作为客户端访问其他服务器。更加强力的网关可以用下图表示：\n</p>\n\n<div class=\"figure\">\n<p><img src=\"Web开发概述/gateway_ex.png\" alt=\"gateway_ex.png\">\n</p>\n</div>\n\n<p>\n从图中可以看到，Web应用本身作为了连接远程服务器的客户端，通过这种方式资源网关能够定位的资源几乎没有更多的限制了。现在，我们差不多知道如何做到利用HTTP统一访问Internet上的资源了。核心方案就是利用网关（应用程序服务器）。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> Web客户端和Web服务器双向实时通信</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n前面刻意忽略了一点，就是动态页面的生成不仅发生在服务器端，也发生在客户端。现代浏览器在生成动态页面的时候主要借助JavaScript<sup><a id=\"fnr.12\" name=\"fnr.12\" class=\"footref\" href=\"#fn.12\">12</a></sup>，或者解决通过JavaScript生成。除了支持动态生成页面，Javascript本身足以实现各种功能，包括作为某些协议的客户端。\n</p>\n\n<p>\n接下来会介绍一类特殊的资源：连接。之所以把连接作为一种资源，主要是为了把它嵌入HTTP协议的逻辑中。至于为什么会出现这种资源，显然是为了支持更加复杂的应用。由于浏览器可以运行代码，JavaScript本身是一门足够强大的动态语言，足以编写足够复杂的应用，只不过受限于浏览器的资源。由于HTTP是一个无状态协议，没有持久的连接，所以只能引入持久的连接来支持更加复杂的应用。目前的有两种连接资源：\n</p>\n<ol class=\"org-ol\">\n<li>Web隧道\n</li>\n<li>WebSocket\n</li>\n</ol>\n\n<p>\n预先说一下，HTTP在发送请求前会先会建立TCP连接，实际上请求的“连接”资源往往是在这个TCP连接上做文章。由于我们把连接看作资源，所以支持Web隧道的服务器在隧道通信时行为和代理没什么区别，但我们依旧倾向于认为它是资源网关。\n</p>\n</div>\n<div id=\"outline-container-sec-4-1\" class=\"outline-3\">\n<h3 id=\"sec-4-1\"><span class=\"section-number-3\">4.1</span> Web 隧道</h3>\n<div class=\"outline-text-3\" id=\"text-4-1\">\n</div><div id=\"outline-container-sec-4-1-1\" class=\"outline-4\">\n<h4 id=\"sec-4-1-1\"><span class=\"section-number-4\">4.1.1</span> 建立Web隧道</h4>\n<div class=\"outline-text-4\" id=\"text-4-1-1\">\n<p>\nWeb隧道的建立使用了HTTP的CONNECT方法<sup><a id=\"fnr.13\" name=\"fnr.13\" class=\"footref\" href=\"#fn.13\">13</a></sup>，利用CONNECT方法请求 <b>隧道网关</b> 创建一条到达任意目标服务器和端口的TCP连接，并对于客户端和服务器之间的后继数据进行 <b>盲转发</b> 。也就是后面隧道网关起着代理的作用。\n下图是《HTTP权威指南》给出的图，介绍了通过CONNECt方法建立起一条到达网关的隧道的过程：\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"./Web开发概述/tunnel.png\" alt=\"tunnel.png\">\n</p>\n</div>\n\n<p>\n这里的具体过程不打算细讲，从图中可以看到，隧道网关返回了SSL代理资源。实际上利用Web隧道可以支持以TCP协议为基础的任何协议，包括SSH、RDP这类。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-4-2\" class=\"outline-3\">\n<h3 id=\"sec-4-2\"><span class=\"section-number-3\">4.2</span> WebSocket</h3>\n<div class=\"outline-text-3\" id=\"text-4-2\">\n</div><div id=\"outline-container-sec-4-2-1\" class=\"outline-4\">\n<h4 id=\"sec-4-2-1\"><span class=\"section-number-4\">4.2.1</span> <span class=\"todo TODO\">TODO</span> 概述</h4>\n<div class=\"outline-text-4\" id=\"text-4-2-1\">\n<p>\n相比Web隧道，WebSocket是主要还是用于浏览器与的Web服务器<sup><a id=\"fnr.14\" name=\"fnr.14\" class=\"footref\" href=\"#fn.14\">14</a></sup>，而不是像Web隧道那样是获得代理的资源。当然这个协议也同样打着传输HTTP报文的那个TCP连接的主意。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4-2-2\" class=\"outline-4\">\n<h4 id=\"sec-4-2-2\"><span class=\"section-number-4\">4.2.2</span> 对WebSocket的支持情况</h4>\n<div class=\"outline-text-4\" id=\"text-4-2-2\">\n<p>\nWebSocket的最新规范是RFC 6455<sup><a id=\"fnr.1.100\" name=\"fnr.1.100\" class=\"footref\" href=\"#fn.1\">1</a></sup>，支持它的最低浏览器版本分别是：\n</p>\n<ul class=\"org-ul\">\n<li>IE 10\n</li>\n<li>Firefox(PC) 11\n</li>\n<li>Firefox(Android) 11\n</li>\n<li>Chrome(PC, Mobile) 16\n</li>\n<li>Safari(Mac, IOS) 6\n</li>\n<li>Opera(PC, Mobile) 12.10\n</li>\n<li>Android浏览器 4.4\n</li>\n</ul>\n\n<p>\n有些浏览器的WebSocket功能不是默认打开的，这点需要注意。另一方面支持WebSocket的Web服务器包括：\n</p>\n<ul class=\"org-ul\">\n<li>php - <a href=\"http://code.google.com/p/phpwebsocket/\">http://code.google.com/p/phpwebsocket/</a>\n</li>\n<li>jetty - <a href=\"http://jetty.codehaus.org/jetty/%EF%BC%88%E7%89%88%E6%9C%AC7%E5%BC%80%E5%A7%8B%E6%94%AF%E6%8C%81websocket%EF%BC%89[%E5%A4%B1%E6%95%88%E9%80%A3%E7%B5%90\">http://jetty.codehaus.org/jetty/%EF%BC%88%E7%89%88%E6%9C%AC7%E5%BC%80%E5%A7%8B%E6%94%AF%E6%8C%81websocket%EF%BC%89[%E5%A4%B1%E6%95%88%E9%80%A3%E7%B5%90</a>]\n</li>\n<li>netty - <a href=\"http://www.jboss.org/netty\">http://www.jboss.org/netty</a>\n</li>\n<li>ruby - <a href=\"http://github.com/gimite/web-socket-ruby\">http://github.com/gimite/web-socket-ruby</a>\n</li>\n<li>Kaazing - <a href=\"https://web.archive.org/web/20100923224709/http://www.kaazing.org/confluence/display/KAAZING/Home\">https://web.archive.org/web/20100923224709/http://www.kaazing.org/confluence/display/KAAZING/Home</a>\n</li>\n<li>Tomcat - <a href=\"http://tomcat.apache.org/%EF%BC%887.0.27%E6%94%AF%E6%8C%81websocket%EF%BC%8C%E5%BB%BA%E8%AE%AE%E7%94%A8tomcat8%EF%BC%8C7.0.27%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%B7%B2%E7%BB%8F%E8%BF%87%E6%97%B6\">http://tomcat.apache.org/%EF%BC%887.0.27%E6%94%AF%E6%8C%81websocket%EF%BC%8C%E5%BB%BA%E8%AE%AE%E7%94%A8tomcat8%EF%BC%8C7.0.27%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%B7%B2%E7%BB%8F%E8%BF%87%E6%97%B6</a>）\n</li>\n<li>WebLogic - <a href=\"http://www.oracle.com/us/products/middleware/cloud-app-foundation/weblogic/overview/index.html%EF%BC%8812.1.2%E9%96%8B%E5%A7%8B%E6%94%AF%E6%8C%81%EF%BC%89[%E5%A4%B1%E6%95%88%E9%80%A3%E7%B5%90\">http://www.oracle.com/us/products/middleware/cloud-app-foundation/weblogic/overview/index.html%EF%BC%8812.1.2%E9%96%8B%E5%A7%8B%E6%94%AF%E6%8C%81%EF%BC%89[%E5%A4%B1%E6%95%88%E9%80%A3%E7%B5%90</a>]\n</li>\n<li>node.js - <a href=\"https://github.com/Worlize/WebSocket-Node\">https://github.com/Worlize/WebSocket-Node</a>\n</li>\n<li>node.js - <a href=\"http://socket.io\">http://socket.io</a>\n</li>\n<li>nginx - <a href=\"http://nginx.com/\">http://nginx.com/</a>\n</li>\n<li>mojolicious - <a href=\"http://mojolicio.us/\">http://mojolicio.us/</a>\n</li>\n<li>python - <a href=\"https://github.com/abourget/gevent-socketio\">https://github.com/abourget/gevent-socketio</a>\n</li>\n<li>Django - <a href=\"https://github.com/stephenmcd/django-socketio\">https://github.com/stephenmcd/django-socketio</a>\n</li>\n<li>erlang - <a href=\"https://github.com/ninenines/cowboy.gi\">https://github.com/ninenines/cowboy.gi</a>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> Web代理和Web网关的区别</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<p>\n严格来说，代理连接的是两个或多个使用相同协议的应用程序，而网关连接的则是两个或多个使用不同协议的端点。网关扮演协议转换器的角色，包括从HTTP协议到网关接口的转换，即使客户端和服务器使用的是不同的协议，客户端也能通过它完成与服务器之间的事务处理。下图显示了这个区别：\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"Web开发概述/proxy_gateway.png\" alt=\"proxy_gateway.png\">\n</p>\n</div>\n\n<p>\n现实是，代理和网关之间的区别很模糊。由于浏览器和服务器实现的是不同版本的HTTP，代理也经常要做一些协议转换的工作。而商业化的代理服务器也会实现网关的功能来支持SSL协议、SOCKS防火墙、FTP访问，以及基于Web的应用程序。一般来说，我们认为HTTP和HTTPS是不同的协议，所以需要通过网关进行转化。另外，一个服务器即便把HTTP转化成和目标服务器相同的版本，也依旧认为它是一个代理。\n</p>\n\n<p>\n个人的想法是在不便于区分代理和网关的情况下，专注于功能即可。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<ul class=\"org-ul\">\n<li>《HTTP权威指南》\n</li>\n<li>Tunneling TCP based protocols through Web proxy servers\n</li>\n<li><a href=\"https://en.wikipedia.org/wiki/HTTP_tunnel\">https://en.wikipedia.org/wiki/HTTP_tunnel</a>\n</li>\n<li><a href=\"https://zh.wikipedia.org/wiki/WebSocket\">https://zh.wikipedia.org/wiki/WebSocket</a>\n</li>\n<li><a href=\"http://lukas.pokorny.eu/sftp-over-websockets/\">http://lukas.pokorny.eu/sftp-over-websockets/</a>\n</li>\n<li><a href=\"http://www.sftp.net/\">http://www.sftp.net/</a>\n</li>\n<li><a href=\"https://www.w3.org/TR/2012/CR-websockets-20120920/\">https://www.w3.org/TR/2012/CR-websockets-20120920/</a>\n</li>\n<li>《SSH权威指南》\n</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2011/09/restful.html\">http://www.ruanyifeng.com/blog/2011/09/restful.html</a>\n</li>\n<li><a href=\"http://www.jeffknupp.com/blog/2014/03/03/what-is-a-web-framework/\">http://www.jeffknupp.com/blog/2014/03/03/what-is-a-web-framework/</a>\n</li>\n<li>《计算机网络（第五版）》 Andrew S.Tanenbaum\n</li>\n<li><a href=\"http://blog.51reboot.com/cgi-fastcgi-wsgi/\">http://blog.51reboot.com/cgi-fastcgi-wsgi/</a>\n</li>\n<li><a href=\"http://www.bingtel.wang/2017/03/05/PEP-333-Python-Web-Server-Gateway-Interface-v1-0/\">http://www.bingtel.wang/2017/03/05/PEP-333-Python-Web-Server-Gateway-Interface-v1-0/</a>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"footnotes\">\n<h2 class=\"footnotes\">Footnotes: </h2>\n<div id=\"text-footnotes\">\n\n<div class=\"footdef\"><sup><a id=\"fn.1\" name=\"fn.1\" class=\"footnum\" href=\"#fnr.1\">1</a></sup> <p>他不仅是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.2\" name=\"fn.2\" class=\"footnum\" href=\"#fnr.2\">2</a></sup> <p>Tanenbaum的《计算机网络（第五版）》指出HTTP设计的时候就考虑了今后面对向对象应用的扩展。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.3\" name=\"fn.3\" class=\"footnum\" href=\"#fnr.3\">3</a></sup> <p>Web页面关联的其他文件也是静态的，方便起见，这里统一认为是Web页面的一部分。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.4\" name=\"fn.4\" class=\"footnum\" href=\"#fnr.4\">4</a></sup> <p>无论是使用网络协议还是进程间通信、线程等方式。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.5\" name=\"fn.5\" class=\"footnum\" href=\"#fnr.5\">5</a></sup> <p>实际情况要复杂得多，如果完全地分析一个完整的程序，会发现一般都是采用复合的策略。好在我们在分析的时候可以只关注我们关心的程序模块。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.6\" name=\"fn.6\" class=\"footnum\" href=\"#fnr.6\">6</a></sup> <p>之所以讲这个，是因为个人在实际交流中常常发现很多人对于执行流和程序这两个概念往往不是分得很清，过分在意一个应用程序在进程或者线程上的分配，我感觉很多时候是不必要的。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.7\" name=\"fn.7\" class=\"footnum\" href=\"#fnr.7\">7</a></sup> <p>这点之后不会再强调。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.8\" name=\"fn.8\" class=\"footnum\" href=\"#fnr.8\">8</a></sup> <p>至于方案有哪些，这不是一个小话题，我目前也没法总结出来。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.9\" name=\"fn.9\" class=\"footnum\" href=\"#fnr.9\">9</a></sup> <p>不幸的是不同语言支持的线程有时会不同。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.10\" name=\"fn.10\" class=\"footnum\" href=\"#fnr.10\">10</a></sup> <p>无论是Flask还是Tornado，都可以设计成RESTful的Web应用。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.11\" name=\"fn.11\" class=\"footnum\" href=\"#fnr.11\">11</a></sup> <p>只能说差不多，动态页面除了在服务端生成，还会在客户端生成（一般借助JavaScript），这里还不会太关注客户端的页面动态生成过程。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.12\" name=\"fn.12\" class=\"footnum\" href=\"#fnr.12\">12</a></sup> <p>当然最新的WebAssembly也在开发中，以后生成动态页面的技术也会更加多样化，有兴趣可以自己了解WebAssembly。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.13\" name=\"fn.13\" class=\"footnum\" href=\"#fnr.13\">13</a></sup> <p>这不是Web服务器必须实现的方法。</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.14\" name=\"fn.14\" class=\"footnum\" href=\"#fnr.14\">14</a></sup> <p>虽说Web应用程序服务器可以很复杂。</p></div>\n\n\n</div>\n</div>\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
