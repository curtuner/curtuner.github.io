{"md5":"cefd4dec230ed2be8cf0822a0d424361","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n据说在Windows下Viso非常好用，不过这东西一到其他平台上就不能使用了，所以我一开始就没考虑。之前一直使用ditaa和graphviz绘图，一般的需求都可以满足。但是一直没有找到合适的绘制时序图的软件。直到遇到了PlantUML，它能够支持大部分在软件开发中可能需要绘制的图形，支持ditaa和dot语言。而且语法还十分简单，唯一的不足是它是使用Java编写的。另外PlantUML也提供了在线绘制的功能，如果在本机一时无法配置环境，可以打开其<a href=\"http://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa70000\">服务器网站</a>。\nPlantUML是一个快速创建UML图形的组件，它支持绘制的图形包括：\n</p>\n<ol class=\"org-ol\">\n<li>时序图\n</li>\n<li>用例图\n</li>\n<li>类图\n</li>\n<li>活动图\n</li>\n</ol>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 实用的简单功能</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> 前言</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n由于PlantUML需要使用绘图语言，而就我看到的很多习惯在Windows编程的人都对此有些排斥。大概是不够直观，所以完整介绍PlantUML之前，我打算先把一些使用PlantUML就能简单实现的功能提供给读者。供读者选择是否继续学习PlantUML，毕竟对于已经掌握已经熟练的绘图工具的人来说，重新学习一个绘图工具性价比并不高。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> ascii图形转化为图片</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\n对于通信公司来说，可能经常要阅读各种协议的文档，为了和IETF保持一致，很多文档都用txt格式书写。比如我之前阅读过的vrrp的文档的协议格式部分是这样的：\n<img src=\"./plantuml学习笔记/vrrp_format.png\" alt=\"vrrp_format.png\">\n读者也看到了，一旦我想把它插入到其他文档，像html或者word的时候就需要把它弄成图片，否则一不小心格式就被破坏了。直接截图虽然也可以，但其实我们完全可以很简单地将它导出为更加美观的图片。这原本是ditaa提供的功能，但由于PlantUML支持了ditaa，所以读者也可以完全把它当作ditaa的功能。具体的做法很简单，直接把ascii图形复制过去，ascii图形之间使用 <code>@startditaa</code> 和 <code>@endditaa</code> 包围：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">@startditaa&#10;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#10;|Version| Type  | Virtual Rtr ID|   Priority    | Count IP Addrs|&#10;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#10;|   Auth Type   |   Adver Int   |          Checksum             |&#10;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#10;|                         IP Address (1)                        |&#10;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#10;|                            .                                  |&#10;|                            .                                  |&#10;|                            .                                  |&#10;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#10;|                         IP Address (n)                        |&#10;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#10;|                     Authentication Data (1)                   |&#10;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#10;|                     Authentication Data (2)                   |&#10;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#10;@endditaa</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2-3\" class=\"outline-3\">\n<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> 绘制活动图</h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n<p>\n活动图是编写软件文档的时候常常要绘制的，就我的绘制经验来说，绘制这类图形的问题是，程序逻辑往往是线性描述的，而活动图不是，绘制的过程中首要的往往是解决这个矛盾。所幸PlantUML提供的语法让我们能够使用简单的用贴近程序逻辑的格式来描述活动图：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">@startuml&#10;start&#10;:Hello world;&#10;:This is on defined on&#10;serval **line**;&#10;&#10;if (Graphviz installed?) then (yes)&#10;:process all;&#10;else (no)&#10;:process only;&#10;endif&#10;&#10;repeat&#10; :read data;&#10; :generate diagrams;&#10;repeat while (more data?)&#10;&#10;end&#10;@enduml</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">@startuml&#10;start&#10;:&#24314;&#31435;&#22235;&#20010;&#30417;&#25511;&#32447;&#31243;;&#10;repeat&#10;     :sleep 1&#31186;;&#10;     :&#21516;&#27493;&#37197;&#32622;&#20449;&#24687;;&#10;repeat while()&#10;@enduml</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">@startuml&#10;node &#8220;&#30417;&#25511;&#32447;&#31243;&#32452;&#8221; {&#10;     [CPU&#20351;&#29992;&#29575;&#30417;&#25511;&#32447;&#31243;]&#10;     [&#20869;&#23384;&#20351;&#29992;&#29575;&#30417;&#25511;&#32447;&#31243;]&#10;     [&#36830;&#25509;&#25968;&#30417;&#25511;&#32447;&#31243;]&#10;     [&#25509;&#21475;&#27969;&#37327;&#30417;&#25511;&#32447;&#31243;]&#10;}&#10;&#10;[&#37197;&#32622;&#31649;&#29702;&#32447;&#31243;] ..&#62; [CPU&#20351;&#29992;&#29575;&#30417;&#25511;&#32447;&#31243;]&#10;[&#37197;&#32622;&#31649;&#29702;&#32447;&#31243;] ..&#62; [&#20869;&#23384;&#20351;&#29992;&#29575;&#30417;&#25511;&#32447;&#31243;]&#10;[&#37197;&#32622;&#31649;&#29702;&#32447;&#31243;] ..&#62; [&#36830;&#25509;&#25968;&#30417;&#25511;&#32447;&#31243;]&#10;[&#37197;&#32622;&#31649;&#29702;&#32447;&#31243;] ..&#62; [&#25509;&#21475;&#27969;&#37327;&#30417;&#25511;&#32447;&#31243;]&#10;@enduml</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2-4\" class=\"outline-3\">\n<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> 简单时序图绘制</h3>\n<div class=\"outline-text-3\" id=\"text-2-4\">\n<p>\n先绘制一下TCP三次握手的时序图，\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">@startuml&#10;note over &#23458;&#25143;, &#26381;&#21153;&#22120;&#10;CLOSED&#10;end note&#10;&#10;&#23458;&#25143; -&#62; &#26381;&#21153;&#22120;: SYN J&#10;note left: &#20027;&#21160;&#25171;&#24320; SYN_SENT&#10;...&#10;&#10;&#23458;&#25143; &#60;- &#26381;&#21153;&#22120;: SYN K, ack J+1&#10;note right: SYN_RCVD&#10;...&#10;&#10;&#23458;&#25143; -&#62; &#26381;&#21153;&#22120;: ack K+1&#10;note left: ESTABLISHED&#10;...&#10;&#10;note over &#23458;&#25143;, &#26381;&#21153;&#22120;&#10;ESTABLISHED&#10;end note&#10;&#10;&#10;@enduml</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n嘛，虽然绘图语言很简单，但效果好像有点欠缺，比如线不能倾斜，其他的都好。偷懒的时候可以使用。\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 描述数据结构</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\n其实这原本属于Graphviz的功能，但PlantUML既然也支持，就不再分开讲了。不过它使用的依旧是和PlantUML不同的一个描述语言：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">@startpan</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 描述算法</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">start px&#10;:&#25509;&#25910;&#21253;;&#10;&#10;if (&#21253;&#25152;&#23646;&#31574;&#30053;&#28304;ip&#30340;&#26159;&#21542;&#22312;&#40657;&#21517;&#21333;&#20013;&#65311;) then(&#26159;)&#10;   :&#21253;&#34987;&#20002;&#24323;;&#10;else (&#21542;)&#10;   :&#21253;&#34987;&#25509;&#25910;&#65292;&#10;   &#26356;&#26032;&#24182;&#21457;&#36830;&#25509;&#25968;;&#10;   if (&#24403;&#21069;&#24182;&#21457;&#36830;&#25509;&#25968;&#36798;&#21040;&#38408;&#20540;) then(&#26159;)&#10;      :&#22312;&#40657;&#21517;&#21333;&#24314;&#31435;&#30456;&#24212;&#31574;&#30053;&#28304;ip&#30340;&#30340;&#34920;&#39033;;&#10;   else(&#21542;)&#10;   endif&#10;endif&#10;&#10;end</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n先看包的处理过程，看看鼠绘汉化\n</p>\n\n<div class=\"figure\">\n<p><img src=\"plantuml学习笔记/algo.png\" alt=\"algo.png\">\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 让Emacs的org-mode支持plantuml</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<p>\n先在配置文件中加入如下配置。\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">org-babel-do-load-languages</span></span><br><span class=\"line\"> <span class=\"quoted\">'org-babel-load-languages</span></span><br><span class=\"line\"> <span class=\"quoted\">'(;; other Babel languages</span><br><span class=\"line\">   (plantuml . <span class=\"literal\">t</span>))</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">setq</span> org-plantuml-jar-path</span><br><span class=\"line\">      <span class=\"list\">(<span class=\"keyword\">expand-file-name</span> <span class=\"string\">\"/path/to/plantuml.jar\"</span>)</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n<p>\n之后还需要安装两个插件：\n</p>\n<ol class=\"org-ol\">\n<li>plantuml-mode\n</li>\n<li>plantuml-flycheck\n</li>\n</ol>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<ul class=\"org-ul\">\n<li><a href=\"http://www.cnblogs.com/yangwen0228/p/6825560.html\">在Emacs中使用plantuml画UML图</a>\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
