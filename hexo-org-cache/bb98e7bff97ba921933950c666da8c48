{"md5":"5fa8df0ee54d4fe0b63f9dc1bf80b429","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nTCP/IP是一个四层的协议系统。主要定义四层，目前已经成为事实上的标准。分成了链路层、网络层、传输层和应用层。应用层协议可以不是二进制协议，如HTTP，它是进程间通信的约定。而其他协议都是二进制协议，说明它们要求高效通信。现代的计算机网络一般分成了五层，不过物理层主要涉及到了电路和很多专业的知识，所以没必要学习。实际上这个这个分层有很大的历史和政治原因。所以对于很多东西不能把它当作理所当然的设计。类似链路层和网络层，当作功能上的不同集合就可以了，每一层都向上一层提供服务。比如在802.11网络中链路层就是必要的，如何达成一个IP包的发送就是很大的问题。这些细节要对网络层隐藏。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> 网关</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n网关是连接两个网络的设备，至于具体是路由器还是防火墙就不重要了，一旦终端发现目的IP不再同一个网段内，就会把包发往网关，一般如果要连接因特网，网关会把包的IP地址修改为因特网上的IP。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 免费arp</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\n目的ip地址是自身的ip地址，即时获取自身mac地址的arp报文，但是依然会广播。正常情况下由自己响应arp报文，从而得到接口的mac地址，而如果网络中设置了重复的ip地址也可以在发送免费arp是察觉到。双机热备时，使用的是虚拟mac地址，但一台主设备出问题时要做的是概念交换机发送\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> ARP表</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\nARP表用于存储IP地址到MAC地址的映射，其项分成了设备动态学习到的 <b>动态ARP表项</b> 和手动添加的 <b>静态ARP表项</b> 。先查看目前本机的ARP表：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip neighbor</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n得到的表项的其中一个是：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">192.168</span>.<span class=\"number\">106.50</span> dev enp0s25 lladdr <span class=\"number\">00</span>:<span class=\"number\">13</span>:<span class=\"number\">32</span>:<span class=\"number\">05</span>:<span class=\"number\">00</span>:c4 STALE</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n可以看到除了ip和mac地址意外还有接口信息，这个设置防火墙是一样，其他的之后说。。。\narp请求报文的格式\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> ICMP（Internet Control Message Protocol）和ping</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n</div><div id=\"outline-container-sec-5-1\" class=\"outline-3\">\n<h3 id=\"sec-5-1\"><span class=\"section-number-3\">5.1</span> 前言</h3>\n<div class=\"outline-text-3\" id=\"text-5-1\">\n<p>\nping程序会发送ICMP回显请求给目标主机，等待目标主机发送回显应答报文。当然现在的网关也可以设置对这类报文不回显。并不存在ping服务器\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-5-2\" class=\"outline-3\">\n<h3 id=\"sec-5-2\"><span class=\"section-number-3\">5.2</span> ping回应</h3>\n<div class=\"outline-text-3\" id=\"text-5-2\">\n<p>\n在自己的电脑ping一台主机后得到：\n<img src=\"./网络基础结构/ping_output.png\" alt=\"ping_output.png\">\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> IP选路</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<p>\nIP选路的关键数据结构是路由表，Archlinux查看路由表的方法是：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip route</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n<div id=\"outline-container-sec-6-1\" class=\"outline-3\">\n<h3 id=\"sec-6-1\"><span class=\"section-number-3\">6.1</span> 选路机制和选路策略</h3>\n<div class=\"outline-text-3\" id=\"text-6-1\">\n<p>\n选路机制是指搜索路由表并决定向哪个网络接口发送数据。路由机制是指\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> IP</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<p>\nPC上一般有路由守护程序，其维护的基本的数据结构是路由表\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> DNS</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<p>\nDNS是应用层协议，Linux提供了相应的函数来使用该服务。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-9\" class=\"outline-2\">\n<h2 id=\"sec-9\"><span class=\"section-number-2\">9</span> TCP</h2>\n<div class=\"outline-text-2\" id=\"text-9\">\n</div><div id=\"outline-container-sec-9-1\" class=\"outline-3\">\n<h3 id=\"sec-9-1\"><span class=\"section-number-3\">9.1</span> 第一次握手的序列号为什么不是固定的</h3>\n<div class=\"outline-text-3\" id=\"text-9-1\">\n<p>\n为了避免因数据包被延迟的分组之后被传送从而干扰之后的新的连接的通信。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-10\" class=\"outline-2\">\n<h2 id=\"sec-10\"><span class=\"section-number-2\">10</span> sk<sub>buf解析</sub></h2>\n<div class=\"outline-text-2\" id=\"text-10\">\n</div><div id=\"outline-container-sec-10-1\" class=\"outline-3\">\n<h3 id=\"sec-10-1\"><span class=\"section-number-3\">10.1</span> sk<sub>buff</sub></h3>\n<div class=\"outline-text-3\" id=\"text-10-1\">\n<p>\nsk<sub>buff是Linux网络代码中最重要的数据结构，它用于处理报文。然而为了降低开销，sk</sub><sub>buff十分复杂。首先，网络需要处理的报文中有很多都是有联系的，为了在结构中表现这种联系，Linux使用双向链表结构来组织相关的报文：</sub>\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> sk_buff {</span><br><span class=\"line\">    <span class=\"comment\">// 必须在开头</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> sk_buff         *next;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> sk_buff         *prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-11\" class=\"outline-2\">\n<h2 id=\"sec-11\"><span class=\"section-number-2\">11</span> 网卡接收和处理包</h2>\n<div class=\"outline-text-2\" id=\"text-11\">\n</div><div id=\"outline-container-sec-11-1\" class=\"outline-3\">\n<h3 id=\"sec-11-1\"><span class=\"section-number-3\">11.1</span> 网卡受到正确MAC硬件地址的包之后的处理过程</h3>\n<div class=\"outline-text-3\" id=\"text-11-1\">\n<ol class=\"org-ol\">\n<li>把包解码后（一般对用户隐藏）存储到设备的一个缓冲区。\n</li>\n<li>网卡产生一个中断\n</li>\n<li>中断处理程序为包分配和初始化一个新的套接字缓冲区（sk<sub>buff）</sub>\n</li>\n<li>中断处理程序把设备内存储的包拷贝到套接字缓冲区中\n</li>\n<li>中断处理程序调用函数把确定包的协议\n</li>\n<li>中断处理程序调用netif<sub>rx</sub>()函数通知Linux网络代码新的套接字已经到达，可以进行处理了\n</li>\n</ol>\n<p>\n<code>netif_rx()</code> 是网络层接收代码的入口点，对于从网络设备已经接收且等待各种协议栈层处理的包，内核使用每个CPU队列，把新的包加入到cpu的队列中。并调用 <code>cpu_raise_softirq()</code> 安排 <code>NET_RX_SOFTIRQ</code> 软中断的激活。该中断由 <code>net_rx_action()</code> 函数是实现。其执行步骤如下：\n</p>\n<ol class=\"org-ol\">\n<li>从队列提取一个包，如果队列为空，则函数终止。\n</li>\n<li>确定在数据链路层中的网络层协议的编号。\n</li>\n<li>调用网络层协议的适当函数\n</li>\n</ol>\n<p>\nIP协议的函数叫做 <code>ip_rcv()</code> ，该函数执行下列操作：\n</p>\n<ol class=\"org-ol\">\n<li>检查包和函数的校验和，如果损坏就丢弃它。\n</li>\n<li>调用 <code>ip_route_input()</code> \n</li>\n</ol>\n\n<p>\n<code>udp_rcv()</code> 本质进行如下操作：\n</p>\n<ol class=\"org-ol\">\n<li>调用 <code>udp_v4_lookup()</code> 查找\n</li>\n</ol>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-12\" class=\"outline-2\">\n<h2 id=\"sec-12\"><span class=\"section-number-2\">12</span> 实验</h2>\n<div class=\"outline-text-2\" id=\"text-12\">\n</div><div id=\"outline-container-sec-12-1\" class=\"outline-3\">\n<h3 id=\"sec-12-1\"><span class=\"section-number-3\">12.1</span> 访问百度首页</h3>\n</div>\n</div>\n<div id=\"outline-container-sec-13\" class=\"outline-2\">\n<h2 id=\"sec-13\"><span class=\"section-number-2\">13</span> 网络安全</h2>\n<div class=\"outline-text-2\" id=\"text-13\">\n</div><div id=\"outline-container-sec-13-1\" class=\"outline-3\">\n<h3 id=\"sec-13-1\"><span class=\"section-number-3\">13.1</span> ARP欺骗</h3>\n</div>\n</div>\n\n<div id=\"outline-container-sec-14\" class=\"outline-2\">\n<h2 id=\"sec-14\"><span class=\"section-number-2\">14</span> 零散</h2>\n<div class=\"outline-text-2\" id=\"text-14\">\n<ul class=\"org-ul\">\n<li>设备判断一个ip是否和本机ip是同一个网段的逻辑是这样的，对本机的ip和目标ip用本机掩码做并运算。如果发现不是同一个子网络，就要通过网关（路由器）转发。\n</li>\n<li>网关是一个概念，指的是连接两个不同网络的设备。路由器可以作为网关，三层交换机也可以作为网关。\n</li>\n<li>导致概念混乱的东西是NAT，对于外网而言每个。\n</li>\n<li>NAT默认由路由器或交换机提供，没有经过NAT的情况下默认ip包的ip地址是不变的。\n</li>\n<li>为什么觉得MAC地址跟废的一样。\n</li>\n<li>局域网ip地址冲突时，冲突的两台电脑不能上，偶尔出现一台能上一台不能上，如果ip地址和服务器或交换机等网络设备冲突时，就会造成整个网络的瘫痪。一般ip地址冲突的。\n</li>\n<li>ARP协议重其格式上看是属于链路层的，但其包含ip信息，所以也可以认为是网络层的。\n</li>\n<li>MAC地址在路由过程中也可以完全不起作用。\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-14-1\" class=\"outline-3\">\n<h3 id=\"sec-14-1\"><span class=\"section-number-3\">14.1</span> <span class=\"todo TODO\">TODO</span> ARP是在哪个时机发送的，为什么会是ICMP回显的时间加大？</h3>\n<div class=\"outline-text-3\" id=\"text-14-1\">\n<p>\n目前的推测是，arp是在链路层之上，在数据到达链路层之前协议栈是不知道缺少MAC地址的，所以此时就要发送arp报文了。不过数据包括时间是不变的，直到被处理。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-15\" class=\"outline-2\">\n<h2 id=\"sec-15\"><span class=\"section-number-2\">15</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-15\">\n<ul class=\"org-ul\">\n<li><a href=\"http://www.jianshu.com/p/d2cc9d24aa9e\">http://www.jianshu.com/p/d2cc9d24aa9e</a>\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
