{"md5":"43348801d30969e6a8f68542c7cdfcd2","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n本文主要包含三个部分，Apache Guacamole这个程序\n</p>\n<ul class=\"org-ul\">\n<li>Guacamole介绍\n</li>\n<li>Guacamole协议简介\n</li>\n<li>审计相关的功能和扩展\n</li>\n<li>Guacamole服务器模型\n</li>\n<li>部署方面的扩展\n</li>\n<li>下一步，如X协议\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> Apache Guacamole简介</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n<p>\n首先guacamole是牛油果酱的意思，这个软件主要由几个部分组成：\n</p>\n<ul class=\"org-ul\">\n<li>Guacamole协议\n</li>\n<li>guacd\n</li>\n<li>Web应用程序\n</li>\n<li>Guacamole客户端\n</li>\n</ul>\n\n<p>\n由于目前Guacamole使用Java编写的Web服务器，所以相应的Web应用程序也使用Java来编写。另一方面Guacamole客户端使用JavaScript来编写。\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"./Guacamole开发阶段分析/guaca.png\" alt=\"guaca.png\">\n</p>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> Guacamole协议简介</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<p>\nGuacamole是VNC和RDP这两个协议的超集，也就是说可以支持这两个图形协议所不能支持的功能。像VNC原本只是一个比较单纯的图形协议，并不支持音频，但如果使用Guacamole并做好相关配置，就可以让VNC服务器提供音频。除此之外，还有文件传输的功能也可以有Guacamole直接提供。\n</p>\n\n<p>\nGuacamole这个软件本身虽然不是堡垒机软件，但 <b>对于各种协议的处理非常完善</b> 。对于单纯的一个远程桌面网关来说，其完成度已经非常高了。实际上，它实现图形、字符终端和文件传输协议的代理。对于如何完成这些代理，Guacamole自身就带有一套成熟的方案。文件传输功能比较有代表性的是虚拟驱动器功能（virtual Drive）。这个功能实际上是RDP协议支持的。Gucamole使用了SFTP来实现了文件传输。\n</p>\n\n<p>\nGuacamole协议主要包括了各种指令还有其暗含的模型，指令分成好几种，包括：\n</p>\n<ul class=\"org-ul\">\n<li>绘制指令\n</li>\n<li>流指令\n</li>\n<li>对象指令\n</li>\n<li>客户端握手指令\n</li>\n<li>服务器控制指令\n</li>\n<li>客户端事件\n</li>\n</ul>\n\n<p>\n由于支持的功能足够多，所以这个协议要理解本身也不容易，理解难度比RFB协议难一些，比RDP简单一些。了解一个图形协议其实从Guacamole协议入手算是比较好的了。\n</p>\n\n<p>\nGuacamole协议中图形以外的指令有这么几个：\n</p>\n<ul class=\"org-ul\">\n<li>audio\n</li>\n<li>clipboard\n</li>\n<li>file\n</li>\n<li>video\n</li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 审计相关的功能和扩展</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n审计功能一般依赖于用户操作历史，有时也可能需要对于某些用户操作进行限制。之所以比较中意Guacamole是因为它提供了一种统一的格式（Guacamole协议）来记录用户操作历史。在Guacamole中用户操作历史会被存储到文件中，格式自然还是原始的ASCII文本格式，这里我先截取一个片段：\n</p>\n\n<p>\n4.name,36.curt's X desktop (curt-VirtualBox:1);\n4.size,1.0,4.1024,3.768;\n4.size,2.-1,2.11,2.16;\n3.img,1.1,2.12,2.-1,9.image/png,1.0,1.0;\n4.blob,1.1,232.iVBORw0KGgoAAAANSUhEUgAAAAsAAAAQCAYAAADAvY&#x2026;;\n3.end,1.1;6.cursor,1.0,1.0,2.-1,1.0,1.0,2.11,2.16;\n4.size,2.-1,2.24,2.24;3.img,1.1,2.12,2.-1,9.image/png,1.0,1.0;\n4.blob,1.1,276.iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABmJLR0QA/wD/AP+gvaeT&#x2026;;\n3.end,1.1;6.cursor,1.7,1.4,2.-1,1.0,1.0,2.24,2.24;\n3.img,1.1,2.14,1.0,9.image/png,1.0,1.0;4.blob,1.1,8064.iVBORw0KG&#x2026;;\n</p>\n\n<p>\n这里面每条指令使用分号“；”来分隔，每个关键字或者参数前面都会加上实际内容的长度，像指令size，在Guacamole协议中，会被写成4.size，即任何关键字或者参数都使用都会有length.的前缀。这是典型的用空间来换时间的做法，Guacamole协议数据会在本地或者网络上传输的，这样做意味着更高的带宽占用，但对于协议解析其来说能降低一些开销，由于guacamole会传输大量的图片，所以使用这种方法能提升的效率会更多。\n</p>\n\n<p>\n再看看blob指令，这个指令用于传输base64编码的数据，可以看到上面，blob的的最后一部分内容是一个232字节的字符串，解码为png图像就是。\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"./Guacamole开发阶段分析/mouse.png\" alt=\"mouse.png\">\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4-1\" class=\"outline-3\">\n<h3 id=\"sec-4-1\"><span class=\"section-number-3\">4.1</span> 生成视频</h3>\n<div class=\"outline-text-3\" id=\"text-4-1\">\n<p>\nGuacamole项目中提供了一个生成录像的工具guacenc，可以把Gucamole协议的历史数据转换称为视频数据。视频是根据时间来选择显示的帧的，所以历史数据中会包含有时间的数据，这里面使用了sync指令来记录事件戳。所以转化称为视频的思路很简单，根据时间戳分配图像帧即可。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4-2\" class=\"outline-3\">\n<h3 id=\"sec-4-2\"><span class=\"section-number-3\">4.2</span> 操作索引</h3>\n<div class=\"outline-text-3\" id=\"text-4-2\">\n<p>\n由于历史记录只是为了生成图像，所以并不会记录所有指令，这样会有很大一部分信息不会被记录，包括用户的具体操作，比如用户在播放视频的时候是按了键盘暂停还是鼠标暂停我们单从回放录像上是看不出来的。为了能够对具体操作进行索引，比如鼠标事件或者键盘事件要分开，就需要记录更加细致的信息，或者说用户的输入都到被记录都历史中。这样就可以根据操作进行检索了。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-4-3\" class=\"outline-3\">\n<h3 id=\"sec-4-3\"><span class=\"section-number-3\">4.3</span> 实时监控</h3>\n<div class=\"outline-text-3\" id=\"text-4-3\">\n<p>\nVNC本质上可以做到同时在即可屏幕上显示，并同时接受用户的输入，所以实时监控对于VNC天然支持，而对于RDP则需要使用其他方法。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> guacd的进程线程模型</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<p>\nguacd是Guacamole这个软件的核心，是作为Gucamole协议和VNC、RDP、TELNET、SSH的网关程序，也是用来处理各种协议和Guacmole协议的转换。进程模型可以直接同下图对照：\n</p>\n\n\n<div class=\"figure\">\n<p><img src=\"./Guacamole开发阶段分析/guaca.png\" alt=\"guaca.png\">\n</p>\n</div>\n\n<p>\n该图可以看作分别建立过RDP连接、VNC以及某种协议之后的进程模型，guacd会为每个协议生成一个后台进程，该进程和用于管理连接，同时每个协议进程针对一个连接会分配两个线程来管理线程，一个用于处理用户额输入，一个用于接受服务器的输出。由于所有数据都要经过guacd，所以guacd也要为这个连接建立两个线程，也是一个用于处理用户额输入，一个用于接受服务器的输出。也就是说对于一个连接，guacd会为它打开四个线程。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 部署方面的扩展</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n<p>\n从上面的模型可以看出，大部分的开销都由guacd产生，而开销又主要是管理连接和压缩图像的。一旦有人使用远程桌面看视频，开销可以变得非常大，因为会有大量的压缩过程。\nguacd和guacamole client是通过TCP socket连接的，同时数据都是先通过guacd再通过guacd发送给VNC客户端。所以guacd和guacamole client完全可以不在同一台机器上。可以把guacd部署在多台机器上，再进行负载均衡，这样可以大大提升并发数。\nguacd可以看到作者其实提供了将guacd部署在多台机器的方式，如下：\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> 下一步</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<p>\n目前的问题主要有三个：\n</p>\n</div>\n<div id=\"outline-container-sec-7-1\" class=\"outline-3\">\n<h3 id=\"sec-7-1\"><span class=\"section-number-3\">7.1</span> 远程桌面网关</h3>\n<div class=\"outline-text-3\" id=\"text-7-1\">\n<p>\n考虑到Guacamole协议的清晰性，guacad对于各种协议细节的处理相对完全，从实现网关入手是比较高效的做法。\n</p>\n\n<p>\n由于采用JumperServer来作为原型，之后可能要花费大量精力来将其适配道JumperServer这个软件中，目前还不能确定方案，想到的大约有三种：\n</p>\n<ul class=\"org-ul\">\n<li>工作量最大的是完全将Guacamole client的代码重写成Python的代码。\n</li>\n<li>直接使用反向代理，不对Guacamole的代码进行特殊处理。\n</li>\n<li>编写一个中间层来供Python Web应用进行调用。\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-7-2\" class=\"outline-3\">\n<h3 id=\"sec-7-2\"><span class=\"section-number-3\">7.2</span> 直接代理</h3>\n<div class=\"outline-text-3\" id=\"text-7-2\">\n<p>\n远程桌面协议的直接代理的一大难点是对于审计的支持，如何同Guacamole相协调的问题，目前在考虑的方案有两个：\n</p>\n<ol class=\"org-ol\">\n<li>在xrdp的基础上增加导出Guacamole记录文件的功能和阻断功能。\n</li>\n<li>编写RDP服务器程序和VNC服务器程序和guacd进行通信。\n</li>\n<li>修改guacd的逻辑，建立多建立一条直接转发的通道，但容易破坏原有代码的结构。\n</li>\n</ol>\n</div>\n</div>\n<div id=\"outline-container-sec-7-3\" class=\"outline-3\">\n<h3 id=\"sec-7-3\"><span class=\"section-number-3\">7.3</span> X协议的支持</h3>\n<div class=\"outline-text-3\" id=\"text-7-3\">\n<p>\nX协议的支持优先级比较低，Web上支持X协议意义不大，首先X server的开销会比较大。其次就是难以纳入审计的那套框架中，需要做大量的处理。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<ul class=\"org-ul\">\n<li><a href=\"http://guacamole.apache.org/doc/gug/\">http://guacamole.apache.org/doc/gug/</a>\n</li>\n<li><a href=\"https://sourceforge.net/p/guacamole/discussion/1110834/thread/bb801fd6/\">https://sourceforge.net/p/guacamole/discussion/1110834/thread/bb801fd6/</a>   \n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
