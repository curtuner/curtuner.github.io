{"md5":"8d0aedc8bc385e1765538fd04f5c0420","content":"\n\n\n<div id=\"outline-container-org2e3032e\" class=\"outline-2\">\n<h2 id=\"org2e3032e\"><span class=\"section-number-2\">1</span> 基本知识</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-org558fef2\" class=\"outline-3\">\n<h3 id=\"org558fef2\"><span class=\"section-number-3\">1.1</span> <span class=\"todo TODO\">TODO</span> 概述</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n在讲内核之前，首先要分清操作系统和内核之间的关系。一般的操作系统教科书所讲的操作系统往往指的是内核，与我们正常所认为的操作系统不同。为了避免混淆，我使用一般点的概念，即认为操作系统包括内核以及提供基础服务的系统组件，而内核就是操作系统的核心模块。如何理解内核？在我看来Tanenbaum的解读方式最好，内核提供两种服务：一种是作为资源管理器，一种是提供一个虚拟机。前者面向系统软件程序员（如驱动和内核开发），后者面向应用软件程序员。我认为最重要的还是提供了一个虚拟机降低了编程的复杂度这一方面，虽然系统软件领域还还是必不可少，但大展拳脚的机会相对比较少。所以看待对于一般的程序员如果不是特别感兴趣，只要自顶向下来看待内核即可。实际上，很多Java程序员也只需要对Java虚拟机有足够理解即可。这也是虚拟机存在的意义，让我们不必了解太多不必要的细节。尽管如此，我们学习操作系统，大部分时间还是要花在内核的资源管理上，否则也就没必要学习内核知识了。\n对于一般程序员而已，虚拟机和物理机没有本质的区别。我统一把它们看作虚拟机，那么内核的实现就是在虚拟机上构建另一个虚拟机的过程。这里再引入一个概念，体系结构，由接口规范和接口操纵的资源的逻辑行为来描述。而虚拟机提供一个体系结构。这样我们的目标就变成了在一个体系结构上实现另一个“等价的”体系结构。对于内核而言，一般是在指令集体系结构（ISA）上实现。所以编写内核的模块时最先要理解的是ISA提供相应的接口机器操纵资源的逻辑。\n内核主要的模块包括内存管理、进程、文件系统。。。\n</p>\n</div>\n</div>\n<div id=\"outline-container-org3534ff6\" class=\"outline-3\">\n<h3 id=\"org3534ff6\"><span class=\"section-number-3\">1.2</span> 一个可用操作系统包括什么</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\n就个人经历来说，我觉得只讲内核还是\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgb9f0624\" class=\"outline-3\">\n<h3 id=\"orgb9f0624\"><span class=\"section-number-3\">1.3</span> 内核模块</h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n<p>\n可在运行时加入到内核中的代码称为“模块（module）”\n</p>\n</div>\n</div>\n<div id=\"outline-container-org954c2c6\" class=\"outline-3\">\n<h3 id=\"org954c2c6\"><span class=\"section-number-3\">1.4</span> Linux设备的分类</h3>\n<div class=\"outline-text-3\" id=\"text-1-4\">\n</div><div id=\"outline-container-orgb060f63\" class=\"outline-4\">\n<h4 id=\"orgb060f63\"><span class=\"section-number-4\">1.4.1</span> 字符设备</h4>\n<div class=\"outline-text-4\" id=\"text-1-4-1\">\n<p>\n能够像字节流（类似文件）一样被访问的设备。字符设备和文件的不同在于大多字符设备只能顺序访问数据通道\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgec3c69c\" class=\"outline-4\">\n<h4 id=\"orgec3c69c\"><span class=\"section-number-4\">1.4.2</span> 块设备</h4>\n<div class=\"outline-text-4\" id=\"text-1-4-2\">\n<p>\n每次智能传输一个或多个完整的块\n</p>\n</div>\n</div>\n<div id=\"outline-container-org9d5dc44\" class=\"outline-4\">\n<h4 id=\"org9d5dc44\"><span class=\"section-number-4\">1.4.3</span> 网络接口</h4>\n<div class=\"outline-text-4\" id=\"text-1-4-3\">\n<p>\n一个能够和其他主机交换数据的设备，负责接受和发送数据包。在文件系统没有对应的节点\n</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgdfb5434\" class=\"outline-2\">\n<h2 id=\"orgdfb5434\"><span class=\"section-number-2\">2</span> FAQ</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-org2d83ce2\" class=\"outline-3\">\n<h3 id=\"org2d83ce2\"><span class=\"section-number-3\">2.1</span> 文件系统节点是什么？</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n文件系统可以表示成一棵树，一般内部节点是目录，叶节点是文件\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgd0a7f7e\" class=\"outline-3\">\n<h3 id=\"orgd0a7f7e\"><span class=\"section-number-3\">2.2</span> .ko文件是什么类型的文件？</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\n是Linux内核模块文件，一般是驱动程序\n</p>\n</div>\n</div>\n</div>\n\nLast Updated 2017-03-28 二 01:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.2.1 (<a href=\"http://orgmode.org\">Org</a> mode 9.0.5)\n"}
