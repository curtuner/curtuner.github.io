{"md5":"26ee5d0b7a2f07e9e18e316de5705f29","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> GHashTable</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><span class=\"section-number-3\">1.1</span> GHashTable的内部定义</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n这里的GHashTable没有私有数据，外部无法获知其状态，只能通过接口来调用。对应面向对象也就是数据的封装，可以看作是一个没有共有数据的类。对于库编写者来说，了解内部实现是必要的：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> _GHashTable</span><br><span class=\"line\">{</span><br><span class=\"line\">  gint             size; <span class=\"comment\">// Hash表的容量</span></span><br><span class=\"line\">  gint             mod; </span><br><span class=\"line\">  guint            mask;</span><br><span class=\"line\">  gint             nnodes; <span class=\"comment\">// 但前插入节点的数目</span></span><br><span class=\"line\">  gint             noccupied;  <span class=\"comment\">/* nnodes + tombstones */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  gpointer        *keys;</span><br><span class=\"line\">  guint           *hashes;</span><br><span class=\"line\">  gpointer        *values;</span><br><span class=\"line\"></span><br><span class=\"line\">  GHashFunc        hash_func;</span><br><span class=\"line\">  GEqualFunc       key_equal_func;</span><br><span class=\"line\">  gint             ref_count;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">ifndef</span> G_DISABLE_ASSERT</span></span><br><span class=\"line\">  <span class=\"comment\">/*</span><br><span class=\"line\">   * Tracks the structure of the hash table, not its contents: is only</span><br><span class=\"line\">   * incremented when a node is added or removed (is not incremented</span><br><span class=\"line\">   * when the key or data of a node is modified).</span><br><span class=\"line\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span>              version;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">  GDestroyNotify   key_destroy_func;</span><br><span class=\"line\">  GDestroyNotify   value_destroy_func;</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n可以看到作为一个通用的Hash表，key和value都只能是指针。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><span class=\"section-number-3\">1.2</span> 初始化</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\nglib使用 <code>g_hash_table_new_full</code> 来初始化，除此之外，还提供了接口更为简单的包装函数 <code>g_hash_table_new</code> \n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">GHashTable *</span><br><span class=\"line\"><span class=\"title\">g_hash_table_new_full</span> <span class=\"params\">(GHashFunc      hash_func,</span><br><span class=\"line\">\t\t       GEqualFunc     key_equal_func,</span><br><span class=\"line\">\t\t       GDestroyNotify key_destroy_func,</span><br><span class=\"line\">\t\t       GDestroyNotify value_destroy_func)</span></span><br><span class=\"line\"></span>{</span><br><span class=\"line\">  GHashTable *hash_table;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash_table = g_slice_new (GHashTable);</span><br><span class=\"line\">  g_hash_table_set_shift (hash_table, HASH_TABLE_MIN_SHIFT);</span><br><span class=\"line\">  hash_table-&gt;nnodes             = <span class=\"number\">0</span>;</span><br><span class=\"line\">  hash_table-&gt;noccupied          = <span class=\"number\">0</span>;</span><br><span class=\"line\">  hash_table-&gt;hash_func          = hash_func ? hash_func : g_direct_hash;</span><br><span class=\"line\">  hash_table-&gt;key_equal_func     = key_equal_func;</span><br><span class=\"line\">  hash_table-&gt;ref_count          = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">ifndef</span> G_DISABLE_ASSERT</span></span><br><span class=\"line\">  hash_table-&gt;version            = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"preprocessor\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">  hash_table-&gt;key_destroy_func   = key_destroy_func;</span><br><span class=\"line\">  hash_table-&gt;value_destroy_func = value_destroy_func;</span><br><span class=\"line\">  hash_table-&gt;keys               = g_new0 (gpointer, hash_table-&gt;size);</span><br><span class=\"line\">  hash_table-&gt;values             = hash_table-&gt;keys;</span><br><span class=\"line\">  hash_table-&gt;hashes             = g_new0 (guint, hash_table-&gt;size);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hash_table;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n可以看到keys和values初始化为同一个，\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\"><span class=\"section-number-3\">1.3</span> 查询</h3>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> garray</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> 前言</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\nglib的提供了可变长的数组，这就意味着它会类似于STL的vector。虽说如此，但依旧值得一看。值得一提的是。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> 零散</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<ul class=\"org-ul\">\n<li>提取共有部分作为单一对象使用，通用指针，都是可行的技巧，例如PyObject, GArray都可以看作基类，在实际使用过程其实用的是作为指针类型。\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> 零散的宏</h3>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> <span class=\"todo TODO\">TODO</span> 问题 <code>[%]</code></h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<ul class=\"org-ul\">\n<li><code>[&#xa0;]</code> GHashTable中的mod和mask有何不同？\n</li>\n</ul>\n</div>\n</div>\n\nLast Updated 2018-03-04 日 03:01.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
