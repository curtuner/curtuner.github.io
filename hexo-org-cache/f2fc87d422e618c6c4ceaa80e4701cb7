{"md5":"49306af9c3173df4f4865d0641265737","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><span class=\"section-number-2\">1</span> 前言</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n本文只是一点学习的记录，对RDP协议数据的解析时实现RDP监控和审计的基础。本文的重点对于RDP协议的介绍，这是了解RDP代理功能和堡垒机功能的基础。另一个重点是对于xrdp代码的的简要分析，着重和RDP协议的概念进行对照。最后是个人对于堡垒机功能的开发的想法。\n最后对比了xrdp和rdpproxy的实现。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><span class=\"section-number-2\">2</span> RDP协议简单分析</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><span class=\"section-number-3\">2.1</span> RDP概述</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\nRDP协议（Remote Desktop Protocol），是微软开发的私有协议<sup><a id=\"fnr.1\" name=\"fnr.1\" class=\"footref\" href=\"#fn.1\">1</a></sup>，让用户可以通过网络连接上远程的主机，并提供相应的图形界面。使用的时候，要求远程主机启动了RDP服务器，而本地使用RDP客户端连接。RDP默认会监听本机UDP和TCP端口3389<sup><a id=\"fnr.2\" name=\"fnr.2\" class=\"footref\" href=\"#fn.2\">2</a></sup>。目前大多数主流的操作系统都有RDP客户端软件，而RDP服务器软件少一点，但是Unix和OS X下也是有的。目前RDP协议已经出到10.0版<sup><a id=\"fnr.3\" name=\"fnr.3\" class=\"footref\" href=\"#fn.3\">3</a></sup>了。值得一提的是早期微软并不公开RDP协议，所以可以看到网络上一些早期的对RDP协议的研究都是破解的结果。目前连接远程Windows主机一般使用RDP来实现，所以如果堡垒机管理的机器中包括Windows主机，就有必要实现RDP代理功能。相对的，Linux虽然目前也可以运行RDP服务器，但是Linux的图形界面一直不是很稳定（这几年更是处于从X协议转向Wayland的过程，而Wayland暂时不支持RDP），所以对于Linux来说支持RDP倒不是很要紧。\n接下来会简要介绍RDP客户端的实现\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><span class=\"section-number-3\">2.2</span> RDP协议栈和实现分析</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n</div><div id=\"outline-container-sec-2-2-1\" class=\"outline-4\">\n<h4 id=\"sec-2-2-1\"><span class=\"section-number-4\">2.2.1</span> RDP协议层次概述</h4>\n<div class=\"outline-text-4\" id=\"text-2-2-1\">\n<p>\nRDP协议是建立在TCP协议之上的，和其他网络协议一样，RDP协议也采用分层的结构。其层次结构如下图：\n<img src=\"./rdp代理概述/rdp.png\" alt=\"rdp.png\">\n可以看到由上到下依次是：\n</p>\n<ol class=\"org-ol\">\n<li>功能数据层（RDP层）\n</li>\n<li>加密解密层（SEC层）\n</li>\n<li>虚拟通道层（MCS层）\n</li>\n<li>ISO数据层（ISO层）\n</li>\n<li>TCP层\n</li>\n</ol>\n<p>\n 这个结构暗示了RDP软件需要实现协议栈<sup><a id=\"fnr.3.100\" name=\"fnr.3.100\" class=\"footref\" href=\"#fn.3\">3</a></sup>的来处理RDP协议的数据，事实也是如此。\n在理解RDP协议栈前可以先看一下xrdp源码中用于管理RDP协议的数据包的结构体定义：\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> stream</span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *end;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *data;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pad0;</span><br><span class=\"line\">    <span class=\"comment\">/* offsets of various headers */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *iso_hdr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *mcs_hdr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *sec_hdr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *rdp_hdr;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *channel_hdr;</span><br><span class=\"line\">    <span class=\"comment\">/* other */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *next_packet;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> stream *next;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *source;</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n<p>\n我们可以看到iso_hdr、mcs_hdr这些带有hdr的字段，它们的名字很明显地说明它们是指向数据包的相应协议层次的层头，如iso_hdr就是指向数据包中iso层的header，\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2-2\" class=\"outline-4\">\n<h4 id=\"sec-2-2-2\"><span class=\"section-number-4\">2.2.2</span> 协议数据格式简述</h4>\n<div class=\"outline-text-4\" id=\"text-2-2-2\">\n<p>\n从以上的图可以看到了RDP协议的基本层次，和标准的TCP/IP协议栈一样，在传输RDP数据包时，被一层会对来自上层的数据进行包装，由于RDP协议层次从下到上依次是ISO层、MCS层、SEC层、RDP层，RDP数据包实际上是由TCP数据依次封装上ISO层数据头、MCS数据头、SEC数据头、RDP数据头的。所以需要对每层的封装数据进行简要的分析。\n</p>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-2-3\" class=\"outline-3\">\n<h3 id=\"sec-2-3\"><span class=\"section-number-3\">2.3</span> RDP连接保持状态的通信</h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n<p>\n完成RDP协议连接初始化后，进入协议保持阶段。客户端会向服务器发送：\n</p>\n<ol class=\"org-ol\">\n<li>输入数据包。\n</li>\n<li>键盘状态在数据包。\n</li>\n</ol>\n<p>\n服务器向客户端发送响应：\n</p>\n<ol class=\"org-ol\">\n<li>服务端图形更新数据包。\n</li>\n<li>服务端鼠标更新数据包。\n</li>\n<li>服务端播放声音数据包。\n</li>\n</ol>\n</div>\n</div>\n<div id=\"outline-container-sec-2-4\" class=\"outline-3\">\n<h3 id=\"sec-2-4\"><span class=\"section-number-3\">2.4</span> RDP协议图形命令分析</h3>\n<div class=\"outline-text-3\" id=\"text-2-4\">\n</div><div id=\"outline-container-sec-2-4-1\" class=\"outline-4\">\n<h4 id=\"sec-2-4-1\"><span class=\"section-number-4\">2.4.1</span> 位图</h4>\n<div class=\"outline-text-4\" id=\"text-2-4-1\">\n<p>\n我们使用RDP协议提供的功能时，最直观的就是它的图片\nRDP客户端使用图形命令来绘制图形，图形命令大体上分成两类：\n</p>\n<ol class=\"org-ol\">\n<li>第一类图形命令（PDO, Primary Drawing Order）\n</li>\n<li>第二类图形命令（SDO, Secondary Drawing Order）\n</li>\n</ol>\n<p>\n两者的区别在于前者能够被Windows GDI命令直接调用并绘制到屏幕上，而后者是缓冲的数据。可以根据两者的关系对它们进行分类：\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-4-2\" class=\"outline-4\">\n<h4 id=\"sec-2-4-2\"><span class=\"section-number-4\">2.4.2</span> RECT命令</h4>\n<div class=\"outline-text-4\" id=\"text-2-4-2\">\n<p>\nRECT时RDP绘图程序最常用的命令之一，这个命令会根据左上角的坐标、矩形的宽度，高度以及矩形的颜色让客户端在桌面上绘制该矩形。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-4-3\" class=\"outline-4\">\n<h4 id=\"sec-2-4-3\"><span class=\"section-number-4\">2.4.3</span> RAW BITMAP命令</h4>\n<div class=\"outline-text-4\" id=\"text-2-4-3\">\n<p>\n这个命令是绘制位图的命令。位图命令不断更新，从RAW BITMAP命令到COMPRESSED BITMAP, COMPRESSED BITMAP V2 这些命令利用自己绘制的\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-2-4-4\" class=\"outline-4\">\n<h4 id=\"sec-2-4-4\"><span class=\"section-number-4\">2.4.4</span> MEMBLT命令</h4>\n<div class=\"outline-text-4\" id=\"text-2-4-4\">\n<p>\nMEMBLT命令的作用是将保存的RAW BITMAP绘制道屏幕上，属于PDO。从RDP服务端图形跟新数据包中可以提取memblt命令的参数：所画位图的索引号1:cache_id、所画位图\n</p>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><span class=\"section-number-2\">3</span> RDP代理</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n</div><div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><span class=\"section-number-3\">3.1</span> XRDP代理简述</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\nXRDP代理程序首先会启动一个监听线程在3389端口监听RDP连接请求，如果收到请求，就创建一个处理线程，由该线程将连接请求转发给RDP服务器，同时将RDP服务端的机器的应答信息转发给RDP客户端。这样就实现了对RDP会话的代理。\n··图。。\n可以看到，我们需要需要处理的数据就是会话过程中交换的数据，包括RDP服务器响应的图形命令以及RDP客户端的输入，如鼠标键盘的输入。堡垒机需要实现的功能主要还是要基于这些数据。那么从这里开始就可以考虑如何实现堡垒机的功能了。\n</p>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2\" class=\"outline-3\">\n<h3 id=\"sec-3-2\"><span class=\"section-number-3\">3.2</span> xrdp和rdpproxy的对比</h3>\n</div>\n</div>\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><span class=\"section-number-2\">4</span> 基于RDP代理的堡垒机功能实现</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n</div><div id=\"outline-container-sec-4-1\" class=\"outline-3\">\n<h3 id=\"sec-4-1\"><span class=\"section-number-3\">4.1</span> 堡垒机概述</h3>\n</div>\n<div id=\"outline-container-sec-4-2\" class=\"outline-3\">\n<h3 id=\"sec-4-2\"><span class=\"section-number-3\">4.2</span> RDP协议数据</h3>\n</div>\n<div id=\"outline-container-sec-4-3\" class=\"outline-3\">\n<h3 id=\"sec-4-3\"><span class=\"section-number-3\">4.3</span> 功能实现</h3>\n<div class=\"outline-text-3\" id=\"text-4-3\">\n</div><div id=\"outline-container-sec-4-3-1\" class=\"outline-4\">\n<h4 id=\"sec-4-3-1\"><span class=\"section-number-4\">4.3.1</span> </h4>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><span class=\"section-number-2\">5</span> 总结</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n</div><div id=\"outline-container-sec-5-1\" class=\"outline-3\">\n<h3 id=\"sec-5-1\"><span class=\"section-number-3\">5.1</span> 个人想法</h3>\n<div class=\"outline-text-3\" id=\"text-5-1\">\n<p>\nRDP代理主要还是针对Windows主机，现实中大部分人登录Linux一般还是选择能够返回shell的方式，如ssh、telnet等。所以个人前期对于xrdp的代码阅读的重点其实不对，因为xrdp代码中带有大量处理Linux图形的代码。对于我们实现堡垒机的功能其实没有太大帮助。xrdp源码中关于之前也犯了过早阅读实现的错误。\n</p>\n</div>\n</div>\n\n<div id=\"outline-container-sec-5-2\" class=\"outline-3\">\n<h3 id=\"sec-5-2\"><span class=\"section-number-3\">5.2</span> 计划</h3>\n</div>\n</div>\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><span class=\"section-number-2\">6</span> 附录</h2>\n</div>\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><span class=\"section-number-2\">7</span> <span class=\"todo TODO\">TODO</span> </h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n<ul class=\"org-ul\">\n<li><code>[&#xa0;]</code> 策略配置怎么做？\n</li>\n<li><code>[&#xa0;]</code> rdp数据包的结构体位置，之后放到文档\n</li>\n<li><code>[&#xa0;]</code> RDP代理对于RDP客户端的数据是否直接发送。\n</li>\n<li><code>[&#xa0;]</code> RDP协议是什么，主要做什么？\n</li>\n<li><code>[&#xa0;]</code> RDP代理的实现，xrdp是怎么实现的，rdpproxy时怎么实现的？\n</li>\n<li><code>[&#xa0;]</code> 堡垒机功能实现，有那些功能可以实现，rdpproxy实现了什么？功能依赖那些资源？xrdp提供了那些资源\n</li>\n<li><code>[&#xa0;]</code> 协议栈要配合代码看\n</li>\n</ul>\n</div>\n</div>\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><span class=\"section-number-2\">8</span> 参考</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n<ul class=\"org-ul\">\n<li><a href=\"https://en.wikipedia.org/wiki/Remote_Desktop_Protocol\">Wikipedia：Remote Desktop Protocol</a>\n</li>\n<li>RDP协议的代理与转发的研究和实现\n</li>\n<li><a href=\"http://qimo601.iteye.com/blog/614649\">RDP协议详细解析</a>\n</li>\n<li></li>\n</ul>\n</div>\n</div>\n<div id=\"footnotes\">\n<h2 class=\"footnotes\">Footnotes: </h2>\n<div id=\"text-footnotes\">\n\n<div class=\"footdef\"><sup><a id=\"fn.1\" name=\"fn.1\" class=\"footnum\" href=\"#fnr.1\">1</a></sup> <p>严格来说最早舒畅国际电信联盟设计的，后被微软收购</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.2\" name=\"fn.2\" class=\"footnum\" href=\"#fnr.2\">2</a></sup> <p>xrdp默认只监听TCP端口</p></div>\n\n<div class=\"footdef\"><sup><a id=\"fn.3\" name=\"fn.3\" class=\"footnum\" href=\"#fnr.3\">3</a></sup> <p>历史版本包括4.0、5.0、5.1、5.2、6.0、6.1、7.0、8.0、8.1、10.0</p></div>\n\n\n</div>\n</div>\nLast Updated 2017-11-16 四 09:53.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
