
#+TITLE: 编程思考
#+DATE: 2017-07-07
#+LAYOUT: post
#+TAGS: 编程
#+CATEGORIES: 编程

* TODO 计算模型
** 概要
   计算模型不只一种，而在不同的计算模型下对于计算过程有不同的描述。程序语言出现的目的在于压缩这些描述。压缩这些描述的技巧在于尽量找出重复的元素。我们成这种做法叫提取复用元素。一般可以复用的元素包括：
   - 变量（复用内存）
   - 函数（复用计算过程）
   - 类型
   - 对象（同时复用内存和计算过程）
   同时各个编程语言对于相同的复用元素的复用能力有不同的设定。类似过程式编程，函数一般不是第一类对象，不能作为参数或返回值。在函数的复用能力上不如函数式语言。
   然而，编程语言的复用能力并不是衡量一门语言的唯一因素。由于程序员是容易犯错的人，这在C/C++的使用中已经被证明了，所以压缩格式并不是单纯以压缩率来确定的，尽管不同的压缩方式（语言特性的组合）确实有区别，但我们可以在保证一个压缩等级的情况下选择更加适用于程序员编写程序的压缩格式。所以另一个问题是如何构造安全和简洁的压缩格式，也即程序语言。后一个目标其实更为重要，因为现代语言能提供压缩等级不多。
** 一般过程式语言的函数和函数式语言的函数   
   过程式语言是依靠改变状态来实现运算的，但函数也有返回值，如果我们不使用该返回值，这个值也就不会其作用，但是这个值有时也可以像函数式语言一样控制计算。在过程式语言中返回值可以反映部分状态信息。过程式语言读取并改变状态就是全部了。而函数式语言比较简单，只有映射一说。
   对于过程式编程语言来说函数的返回值可以看做当前状态的映射，所以对于改变状态之后值也可能会不同。
** 学习语言的思路
   首先是要明白这门语言提供了什么来支持计算，一般该有的都有。
** C语言
   作为典型的过程式语言，这个语言能描述的东西分成了三类，读、写、运算（读和写的对象是内存，而运算是不会改变内存的，这样就分成了三类）。当然从函数式语言的角度上看，也可以分成两类，写和运算（读也是当作一种运算）。个人在编写C语言的过程中最大感觉是但这三者分得比较开时，往往能降低一定的编程复杂度。无副作用的函数可以看作是运算。而有副作用则应看作过程，这类过程的接口需要比较多的说明才能被理解。相比之下无副作用需要的额外说明相对较少。
   另外，把读看作运算可以提高抽象程度，所以C++可能也倾向于此。当然，过程才是编程的重点和难点，区分好写和运算只是降低了复杂度而已。
* 面向对象
* 关于抽象和函数定义（符号定义的思考）
  一般的思考是，对于一个符号的定义如果使用了其他符号，则可以认为该符号的抽象层次可以高于其他符号。然而，没那么简单，符号的定义可能是相互的。虽然一般不至于循环定义但是如果几个定义间相聚很远的话十分难以理解，而且要认为它们的抽象层次是一样的。但我们认为一个符号的抽象层次高于另一个符号时，可能又有一个符号的定义同时使用了这两个符号，所以其实抽象层次是意义的，所以当一个符号的定义涉及到了另一个符号时，如果哪个符号也是全局的，那么这两个符号的抽象层次其实是一样的。那如果用到的符号是局部的呢（如C语言的static）？在外面不存在两个符号的比较，所以也不是问题吧。。。所以啊。。。抽象的关键还是在于隐藏。同时暴露的符号还是属于同一个抽象层的。但这是C语言的偷懒方法。。。。同一个抽象层的划分还是必要的。按抽象层次划分已经试过了，太过复杂，所以可以按功能、副作用相关行什么的来划分。所以之后的研究方向就是在一个抽象层对各个符号进行划分。
* 自动内存管理
  其实C语言也有自动内存管理，虽然这是由编译器提供的，它属于管理可以在编译期确定生命周期的内容。为了支持函数调用而使用的堆栈。
  自动内存管理的直接目的是让名称的生命周期和内存保持一致，也就是说只要实现了这一点就称得上自动内存管理。至于使用的是引用计数还是垃圾回收那又是另一回事了。
* 关于多进程和多线程
  但前计算机的进程仍然是一个自动机的动态运行的概念，所以目标仍然是收敛于某个状态。多进程编程要考虑不同进程的状态的相互影响，而多线程编程则是有共有的状态，相互影响的部分和多进程一样。目前还想不出两者在概念上有和区别。或者只是代价的区别而已？
  Linux下的fork()复用了Linux环境，这是个优点。不过它同一个代码中，会有一些代码是不会被父进程使用的，也就是有只属于子进程的代码。父进程无所谓，只是增加了一段不会运行的代码而已，其他的和编写单进程程序没有太大区别。如果在运行完独有的代码之后还要运行公共代码，此时相当于要考虑两个后条件，复杂度似乎会增加。
* 零散
  - 现代语言的运行和语言的特性息息相关，以C语言为例，变量的定义带来的是运行时它可以占有一个固定的内存空间。
  - 现代编程语言的编译结果是运行时描述，这是最基础的描述
  - 表达式的特性是只有一个返回值
  - 其实现代的设备的编译结果：汇编语言已经是最灵活的压缩格式了。最重要的是对于内存地址的直接访问，可以实现足够细的粒度上的代码复用
  - 异常的状态一个就够了
  - 对于贴近操作系统的编程，没有副作用是不现实的
  - 值传递和引用传递的区别，在于行为上的区别，传递一个变量的值还是传递一个表达式的值
  - 我们知道对象在创建时要调用构造函数，但是这其实会导致效率的问题，因为调用函数
* 参考
  - [[https://www.zhihu.com/question/28292740][什么是函数式编程思维 知乎]]
