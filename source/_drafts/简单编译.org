#+TITLE: 简单编译
#+DATE: 2018-03-05
#+LAYOUT: post
#+TAGS: Compile
#+CATEGORIES: Compile

* 前言
  这里主要对Kaleidoscope的理解。
* token
  tokenisizer可以使用代码生成，
* Grammer
  语法和关键字是一个编程语言的外在表现形式，语句和表达式，表示式可以被求值，而语句不总是可以，但依旧是一段有意义的代码。可以是命令一类的，总之区别于表达式。这里的要求是解析完毕之后都可以是表达式。
  语法包括:
  - NumberExpr := double
  - identifierexpr := identifier
    := identifier ( expr_list ) 
  - primary := identifierexpr
            := numberExpr
            := parenExpr
  - expr := primary binoprhs
  - binoprhs := ( + primary)*
  - prototype := id (id*)
  - external := extern prototype
  - toplevelexpr := expression

  这里还有一个混淆，语法是一个层次，而抽象语法树又是一个层次，生成语法树之后很多在程序语言中多余的token都会消失，同时语法树的类别也可以包含信息。相比之下语法树的形态反而在不同的语言中会比较相似。表达式会比较贴近语法树，大体上设计一两个复合表达式树就差不多完成了表达式语法树的设计。之后就是命令式语法树，这类语法树是在顶层的，不能和表达式树进行符合，虽然能包含，但不能被符合表达式树包含，这是基本的区别，所以要特殊处理。Kaleidoscope有两种语句，分别用绑定符号和其定义。分别用于内部定义和外部定义。当然目标都是要绑定成一个函数定义。这里和表达式绑定。
  表达式是延迟求值的
  是一门机器简单的语言，语法和抽象语法树的关键在于一棵树至少会对应一个语法单元，反过来则不一定。
  语法的定义只是为了parse来使用，一个语法单元对应一个parsing单元。
* AST
  抽象语法树代表语言在内存中的表现形式，比较贴近逻辑结构。所以抽象语法树的逻辑结构要实现设计好。过程很直接，只要为每个语法单元创建一个结构就可以了、
* 递归下降
  一般来说递归下降的语法分析会比较简单，但是有一些问题，就是提供下降的语法分析需要符合某些规范。要理清思路。
* SSA
  静态单赋值形式是一种IR，之所以称之为单赋值，是因为每个名字在SSA中仅被赋值一次，可以用于数据流分析，
* llvm
** 基本对象概述
   - LLVMContext：拥有LLVM的核心数据结构，如类型和常数值表，很多API都要求这个对象。
   - Builder：用于生成LLVM字节码
   - Module：是LLVM的一个组件，包含函数和全局变量，这是一个顶层的结构，llvm IR使用它来包含代码，会维护所有的IR，
* 零散
  - 虽然一般还是tokenize先编写，但是其实进行语法设计还是要更早的，毕竟不需要过多的精力。
  - 值得注意的是作为语法树，器生成代码的过程其实是树的遍历
