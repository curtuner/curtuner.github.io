#+TITLE: guacamole和xrdp审计方案
#+DATE: 2018-01-25
#+LAYOUT: post
#+TAGS:审计
#+CATEGORIES: 审计

* 前言
  Guacamole目前已经有一套基础的审计解决方案了，但是xrdp并没有，所以目前的重心在于实验考察xrdp审计的解决方案。做了一些尝试后，看到了一些以前没察觉的问题。另一方面，Guacamole的开销会比较成问题，所以经过了一些测试和讨论之后，想法也发生了一些改变。这次主要讲一下一些思路还有遇到的问题，可能会再说一些基本概念。
* 关于协议转换
  无论是xrdp还是Guacamole都涉及到了协议的转化，Guacamole就如之前说的图形协议会统一转换成方便前端解析的Guacamole协议。而xrdp作为RDP服务器最常用的转换是vnc到rdp的转换。xrdp和Guacamole都不是一开始就支持所有的协议转换的，而是慢慢增加的。所以这两个软件采用了设计一个 *中间层* 的做法来方便之后的添加新的协议。
  设计中间层意味着其代理方式不是直接转发数据包的形式，而是会先将数据进行解析成一个中间表示，之后再把这个中间表示转化成另一类协议格式。服务端的响应模式都是下面这种形式：
  #+BEGIN_SRC dot :file guacamole和xrdp审计方案/protocol_convert.png :cmdline -Kdot -Tpng :exports results
    digraph protocol_conv {


            A [label="protocol A"]
            B [label="protocol B"]
            C [label="protocol C"]


            mid [label="中间表示"]

            D [label="用户使用的协议"]

            A -> mid
            B -> mid
            C -> mid

            mid -> D

            
    }
  #+END_SRC

  #+RESULTS:
  [[file:guacamole和xrdp审计方案/protocol_convert.png]]

  xrdp和Guacamole和用户直接沟通使用的协议都只有一种，所以为了转化方便，中间层一般会更加贴近用户客户端使用的协议，所以xrdp的中间层设计得更贴近RDP协议，Guacamole的中间层则是Guacamole协议。这也是这两个软件代理复杂性的一大来源。RDP协议远远比Guacamole协议要复杂，所以xrdp的中间层的复杂程度远比Guacamole协议高得多。连带地xrdp代码理解的难度要比Guacamole高不少。尤其是涉及到中间层的部分。
** Guacamole的中间层
   相比xrdp，Guacamole的中间层其实要简单得多，虽然Guacamole协议大量使用了HTML5的canvas编程的原语，但是对于图形的处理方式其实更加接近RFB协议的处理方式。这里简单介绍一下基本的概念，如果稍微用过PS，应该知道要完成一副图片，往往会先建立多个图层（layer），最后再组合成一幅图片。RFB和Guacamole绘制桌面的做法差不多就是基于这种思路，这样做的好处是很多时候对于图像的改变只会影响某几个图层，而其他图层不会受到影响，也就是说桌面的更新只需要改变几个图层的内容[fn:1:实际比这要复杂得多，这里这么将只是方便理解。]。这种思路的延伸自然就是把桌面的组成元素进一步细分，在这方面接近极致的就是RDP协议。
   这个中间层大家可以想象成在堡垒机上有一个屏幕，这个屏幕会播放内容。而播放的内容会被转化称为RDP或者Guacamole协议发送给客户端。对于程序员来说，屏幕可以看成一块缓存。通过不断更新这块缓存就实现了屏幕画面的改变。对于用户来说，屏幕的变化相当于播放一帧一帧的画面。
   默认情况下帧的最短间隔时间设定40ms, 也就是最高帧速是25帧每秒。这个帧速是一般电视的帧速，所以多数时候不会觉得卡。实际画面的变化速度或者说频率要高于这个帧速能达到的效果，所以Guacamole会在内部积累这些变化，一次性转发给用户。在计算机资源和带宽足够的情况下，会觉得卡的情况是玩游戏的时候，25帧每秒并不能满足高端游戏的需求。
   #+BEGIN_SRC C
     #define GUAC_VNC_FRAME_DURATION 40  
   #+END_SRC

   guacenc只需根据其中时间戳和每帧来显示图像而已，
   这里帧简化了还多东西，一个帧里面有很多图层，实际方便起见统一叫帧了。
** xrdp的中间层
   xrdp只能和rdp客户端通信，也就是会把其他协议转换成RDP协议，所以中间层使用的是RDP协议的表示层。这个表示层除在图形的处理上和RFB协议的思路是差不多的，其他的东西和RFB差距很大。所以从RFB到RDP本身不好理解。
* 共享会话
** 共享会话
   之前提到的Guacamole的实时审计其实使用了共享会话的技术，严格来说在Guacamole中就是这么叫的。两个最重要的图形协议中中VNC默认就是支持共享会话的，所以如果是支持共享会话功能的话只要把rdp协议完成就可以了，当然可以的话纳入同一个框架中是最好的。
   当然事情其实有些复杂，以前给大家看过这个图：

   #+BEGIN_SRC dot :file guacamole和xrdp审计方案/xrdpproxy_linux.png :cmdline -Kdot -Tpng :exports results
      digraph vncproxy {
                  rankdir = LR
                  node [shape = record]
                 
                  a [label = "RDP client"]
                  proxy [label = "{<p1> proxy| {<p2> libvnc | <p3> libx11 | <p4> librdp }}"]
                  c [label = "{<p1> VNCserver | <p2> X server}"]
                  xserver [ label = "X client" ]
                  rdpserver [ label = "{<p1> RDP server | <p2> VNC server |<p3> X server}" ]

                  xclient1 [label = "X client"]
                  xclient2 [label = "X client"]

                  a -> proxy:p1 [label = "RDP packet"]
                  proxy -> a [label = "RDP packet"]
                  proxy:p2 -> c:p1 [label = "RFB packet"]
                  c:p1 -> proxy:p2 [label = "RFB packet"]

                  proxy:p3 -> xserver [label = "X packet" ]
                  xserver -> proxy:p3 [label = "X packet" ]
                  proxy:p4 -> rdpserver:p1 [ label = "RDP packet"]
                  rdpserver:p1 -> proxy:p4 [label="RDP packet"]

                  xclient1 -> c:p2 [label = "X packet"]
                  c:p2 -> xclient1 [label = "X packet"]

                  xclient2 -> rdpserver:p3 [label = "X packet"]
                  rdpserver:p3 -> xclient2 [label = "X packet"]

                  
      }
    #+END_SRC

   #+RESULTS:
   [[file:guacamole和xrdp审计方案/xrdpproxy_linux.png]]

   早期的xrdp默认会选用第三种路径，也就是借助VNC来构建桌面数据，但这样就意味着即便使用RDP的情况下，也可能构建共享的会话。当然不应该做这个假设, *因为到了Windows上一定不行* ，RDP代理还是要独立完成一套审计工具， *因为到了Windows上一定不行* 。
yy   就协议来说，RDP协议并没有共享会话的内容，所以是否能共享会话取决于RDP底层的实现，显然Windows的底层实现没有考虑这个。
   也就是说直接通过Guacamole登录一个同名的帐号来完成实时审计和历史记录的方案提前流产了。目前可以的做法是。
** 共享会话和历史记录
   一旦实现了共享会话功能，就可以使用粗糙的方式支持历史记录功能。支持历史记录
   #+BEGIN_SRC dot :file guacamole和xrdp审计方案/share.png :cmdline -Kdot -Tpng :exports results
     digraph share_session {
             
     }
   #+END_SRC
* 开销
  Guacamole本身是内存消耗大户，对于CPU的压力其实还好，线程还是阻塞的时间比较多，压力比较大的是图片压缩的过程，这个对于xrdp也是同样，这个连接相对独立的应用，一般使用多线程比较不稳定。所以最终大概还是会使用进程模型。进程模型
* freerdp绘图层接口
** xrdp
   这里的显示中间是xrdp_bitmap，最终的显示都是bitmap，其他的图像都在这之上显示。这个bitmap对象了可以表示很多图形对象，总共有九种：
   - bitmap
   - window
   - screen
   - button
   - image
   - edit
   - label
   - combo
   - special
   这东西直接看不是很好理解，所以要一步一步来，这些bitmap组成了结构xrdp_bitmap，所以没有很多的恶对象可以做到类似于。下面先看一下xrdp_bitmap的定义：
   #+BEGIN_SRC C
     /* window or bitmap */
     struct xrdp_bitmap
     {
         /* 0 = bitmap 1 = window 2 = screen 3 = button 4 = image 5 = edit
            6 = label 7 = combo 8 = special */
         int type;
         int width;
         int height;
         struct xrdp_wm* wm;
         /* msg 1 = click 2 = mouse move 3 = paint 100 = modal result */
         /* see messages in constants.h */
         int (*notify)(struct xrdp_bitmap* wnd, struct xrdp_bitmap* sender,
                       int msg, long param1, long param2);
         /* for bitmap */
         // 每个像素的bit数
         int bpp;
         int line_size; /* in bytes */
         int do_not_free_data;

         // 这是存放bitmap像素信息的地方，需要注意的是这是原始图片，没有图片格式一说
         char* data;
         /* for all but bitmap */
         // 应该是button的专用信息...
         int left;
         int top;
         int pointer;
         int bg_color;
         int tab_stop;
         int id;
         char* caption1;
         /* for window or screen */
         //模式对话框
         struct xrdp_bitmap* modal_dialog;
         // 
         struct xrdp_bitmap* focused_control;
         // 创建这个窗口的窗口
         struct xrdp_bitmap* owner; /* window that created us */
         // 包含这个窗口的窗口
         struct xrdp_bitmap* parent; /* window contained in */
         /* for modal dialog */
         struct xrdp_bitmap* default_button; /* button when enter is pressed */
         struct xrdp_bitmap* esc_button; /* button when esc is pressed */
         /* list of child windows */
         // 像srceen就会有很多的子窗口
         struct list* child_list;
         /* for edit */
         int edit_pos;
         twchar password_char;
         /* for button or combo */
         int state; /* for button 0 = normal 1 = down */
         /* for combo */
         // combo的选项
         struct list* string_list;
         struct list* data_list;
         /* for combo or popup */
         int item_index;
         /* for popup */
         // 到底由那个窗口弹出
         struct xrdp_bitmap* popped_from;
         int item_height;
         /* crc */
         int crc32;
         int crc16;
     };

   #+END_SRC
   当bitmap是window或者screen的，screen一般来说只有一个，是最底层的图层。而window则会有多个，一般每个应用一个。
   可以看到除了数据以外，提供了一个接口notify，用于传输事件。窗口间进行沟通。传输事件。
** xrdp_bitmap_create
   一个bitmap是方块和vnc的triangle差不多。所以基础的属性是宽度、高度、bpp，类型。
   基本的流程是：
   1) 设置类型
** xrdp_process
   process是每个进程或线程都会维护一个数据结构来完成，这个结构体不难，所以可以直接观察：
   #+BEGIN_SRC C
     /* rdp process */
     struct xrdp_process
     {
       int status;
       struct trans* server_trans; /* in tcp server mode */
       tbus self_term_event;
         // 难道还可以有不同的恶listener, 可能是为了后面扩展
       struct xrdp_listen* lis_layer; /* owner */
       struct xrdp_session* session;
       /* create these when up and running */
       struct xrdp_wm* wm; 
       //int app_sck;
       tbus done_event;
       int session_id;
     };
   #+END_SRC
   可以看到每个process都有唯一一个xrdp_wm，所以也是一个进程一个。那么问题就是如何利用资源，这里我们看看listener有什么资源可以给我们用。
   一个listener会用很多的，比方说参数会被存储在xrdp_listen，同时会维护所有的process，毕竟都是由它来衍生的。listen算是最顶层的数据结构了。里面也包含这参数的信息。如何控制之后的建立连接也在这个对象的信息里。之所以是顶层的对象是因为之后对象的创建都会收到原本对象的影响。如收到连接后是建立线程还是进程。
   xrdp接口的设计上并不统一，调用了process_run之后就会进入process的处理中去，之后会调用process_main_loop来完成。
** xrdp_wm
   是一个process的关键资源，是我们的中间层，这个结构体对应我们看到的rdp窗口，可以看到有一个session，这个也也是process的，所以显得不是很优雅，可能最开始并没打算作为代理来使用吧。
   xrdp_wm和session都是process的资源之一。
** xrdp_mm
   这个结构是每个wm一个，用于和sesman连接，会保存一个mod_handle来连接，会在xrdp_mm_connect的时候建立，
** xrdp_session
   rdp层的处理对象，这个看定义就可以知道了：
   #+BEGIN_SRC C
     struct xrdp_session
     {
         tintptr id;
         struct trans *trans;
         int (*callback)(intptr_t id, int msg, intptr_t param1, intptr_t param2,
                         intptr_t param3, intptr_t param4);
         void *rdp;
         void *orders;
         struct xrdp_client_info *client_info;
         int up_and_running;
         int (*is_term)(void);
         int in_process_data; /* inc / dec libxrdp_process_data calls */

         struct source_info si;
     };
   #+END_SRC
   可以有，一开始建立的是和客户端的sessionn，需要注意的是client_info，所以对象的问题。协议栈的交互是通过session来维护的。
   
* cairo
** 模型
*** Destination
    Destination是绘图的平面，可能是pixel数组，也可能是SVG或者PDF文件
*** Source
    
* TODO 中间层
  lib_framebuffer_update
  server_paint_rect(struct xrdp_mod* mod, int x, int y, int cx, int cy,
  xrdp/xrdp.h:400:server_paint_rect_bpp(struct xrdp_mod* mod, int x, int y, int cx, int cy,
  xrdp/xrdp.h:410:server_paint_rects(struct xrdp_mod* mod, int num_drects, short *drects,
  xrdp/xrdp.h:482:server_paint_rect_os
  mod->painter各个模块是什么
  xrdp_painter_copy的解析
     remote applications integrated locally (RAIL),
* TODO 问题
  - Guacamole上传文件使用的是什么形式
  - xrdp的资源利用体系
* 用户态缓存
  xrdp的用户态缓存是使用的freerdp的东西，叫stream。
* 基础
** modal dialog
   模态对话框，指的是用户想和其他的应用程序操作的时候需要先完成和它的交互，否则其他的用户无法得到信息。
** comboBox
   下拉框
** popup
   弹窗
** Bpp
   Byte per pixel
** stream
   有一个用户态的缓存，这个显然是因为到了rdp的应用层。
** target_surface
   surface应该类似于Guacamole的display
** 
