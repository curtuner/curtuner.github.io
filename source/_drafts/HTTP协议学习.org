#+TITLE: HTTP协议学习
#+DATE: 2017-11-22
#+LAYOUT: post
#+TAGS: HTTP, Network
#+CATEGORIES: HTTP

* 概述
  写这个的目的是为了实现HTTP服务器，
** HTTP服务器
   HTTP一般的处理流程大体是这样的：
   1) 接受TCP连接
   2) 接收HTTP请求
   3) 使用某种协议分发请求
   4) 对分发的请求产生运行结果
   5) 把结果格式化成HTTP响应传回给浏览器
   6) 关闭连接或者keepalive
   不同的HTTP服务器主要区别在于如何分发以及用什么语言编写。当然不同的HTTP服务器擅长的点不同，所以很多时候会有不止一个服务器运行的情况。向nginx擅长处理静态资源的响应，而Tomcat主要用于处理请求的动态响应。所以往往会放到一起使用。
* HTTP报文
** 报文的组成
   报文分成了三部分，分别是起始行、首部和以及可选的、包含数据的主体。起始行由CRLF作为行的终止，当然一般的web服务器都会接受使用\n作为终止。主体可以是文本也可以是二进制数据。而首部会包含主体的元信息。
*** 报文的语法
    报文大体分成了两种：
    1) 请求报文
    2) 响应报文
    
    请求报文的格式是：
    
    <method> <request-URL> <version>
    
    <headers>

    <entity-body>

    响应报文的格式是：
    
    <version> <status> <reason-phrase>

    <headers>

    <entity-body>

    各个部分代表的含义是：
    - method：客户端希望服务器执行的动作。
    - request-URL：命名了请求的资源，或者URL路径组件。
    - version：HTTP版本号，很多协议都会在格式中加一个版本号，但最终用的基本不多
    - status：三位数字描述了请求过程中发生的情况。状态码的每一位都用来描述状态的一般类型。
    - reason-phrase：状态码的可读版本，机器不会关心这个，主要给人看。
    - headers：首部，可以有一个或者多个header，每行是一个 <name>: <value> ，用CRLF作为结尾。headers的结尾是一个CRLF。
    - entity-body：包含任意的数据块。并不是所有的报文都包含实体的主体部分。
*** 起始行
    请求报文的起始行说明了服务器要 /做什么/ ，而响应报文的起始行说明了 /发生了什么/ 。为了方便起见接下来请求报文的起始行称为请求行，响应报文的起始行称为响应行。
**** 请求行
     请求报文请求服务器对资源进行一些操作。
**** 响应行
     响应报文承载了状态信息和操作产生的所有结果数据
**** 方法
     响应报文

*** 首部
    首部本质上时名/值对的列表，大体上分成了一下几类：
    1) 通用首部
    2) 请求首部
    3) 响应首部
    4) 实体首部
    5) 扩展首部
    
    通用首部既可以出现了响应报文也可以出现在请求报文中，其他的首部的归属就很明显了，扩展首部是规范中没有的首部。一般的名/值对都在一行内表示，也可以在几行内描述，这个做法叫做首部延续行。多出来的每行要有一个空格或者tab。
*** 实体
    这个HTTP的负荷，可以时各种类型的数据：有数字数据、图片、视频等。
       
** 方法
   HTTP提供了不少方法，不过一般服务器不需要提供所有方法。类似HTTP 1.1，服务器只要提供GET和HEAD方法就够了。GET和HEAD被称为 *安全方法* 。因为它们 *不需要* 服务器产生什么结果（这要看服务器的实现）。
*** GET
    客户端要求服务器发送某个资源。
*** HEAD
    HEAD方法的要点是它返回的东西除了没有实体，其他的和GET方法返回的一样
*** PUT
    PUT是和GET相反的行为，请求报文中就包含实体，它请求服务器用实体部分创建一个有请求URL命名的新文档。说白了他是用于上传资源的。
*** POST
    POST用于向服务器输入数据，服务器会处理这些数据。
*** TRACE
    由于HTTP请求在到达目标服务器前会经过网关、防火墙、代理等中间设备，这些设备可能会改变这些请求。为了看到我们的报文最终被如何修改了，就可以使用TRACE方法，它会让服务器在响应主体中包含收到的请求报文。当然这个方法能做到的有限。
*** OPTIONS
    我们知道服务器支持的方法还是有不少差别的，OPTIONS方法会请求服务器告知其支持的各种功能。
*** DELETE
    请求服务器上删除URL指定的资源。不一定会被执行，而且规范不要求服务器通知客户端是否满足了请求。
*** 扩展方法
    扩展的方法指的是没有在HTTP 1.1中定义的方法
* Tinyhttp源码解析
  - Tinyhttp回收结束的线程，这样只要连接次数一多就会导致资源不足，不过这只是一个建议的http服务器代码，所以也不用太在意
  - 需要注意的是http是文本协议，所以涉及到对于字符串的处理。

* Tornado服务器
** IOLoop模块
   直接阅读tornado下的ioloop.py，进入服务器的核心
** IOStream模块
** HTTPServer模块
   
* 零散
** 小点
  - http的url中第一个域名之后以及‘？’之前就是资源路径，
  - TCP可以看作一个无限的流，但我们的内存是不能支持无限的流的，所以需要有缓存，先得到数据（如从磁盘，或者通过计算），再从缓存块中发送到网络接口中。
  - 多线程和fork虽然需要特别注意，但是一般用来exec一个新的程序其实不会有什么问题
  - HTTP 1.0之前不会要求请求行中版本号，
  - HTTP 1.0之前还有0.9这个版本，要简单得多。看到不要奇怪了。
** 管道的使用
   由于管道要当作是单向的，所以如果要通过管道完成父进程和子进程的沟通就要通过就要使用两个管道。

** 模块和通信方式
   模块化是编写程序很自然的想法，不同的模块一般需要某种方式联系起来。根据不同的需求，会采用不同的联系方式，在学习编程的过程中会接触到很多。向进程间通信的各种方案其实都是模块间通信方案。各个方案分别适用于什么情况呢？
** 关
* TODO 问题
  - URL的语法
* 参考
  - 《HTTP权威指南》
  - [[https://developer.mozilla.org/zh-CN/docs/Tools][Firefox 开发工具]]
