#+TITLE: 并发程序
#+DATE: 2017-09-27
#+LAYOUT: post
#+TAGS: 编程
#+CATEGORIES: 编程

* 前置信息：协程
* 前言
  这里并发程序不是值的系统的并发能力，而是指让一个程序支持并发。并发性出现的原因至少有包含三个：
  1) 为了反应一些问题的逻辑结构。类似于服务器和图形应用，必须同时维护多个程序相互独立的”作业“轨迹。构造这种程序最简单的最和乎逻辑的就是用一个独立的控制线程来表示。
  2) 应对相互独立的物理设备，有些本质上就是并发的。
  3) 通过在多部处理器上运行以提高性能（如并行）
  简单来讲，概念上有些适合用并发，有些必须用并发，最后才是用并发提高性能，而这个则是硬件的提升带来的。
* 基础和动力
  有关并发程序设计的大部分1理论基础工作是在20世纪60年代提出的。之所以最近又火了，其实是使用并发的应用受到了重视，再就是处理器价格降低了，多核处理器普遍了。
** 简单历史
   主要就是硬件和软件的进化史。对于如何处理多个任务的问题，不断提出更好的解决方案。一开始是 *独占模式* ，即每个人登记不同的时间来使用机器。之后为了减少浪费，又交给一个管理程序来统一处理一批作业。这个管理程序算是操作系统的雏形。当然之后还要继续改进，毕竟不会有人觉得效率高的。所以接下来就开始从更细小的粒度开始优化了，人们发现I/O并不需要占用处理器资源。所以又开发了中断驱动的I/O，还有多道程序设计技术以便可以快速切换到另一个任务。当然这两项发明都需要硬件支持，中断机制和内存保护都是现代CPU的基本功能。
   *并不是所有的竞态条件都是坏的，有时程序的任意结果都是可以接收的，这和我以前处理的问题是相同的。有时程序的任意结果都是可以接收的，同步的目标是消除”坏的“竞态条件。只要保证程序的正确性即可。*
   计算机生产成本降低了以后，供一般用户使用的系统开始普及，交互一般要求一定的实时性。所以分时操作系统开始普及，中断机制的使用开始不局限于I/O的时候，用户的操作也必须产生中断来快速响应。
   交互式I/O需要及时处理。
* 并发程序设计基础
  "并发性"用于形容有两个或者多个执行上下文同时处于活动状态的一类程序。并行算是并发程序的一种特性。并行需要硬件支持，然而实际上，无论是否并行，并发程序的设计技术都是相同的。
  进程过于重量级，其实编程逻辑更加关注线程，编译之后的代码其实主要还是对应线程。在书中线程可能必Linux线程要重一点。
** 通信和同步
   通信指可以由线程使用去获取其他线程产生的信息的任何机制。命令式程序里通信机制通常包括 *共享存储器* 或者 *消息传递* 。
   同步指任何使程序员可以控制不同线程之间操作的发生相对顺序的机制。在消息传递模型里的同步通常是隐式
   I/O设备有独立的芯片，可以认为是与处理器并行工作的。
   共享存储器和消息传递之间的差异不仅和语言库有关，也和计算机硬件有关。
** 语言和库
   把并发性提供给程序员的方式：
   1) 
* pthread
  线程和进程有所不同，进程是需要依赖其他进程回收的，只有1号进程没有进程能回收，因为它是开机就有的，所以也不必回收。线程资源虽然也可以被回收，但也可以让它在结束后不再占用资源。对于分离状态的线程进行pthread_join会导致错误。
  sleep这个系统调用阻塞的实际上是线程
* 零散
  - 对分时系统，时钟是必要的
  - int 指令是对内核服务的请求
