#+TITLE: 操作系统设计
#+DATE: 2017-06-30
#+LAYOUT: post
#+TAGS: OS
#+CATEGORIES: OS

* 前言
* 多核
** 引言
   我们目前使用的多核处理器结构是SMP（对称多处理器结构，所以），即每个CPU都是对等的，共享内存和设备。进程调度要考虑多核时，一个必须的要求是多个核必须同步进程队列，进程必须有多个CPU
   由于有多个CPU，所以必须要能管理它们，为此，第一步就要抽象出CPU的定义。CPU的抽象，这里我们需要知道CPU有哪些状态。通过改变CPU状态来改变CPU的内容。
** CPU控制
   改变进程
* 程序的启动
* 进程的调度
** 进程的抽象
  
** 第一个进程的启动
** 程序的加载
* 锁
** 自旋锁（spinlock）
*** 概要
    锁其实是一个对所有进程可见的的一块内存，进程通过检查它的状态来决定是否运行。所以其实只要一个寄存器大小的内存就够了。锁也能用于CPU间的同步
*** 实现
    这里的锁用于同步多个CPU所以必须考虑CPU，也就必须抽象CPU
    #+BEGIN_SRC C
    
    #+END_SRC
* ext2
* 零散
  - 系统调用的一个重要的点是，即使没有得到想要的效果，也可以继续运行。
  - 操作系统是一个由中断驱动的程序
  - 最基础的调度是时钟中断引起的
  - 作用于内存一般不需要
  - 同应用编程不同，系统编程一般是自底向上的，专注于对已有资源的抽象，对于体系结构的理解是十分必要的。CPU、内存和IO设备之间的相关行是不大的并没有什么共用部分，仅仅存在通信而已，本身是不同的整体。
