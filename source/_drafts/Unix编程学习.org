#+TITLE: Unix编程学习
#+DATE: 2017-01-13
#+LAYOUT: post
#+TAGS: Linux
#+CATEGORIES: Linux

* 关键问题
  1) Linux中进程的资源？如何分类？
  2) 内核如何表示打开文件？（三个数据结构）
  3) Unix文件类型？
* Linux相关实现
** 进程和task_struct
   所有的进程描述符都是task_struct类型结构，主要包含进程状态
*** 进程状态（五种）
    - TASK_RUNNING: 要么在执行，要么准备执行
    - TASK_INTERRUPTIBLE：进程被挂起，直到一些条件为真。
    - TASK_UNIINTERRUPTIBLE：与前一个类似，但不会被信号中断，知道给定的事件发生
    - TASK_STOPPED：进程执行 *被* 暂停。当接收到特定的信号时进入暂停状态
    - TASK_ZOMBIE：进程被终止，但没有被父进程回收（用wait）
* 关于fork配置问题
  fork会复制一个进程，其配置也会继承，所以方便的做法是在父进程把各种东西配置好。
* 零散
  - 进程可以通过轻量级进程共享大部分数据结构
* 模块的理解
  模块有几种，我们看待模块一般先通过看接口即可，一个设计得好的模块可以让我们通过接口就可以了解模块的使用。然而我们在理解POSIX时其实并没有那么容易来做到，原因是我们需要理解接口规范和接口的资源。而理解这些资源的知识要花去大量时间。一个模块一般包含各种接口，接口我认为包括纯函数接口和会产生副作用的接口。对于会产生副作用的接口，接口必须和操作的数据结构一起描述，对于无副作用的接口则没有这个要求，一般从功能和代码服用的角度来划分。对于过程式语言根据操作的数据结构来划分模块一般是更加常见的做法。值得一提的是模块一般还有不少常量，这些我们也可以认为是无副作用的函数。
* TODO 
  - wait函数族
  - dup2()的直接语义是描述符的赋值
* 参考文献
  - 《深入理解Linux内核》
  - 《虚拟机--系统与进程的通用平台》
