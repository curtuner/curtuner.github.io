#+TITLE: HA模块代码分析
#+DATE: 2017-08-09
#+LAYOUT: post
#+TAGS: Linux
#+CATEGORIES: Linux
#+OPTIONS: ^:nil

* 概述
  HA模块有三个模式，连接保护模式、双机热备模式和负载均衡模式。设备之间都需要通过VRRP报文来沟通，以期让具有同样能力的防火墙的共同协作来提高网络稳定性。每个设备独立但是又需要维护协作设备的信息，所以通过VRRP报文定期更新这些信息，监控所有设备的状态。稳定条件是指协作的设备能完成单个设备的所有功能，并且不会发生主备切换。一旦通过发现稳定条件被破坏，就协商出新的设备来替代故障的设备，以此达成新的稳定状态。
* HA保活机制
   HA依靠多台设备的冗余备份来抵抗异常状况。就实现而言，HA模块的几种模式都要求利用HA集群中不止一个设备的状态信息来支持决策。但由于设备是独立运行的，每个设备都无法直接把握整个HA集群中其他设备的状态信息。为了让相应的HA程序能运行在比较可靠的前条件之下，HA让每个设备通过心跳口发送包含必要状态信息的报文来显示自己的状态，使得各个设备可以实时更新或者维持HA集群的状态。
   所以如果要从实现上理解HA保活机制，大体上有三个问题：
   1) 有哪些状态信息需要维护？
   2) 如何发送状态信息?
   3) 如何更新状态信息？
   这三个问题对应到C语言实现上，就是数据结构以及其读写的方法。
** 需要维护的状态信息
   保活机制维护的对象是集群信息和VR（Virtual Route）信息，接收vrrp包的更新集群信息，在HA模块中，集群和vrid的数据结构如下：
   #+BEGIN_SRC C
     #define HA_MAX_CLUSTER_NUM 8
     struct ha_cluster_data
     {
	     unsigned long update_time;
	     __u32 ip;
	     __u32 error;
	     int fd;
	     __u8 valid;
	     __u32 mode;
     };

     struct ha_cluster_data ha_cluster_info[HA_MAX_CLUSTER_NUM];

     struct ha_vrid_data {
	__u8 valid;
	__u8 priority;
	__u8 preempt;
	__u8 state;
	__u8 vrid;
	__u32 ha_metric;
	__u8 monitor_devname[HA_MAX_MONITOR_DEV_SYNC][IFNAMSIZ];
	};
     struct ha_vrid_data vrid_info[HA_MAX_CLUSTER_NUM][HA_MAX_VRID_NUM_SYNC];
   #+END_SRC
   需要注意的是本地的vrid信息并不会保留在vrid_info中，而是在tos_ha_config中。另外，虽然可以在更新完这些信息之后进行决策。但对效率而言没太大帮助，而且实际使用的算法并不要求完全的视图。
** 如何发送状态信息
   相比其VRRP协议定义的报文，HA模块的定义的报文只是使用了vrrp协议头而已，之后就是ha_vrid_data了：
   #+BEGIN_SRC C
     struct vrrphdr {	/* rfc2338.5.1 */
	     __u8		vers_type;	/* 0-3=type, 4-7=version */
	     __u8		vrid;		/* virtual router id */
	     __u8		priority;	/* router priority */
	     __u8		naddr;		/* address counter */
	     __u8		auth_type;	/* authentification type */
	     __u8		adver_int;	/* advertissement interval(in sec) */
	     __u16		chksum;		/* checksum (ip-like one) */
	     __u8		preempt;
	     __u8		mode;
	     __u8		state;
	     __u32    	ha_metric;
	     __u32		ip;	
	     __u8		monitor_devname[HA_MAX_MONITOR_DEV_SYNC][IFNAMSIZ];
	     __u8		backup_monitor_status;//add for D3121
     /* here <naddr> ip addresses */
     /* here authentification infos */
     };
   #+END_SRC
   HA模块通过定时器vrrp_send_timer来发送心跳包，通过ha_vrrp_recv(struct tos_buff *tb)函数来处理心跳包。
   发送VRRP报文是通过会读取本机的信息来构造VRRP报文，相应的构造代码片段：
   #+BEGIN_SRC C
     int ha_vrrp_send(__u8 vrid, int type)
     {
	 /*省略*/
	 /*-----------------------------------------------------------------------*/
	 memset(vrrphd, 0, sizeof(struct vrrphdr));
	 vrrphd->vers_type	= (Vms_down_timeRRP_VERSION << 4) | VRRP_PKT_ADVERT;
	 vrrphd->vrid		= vrid;
	 vrrphd->adver_int	= tos_ha_config.hello_interval;
	 vrrphd->ip			= heartbeat_ip_get(skb->dev);

	 if (vrid != NO_VRID)
	     vrrp_built_vrid(vrrphd);

	 vrrphd->chksum	= vrrp_hd_csum( (__u16 *)vrrphd, sizeof(struct vrrphdr), 0);
	 /*-----------------------------------------------------------------------*/
	 /*省略*/
     }

     static void vrrp_built_vrid(struct vrrphdr *vrrphd)
     {
	     __u8 vrid = vrrphd->vrid;
	
	     vrrphd->priority	= vrid_monitor_interface_check(vrid);
	     vrrphd->preempt		= tos_ha_config.vrcfg[vrid].preempt;
	     vrrphd->ha_metric 	= htonl(vrid_metric_get(vrid));
	     vrrphd->state 		= tos_ha_config.vrcfg[vrid].state;
	     vrrphd->mode 		= tos_ha_config.mode;//really need?

	     vrid_monitor_devname_get(vrid, (__u8 *)vrrphd->monitor_devname);
	     //begin add for D3121
	     vrrphd->backup_monitor_status = bk_monitor_interface_check(vrid) == NET_STAT_GOOD ? 1 : 0;
	     //end add for D3121
     }
   #+END_SRC 
   HA配置是保存在tos_ha_config中的，构造vrrp报文主要读取该结构体的信息，
** 如何更新和维持连接信息
   HA每次收到vrrp报文后会更新集群的信息，从而确认设备是否是活动的或者是否加入新设备。调用的函数是：
   #+BEGIN_SRC C
     static void cluster_info_update(struct vrrphdr *vrrphd)
     {
	     int i;

	     //更新已有设备信息
	     __u8 monitor_devname[HA_MAX_MONITOR_DEV_SYNC][IFNAMSIZ];
	     for (i = 1; i < HA_MAX_CLUSTER_NUM; i++)
	     {
		     if ((ha_cluster_info[i].valid == 1) && 
			     (ha_cluster_info[i].ip == vrrphd->ip)) {
			     ha_cluster_info[i].update_time = jiffies;
			     goto next;
		     } 
	     }

	     //记录新加入设备信息
	     for (i = 1; i < HA_MAX_CLUSTER_NUM; i++)
	     {
		     if (ha_cluster_info[i].valid == 0) {
			     memset(&ha_cluster_info[i], 0, sizeof(struct ha_cluster_data));
			     ha_cluster_info[i].valid = 1;
			     ha_cluster_info[i].update_time = jiffies;			
			     ha_cluster_info[i].ip = vrrphd->ip;
			     goto next;
		     }
		
		     /* BUG 36287 */
		     if (i == HA_MAX_CLUSTER_NUM - 1) {
			     dbg_main("ha cluster max member is HA_MAX_CLUSTER_NUM = 8, can not accept more");
			     return;
		     }
	     }	
	     /*省略。*/
     }
   #+END_SRC
   从代码可以看到ha_cluster_info的update_time字段每次都会更新。所以如果要让他过期，还是需要借助某个定时器，这里用的是vrrp_send_timer。每一秒都会检查一遍是否过期，调用的是下面这个函数：
   #+BEGIN_SRC C
     static void ha_cluster_database_expired(unsigned long unused)
     {
	     int i;

	     for (i = 1; i < HA_MAX_CLUSTER_NUM; i++)
	     {
		     if ((ha_cluster_info[i].valid == 1) && 
			     time_is_before_jiffies(ha_cluster_info[i].update_time + (3 * tos_ha_config.hello_interval + 1) * HZ))
			     memset(&ha_cluster_info[i], 0, sizeof(struct ha_cluster_data));
	     }
     }
   #+END_SRC
   说白了，只要一个设备四秒中没有发送vrrp报文，本机就认为它已经不存在VR中了。
* 主备协商机制
** 决策要素
   VRRP使用三个要素来确定虚拟路由器中每台设备的角色：
   1) 是否启动抢占方式
   2) 优先级
   3) IP地址（在多主状态下使用）
** 协商
   协商的目的是使所有设备达到稳定状态，即在所有设备都正常工作的情况的不会发生切换的状态。哪种状态是稳定的？我想到的做法是先对所有设备按优先级排序，不低于优先级别最高的抢占设备的设备可以作为唯一主设备时，可以认为该状态是稳定的。这就是稳定状态的定义。这就是主备协商的目标。
   HA模块的协商机制和VRRP有所不同，由于没有IP拥有者的概念，所以HA启动后，所有设备默认是Backup状态的，待ms_down_timer定时器超时后再切换至Master状态，首先切换至Master状态的设备会通过VRRP通告报文的交互获知虚拟设备中其他成员的优先级，进行Master的选举：
   - 如果发送自Master设备的VRRP报文的优先级 *高于或等于* 本设备，则本设备保持Backup状态
   - 如果发送自Master设备的VRRP报文的优先级低于本设备，且本设备是采用抢占方式的，则设备切换至Master状态，否则保持Backup状态。
   - 如果同时有多个设备进入Master，这通过报文交流后，优先级较低的会切换成Backup状态，优先级高的设备的会保持Master状态，如果设备优先级相同，则比较其IP地址，较大的称为Master设备。
* 主备切换触发机制和过程
** 概述
  按VRRP协议的做法，主备切换的目的就是让虚拟路器的所有设备从不稳定状态达到稳定状态。所以问题有两个：
  1) 不稳定状态有哪些？
  2) 状态如何切换？
  我暂时将不稳定状态分成了三种：
  1) 无主：没有一个设备处于Master状态，通常发生在HA刚刚启动时，或者主设备发生故障时。
  2) 多主：多个设备处于Master状态，发生在相同优先级的设备之间。
  3) 未抢占：当前Master设备的优先级低于一个开启了抢占的设备，通常发生在加入新设备或设备恢复正常时。
  主备切换的目标就是离开这些状态直到达到稳定状态，可以用下图来描述主备切换触发机制和过程：
  #+BEGIN_SRC dot :file HA模块代码分析/election.png :cmdline -Kdot -Tpng :exports results
    digraph g {
	    rankdir = LR

	    a -> b
	    a -> d
	    b -> d
	    c -> d

	    a [label = "无主", shape = circle]
	    b [label = "多主", shape = circle]
	    c [label = "未抢", shape = circle]
	    d [label = "稳定", shape = doublecircle]
    }	
   #+END_SRC

   #+RESULTS:
   [[file:HA模块代码分析/election.png]]
   代码需要实现这个图中的节点和边的概念。
** 状态识别和切换
*** 无主状态和切换
    为了识别当前的VR的状态，HA模块主要借助了两个内核定时器：vrrp_send_timer和ms_down_timer，以及一个vrrp报文处理函数ha_vrrp_recv(struct tos_buff *tb)来更新状态切换的时间。有两个条件可以识别无主状态：
    1) 设备维护的ms_down_time超时
    2) 原主设备发送优先级为0的vrrp报文
每个设备在一个VR内都会维护一个ms_down_time变量，ms_down_timer会定时检查它的值来确定状态。一旦发现超过了ms_down_time的值就说明就说明此时的虚拟路由器已经不是稳定状态了。另外，如果Master设备检测到接口异常时，会发送priority值为0的vrrp报文。来让其他设备快速脱离无主状态，这时为了再次达到稳定状态，设备需要自己进入Master状态，随之而来的可能是进入多主或者稳定状态，
    #+BEGIN_SRC dot :file HA模块代码分析/election_line.png :cmdline -Kdot -Tpng :exports results
    digraph g {
	    rankdir = LR

	    a -> b [color = red]
	    a -> d [color = red]
	    b -> d
	    c -> d

	    a [label = "无主", shape = circle]
	    b [label = "多主", shape = circle]
	    c [label = "未抢", shape = circle]
	    d [label = "稳定", shape = doublecircle]
    }	
   #+END_SRC

    #+RESULTS:
   [[file:HA模块代码分析/election_line.png]]
   ms_down_timer的处理函数：
   #+BEGIN_SRC C
     static void ms_down_timer_expired(unsigned long unused)
     {	
	     int vrid;

	     if (tos_ha_config.mode == MODE_AS || tos_ha_config.mode == MODE_AA) {
		     for( vrid = BASE_VRID; vrid <= MAX_VRID; vrid++)
		     {	
			     if (tos_ha_config.vrcfg[vrid].valid && 
				     (tos_ha_config.vrcfg[vrid].state == VRRP_STATE_BACKUP)) {
					     if (tos_run_flag == 0)
						     tos_ha_config.vrcfg[vrid].ms_down_time = jiffies + 3 * tos_ha_config.hello_interval * HZ;  
					     else if (time_is_before_jiffies(tos_ha_config.vrcfg[vrid].ms_down_time))
						     goto_master(vrid);
			     } else {
				     //begin add for D3121
				     if (tos_ha_config.vrcfg[vrid].valid && 
					 (tos_ha_config.vrcfg[vrid].state == VRRP_STATE_MASTER)) {
						     if (tos_run_flag == 0)
							     tos_ha_config.vrcfg[vrid].bk_down_time = jiffies + 3 * tos_ha_config.hello_interval * HZ;  
						     else if (time_is_before_jiffies(tos_ha_config.vrcfg[vrid].bk_down_time)) {
							     tos_ha_config.vrcfg[vrid].backup_heartbeat_status = 0;
							     tos_ha_config.vrcfg[vrid].backup_monitor_status = 0;
						     }
				     }
				     //end add for D3121
				     // XXX do what? 
				     //HADBG("master\n");
			     }
		     }
	     }

     out:
	     mod_timer(&ms_down_timer, jiffies + 100 * HZ / 1000);
     }
   #+END_SRC
   一般无主状态的会随着同一VR的其他设备的ms_down_time到期后结束，不同优先级的设备的ms_down_time是这样设定的：
   #+BEGIN_SRC C
     /*vrrp报文的priority不为0时*/
     delay = 3 * tos_ha_config.hello_interval * HZ + (256 - tos_ha_config.vrcfg[vrid].priority) * HZ / 256;
     tos_ha_config.vrcfg[vrid].ms_down_time = jiffies + delay;

     /*vrrp报文的priority为0时*/
     delay = (256 - tos_ha_config.vrcfg[vrid].priority) * HZ / 256;
     tos_ha_config.vrcfg[vrid].ms_down_time = jiffies + delay;
   #+END_SRC
   这样优先级高设备就有较大的概率成为主设备。
*** 多主状态和切换
    #+BEGIN_SRC dot :file HA模块代码分析/election_duo.png :cmdline -Kdot -Tpng :exports results
     digraph g {
	     rankdir = LR

	     a -> b 
	     a -> d 
	     b -> d [color = red]
	     c -> d

	     a [label = "无主", shape = circle]
	     b [label = "多主", shape = circle]
	     c [label = "未抢", shape = circle]
	     d [label = "稳定", shape = doublecircle]
     }	
    #+END_SRC

    #+RESULTS:
    [[file:HA模块代码分析/election_duo.png]]
    判断多主状态的条件是 *处于Master状态的设备也能收到来自Master设备发来的vrrp包* ，其处理逻辑在函数master_vrrp_recv()：
    #+BEGIN_SRC C
      static void master_vrrp_recv(struct vrrphdr *vrrphd)
	    {
		/*省略。。。*/
		    if (peer_priority == VRRP_PRIO_STOP)
			    return;

		    /* ha master recv peer higher priority adv, goto backup not consider local peermpt enable or not! */
		    if ((peer_preempt == 1 || peer_state == VRRP_STATE_MASTER) &&
			    (peer_priority > tos_ha_config.vrcfg[vrid].priority ||
				    (peer_priority == tos_ha_config.vrcfg[vrid].priority && peer_ip > tos_ha_config.local))) {
			    goto_backup(vrid);
			    return;
		    }		
	    }

    #+END_SRC
    从代码看到离开这个状态的方法是比较优先级和ip，决定进入Backup状态的设备，最后会只剩下一个进入Master状态的设备，这样就达到了稳定状态。
*** 未抢占状态和切换
    #+BEGIN_SRC dot :file HA模块代码分析/election_ww.png :cmdline -Kdot -Tpng :exports results
     digraph g {
	     rankdir = LR

	     a -> b 
	     a -> d 
	     b -> d 
	     c -> d [color = red]

	     a [label = "无主", shape = circle]
	     b [label = "多主", shape = circle]
	     c [label = "未抢", shape = circle]
	     d [label = "稳定", shape = doublecircle]
     }	
    #+END_SRC 

    #+RESULTS:
    [[file:HA模块代码分析/election_ww.png]]
    未抢占状态的条件是 *当前主设备的优先级低于抢占设备* 。其切换方式和使用了和多主切换同样的一段逻辑。抢占设备发送的vrrp报文会使得当前主设备进入Backup状态。同时其ms_down_time不会被原主设备的报文触发更新。所以之后抢占设备会成为主设备。
    #+BEGIN_SRC C
      static void master_vrrp_recv(struct vrrphdr *vrrphd)
      {
	  /*省略。。。*/
	  if (peer_priority == VRRP_PRIO_STOP)
	      return;

	  /* ha master recv peer higher priority adv, goto backup not consider local peermpt enable or not! */
	  if ((peer_preempt == 1 || peer_state == VRRP_STATE_MASTER) &&
	      (peer_priority > tos_ha_config.vrcfg[vrid].priority ||
	       (peer_priority == tos_ha_config.vrcfg[vrid].priority && peer_ip > tos_ha_config.local))) {
	      goto_backup(vrid);
	      return;
	  }		
      }
      static void backup_vrrp_recv(struct vrrphdr *vrrphd)
      {
	      __u8 vrid = vrrphd->vrid;
	      __u8 peer_priority = vrrphd->priority;
	      __u8 peer_state = vrrphd->state;
	      __u32 peer_metric = ntohl(vrrphd->ha_metric);
	      __u32 peer_ip = vrrphd->ip;
	      int local_monitor_interface_state = NET_STAT_GOOD;
	      __u32 local_metric = vrid_metric_get(vrid);
	      int delay;

	      if (vrid_monitor_interface_check(vrid) == 0)
		      local_monitor_interface_state = -1;

	      //begin add for D3121
	      tos_ha_config.vrcfg[vrrphd->vrid].backup_heartbeat_status = 0;
	      tos_ha_config.vrcfg[vrrphd->vrid].backup_monitor_status = 0;
	      //end add for D3121

	      //对端设备离开集群
	      if (peer_state == VRRP_STATE_NORUN) {
		      delay = (256 - tos_ha_config.vrcfg[vrid].priority) * HZ / 256;
		      tos_ha_config.vrcfg[vrid].ms_down_time = jiffies + delay;
		      return;		
	      }

	      //如果本地是备份状态，对端设备也是备份状态不做任何处理
	      //主设备定时器的超时处理只能由主设备发出的VRRP报文更新
	      if (peer_state == VRRP_STATE_BACKUP)
		      return;
	
	      //对端监控接口异常
	      if (peer_priority == VRRP_PRIO_STOP) {
		      //本地接口异常
		      if (local_monitor_interface_state != NET_STAT_GOOD) {
			      if (peer_state == VRRP_STATE_MASTER && 
				      (peer_metric > local_metric ||
				      (peer_metric == local_metric && peer_ip > tos_ha_config.local))) {
				      delay = 3 * tos_ha_config.hello_interval * HZ + (256 - tos_ha_config.vrcfg[vrid].priority) * HZ / 256;
				      tos_ha_config.vrcfg[vrid].ms_down_time = jiffies + delay;
				      return;
			      }
		      }
		      //本地接口正常，对端接口异常，立刻切换成主设备。
		      delay = (256 - tos_ha_config.vrcfg[vrid].priority) * HZ / 256;
		      tos_ha_config.vrcfg[vrid].ms_down_time = jiffies + delay;
		      return;
	      } 

	      //集群中已有主设备，保持备份状态，更新主设备超时计时器
	      if (peer_state == VRRP_STATE_MASTER && 
		  (tos_ha_config.vrcfg[vrid].preempt != 1 ||//本地抢占关闭
		   local_monitor_interface_state != NET_STAT_GOOD ||//本地接口异常
		   peer_priority >= tos_ha_config.vrcfg[vrid].priority)) {//对端优先级比本地高
		  delay = 3 * tos_ha_config.hello_interval * HZ + (256 - tos_ha_config.vrcfg[vrid].priority) * HZ / 256;
		  tos_ha_config.vrcfg[vrid].ms_down_time = jiffies + delay;
		      return;
	      }
	      /*
	      ,* 收到优先级低的VRRP报文，不更新主设备超时计时器，
	      ,* 连续三次没收到，定时器自动超时
	      ,*/
	      return;
      }
    #+END_SRC
* 零散
** modprobe和insmod区别
   这两个命令都是用来加载模块的链接程序，区别在于对模块“符号未解析”情况的处理方式，前者会尝试去模块搜索路径中查找其他模块，如果找到符号定义，则会加载改模块，若找不到再报错。这样有利于一次加载所有相关的模块。后者则直接报错。 +考虑到C语言的符号修饰功能十分简陋，在底层编程时全局符号更要精细地处理。防止名字空间污染的做法是自然而然的想法。+  然而Linux 2.6 之后符号要求要显式导出，这个问题已经小了很多。
** 
