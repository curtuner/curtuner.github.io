#+TITLE: 内核实现
#+DATE: 2017-06-21
#+LAYOUT: post
#+TAGS: Linux
#+CATEGORIES: Linux

* bootloader
** 概述
   由于本文主要针对intel CPU来，所以
   计算机内存是挥发性的，即断电之后内存中的数据会丢失。所以要把操作系统内核保存到不挥发的介质中，如flash、磁盘等。所以引导系统的一大问题就是从不挥发介质中引导。操作系统通过引导扇区来提供自己的引导手段。
** 编写bootloader的原因
   计算机内存是挥发性的，即断电之后内存中的数据会丢失。所以要把操作系统内核保存到不挥发的介质中，如flash、磁盘等。所以引导系统的一大问题就是从不挥发介质中引导。操作系统通过引导扇区来提供自己的引导手段。
** 流程
*** 硬件自检
    自检程序在RPROM中，叫BIOS。这是现在PC机的惯例。它的功能主要检测计算机是否满足运行的基本条件，并获取硬件信息，并加载MBR到内存中运行。要注意的是MBR中的程序其实是和操作系统相关的。之后操作系统会将引导扇区读入到基本内存中地址为0x7c00的位置。
*** RPROM中的BIOS
    这是CPU最开始运行的程序，
** 程序编写
*** bootloader
**** MBR
   编写一个操作系统要从MBR中的程序开始，它会被BIOS读入内存地址为0x7c00的位置。MBR先是只包含初始化寄存器和地址线的代码。之后调用内核初始化代码。
   然而这部分并不重要，这里为了方便直接使用xv6的代码即可。注意到gas支持宏定义。
**** 第一阶段
     CPU自身的初始化
* 引导启动程序的编写
  首先编写，存放在第一个扇区的程序,这里就是bootloader。在这之前要了解如何编译，
* 内存管理
  x86的内存管理机制有两种，一种是分段机制，一种是分页机制
* 关闭系统
  系统调用提供了reboot()接口
* TODO 思考
  - bootloader并不是内核的一部分，我们要知道的是bootloader为内核构建了什么环境
  - 建立抽象包括，建立数据抽象和操作抽象
  - 实现的接口通用
* 参考
  - ld文档
