#+TITLE: WiFi无线网络
#+DATE: 2017-06-12
#+LAYOUT: post
#+TAGS: WiFi
#+CATEGORIES: WiFi

* 802.11基础要点
** 无线电（radio）
*** 无线频谱
    无线设备被设定在某个频带上使用，每个频带有相应的带宽，较大的带宽。
** 802.11x的字面含义
   802是IEEE组织的一个专门负责制定局域网标准的委员会，主要负责制定局域网/城域网的委员会。该委员会被分为多个工作组，802.11代表第11个工作组，负责制定MAC协议和物理层技术规范。进一步地，工作组内部还分成多个任务组，负责修改、更新标准的某个方面，使用一个英文字母来表示工作组。
** 802.11 版本
   有了以上的知识，我们很容易理解802.11版本的含义（这里只列出有价值）：
   - 802.11：1997年最早的原始标准，在传输速率和距离上存在不足
   - 802.11a：1999年物理层的补充，可以在5G频段上使用
   - 802.11b：1999年物理层的补充，工作在2.4g上
   - 802.11g：2003年发布，802.11b的后继标准，是为了更高的速率而制定的标准，工作在2.4G上
   - 802.11n：新增MIMO的支持，提高了吞吐量
   - 802.11ac：802.11n的后继者
** 802.11的内容
   802.11只涉及MAC层，以及物理层，对于软件开发者只要理解MAC层的内容和少量物理层的内容即可。
** 省电模式
   由于这些年电池相关的技术并没有太多突破，所以对于移动设备而言如何省电一直是一个重要的问题。802.11考虑了这一点，为STA定义了电源相关的状态，包含Active模式和PS（Power Save）模式。
   之前提过无线设备是半双工的，为了节省成本，对于radio的处理只有一个部件，叫收发器。
* 802.11网络拓扑结构和服务类型
** WLAN有三种网络拓扑结构
   - IBSS（Independent BSS）网络（或者ad-hoc网络）: 是一个点（STA）对点网络结构
   - 基础型BSS（Infrastructure Basic Service Set）网络：一般用BSS来表示，以一个AP为核心的网络
   - ESS（Extent Service Set）网络：使用一个分布式系统（DS）来连接不同的BSS，消除STA之间传输距离受到物理设备的限制。一般的DS指的是有线网络。ESS在域BSS的关系中可以看到，BSS是更加基础的结构。
   IBSS和BSS是最基本的网络结构。但是这个网络结构覆盖范围有限，所以人们将几个BSS联合起来构建了覆盖范围更大的网络，就是ESS。
** 网络的Identification
   - BSSID：Infrastructure BSS以AP为核心，而MAC地址对于设备是唯一的，所以直接使用MAC地址作为BSSID，IBSS也使用MAC地址，不过使用的是随机生成的，与设备的MAC地址无关
   - SSID：WLAN的名字，一般是可读的，BSSID一般和SSID关联。
   - ESSID：ESS包括了一个或多个BSS，要使一个ESS对用户看起来想一个BSS，而用户一般接触不到MAC地址，所以使用的SSID来作为ESSID。
   所以一般公共场所的WiFi都是ESS，我们使用的SSID介入ESSID，但实际移动的时候还是在不同的Infrastructure BSS切换，实际上BSSID在是会改变的。
** 802.11服务
   所谓服务，也可以理解为提供的功能。从模块考虑，802.11的服务分为两大类高：
   1) SS(Station Service)：指STA的功能
   2) DSS（Disstribution System Service）：指DS的功能，一般认为DS是以太网
   而从功能考虑则存在，则有可以分成几类：
   1) MAC层数据传输
   2) LAN口访问控制
   3) 频谱管理
   4) QoS
   5) 时间同步
   6) radio测量
   接下来从功能来分析
*** MAC层数据传输
   - 分布式服务
     STA传送数据需要的服务，即便实在同一个AP下的两个STA也是
   - 

* CSMA/CA
** 引言
   初始802.11有两种模式，一种是DCF模式，一种是PCF模式。DCF模式的核心机制是CSMA/CA机制。
** RTS/CTS模式
   隐藏终端问题（hidden terminal problem），所以需要一个AP来统一管理。于是引入了RTS/CTS模式，RTS和CTS帧都是广播的未加密，CTS（Clear To Send）中文也叫信道清除帧，一个基础BSS是以AP为核心的，所以从AP发出的CTS帧可以清理整个BSS。RTS和CTS的长度一般较小。可以
* 管理操作
** STA接入前的沟通
*** 主动扫描
*** 被动扫描
    STA支持多个信道，而一个AP一般只在一个信道上发射信号，所以STA扫描时一般轮流在不同的频段上接收beacon帧
* MAC帧
  如图，802.11帧的由三个基本域组成，MAC头部、数据域（Frame body）和帧校验序列（Frame Check Sequence）。
  [[./WiFi无线网络/MAC帧格式.png]]
  当然，不是所有帧都是这种格式，对于Qos数据帧和HT数据帧还要附加其他字段。可以看到有四个地址，很多帧并不包含所有地址，一般address1是接收STA的地址（receiver address），发送STA的地址（transmitteraddress）。严格讲地址和Sequence Control都不是必须的，没有数据的情况下连FCS都不是必要的。最重要的是Frame Control和Duration/ID的信息，
** 控制帧
   控制帧控制STA对于共享媒介的访问，
   
*** Frame Control字段
    Frame Control占用两个字节，主要是元数据，该字段的信息量比较大，所以要付出比较多的精力来学习。
* Linux WiFi编程API
** 前言
   目前的无线网络设备编程的编程API，一套叫wex或wext（Wireless Extensions），另一套叫cfg80211和nl80211两套编程接口。前一套逐渐被淘汰了，后一套推荐使用。cfg80211用于驱动开发，nl80211 API供用户空间进程使用以操作利用cfg80211 API开发的无线网卡驱动。目前无线网卡分两种SoftMAC和fullMAC，只有SoftMAC可以使用cfg80211。本节使用Linux 4.11.5的源码作为分析的代码。
** wext的简单介绍
   所有用户空间的请求都统一包括在struct iwreq（interface wireless request）中，在Linux-4.11.5/include/uapi/linux/wireless.h中有查看该结构体的定义：
   #+BEGIN_SRC C
     /*
      ,* The structure to exchange data for ioctl.
      ,* This structure is the same as 'struct ifreq', but (re)defined for
      ,* convenience...
      ,* Do I need to remind you about structure size (32 octets) ?
      ,*/
     struct iwreq {
	     union
	     {
		     char	ifrn_name[IFNAMSIZ];	/* if name, e.g. "eth0" */
	     } ifr_ifrn;

	     /* Data part (defined just above) */
	     union iwreq_data	u; // 参数信息
     };

   #+END_SRC
   参数信息是一个联合体，这在对于C语言是一个常见的做法，但其实有更好的方案，可以在联合体上加个类型信息，不过也无所谓了。iwreq_data的定义也在wireless.h中：
   #+BEGIN_SRC C
     /* ------------------------ IOCTL REQUEST ------------------------ */
     /*
      ,* This structure defines the payload of an ioctl, and is used
      ,* below.
      ,*
      ,* Note that this structure should fit on the memory footprint
      ,* of iwreq (which is the same as ifreq), which mean a max size of
      ,* 16 octets = 128 bits. Warning, pointers might be 64 bits wide...
      ,* You should check this when increasing the structures defined
      ,* above in this file...
      ,*/
     union iwreq_data {
	     /* Config - generic */
	     char		name[IFNAMSIZ];
	     /* Name : used to verify the presence of  wireless extensions.
	      ,* Name of the protocol/provider... */

	     struct iw_point	essid;		/* Extended network name */
	     struct iw_param	nwid;		/* network id (or domain - the cell) */
	     struct iw_freq	freq;		/* frequency or channel :
					      ,* 0-1000 = channel
					      ,* > 1000 = frequency in Hz */

	     struct iw_param	sens;		/* signal level threshold */
	     struct iw_param	bitrate;	/* default bit rate */
	     struct iw_param	txpower;	/* default transmit power */
	     struct iw_param	rts;		/* RTS threshold threshold */
	     struct iw_param	frag;		/* Fragmentation threshold */
	     __u32		mode;		/* Operation mode */
	     struct iw_param	retry;		/* Retry limits & lifetime */

	     struct iw_point	encoding;	/* Encoding stuff : tokens */
	     struct iw_param	power;		/* PM duration/timeout */
	     struct iw_quality qual;		/* Quality part of statistics */

	     struct sockaddr	ap_addr;	/* Access point address */
	     struct sockaddr	addr;		/* Destination address (hw/mac) */

	     struct iw_param	param;		/* Other small parameters */
	     struct iw_point	data;		/* Other large parameters */
     };
   #+END_SRC
   该联合体一般是16个字节，当然有些请求需要更多的字节，所以还要涉及专用的数据结构。如专门用于触发无线网卡发起扫描请求的数据结构（参数）iw_scan_req（在wireless.中）：
   #+BEGIN_SRC C
     struct iw_scan_req {
	     __u8		scan_type; /* IW_SCAN_TYPE_{ACTIVE,PASSIVE} */
	     __u8		essid_len;
	     __u8		num_channels; /* num entries in channel_list;
					    ,* 0 = scan all allowed channels */
	     __u8		flags; /* reserved as padding; use zero, this may
				     ,* be used in the future for adding flags
				     ,* to request different scan behavior */
	     struct sockaddr	bssid; /* ff:ff:ff:ff:ff:ff for broadcast BSSID or
				     ,* individual address of a specific BSS */

	     /*
	      ,* Use this ESSID if IW_SCAN_THIS_ESSID flag is used instead of using
	      ,* the current ESSID. This allows scan requests for specific ESSID
	      ,* without having to change the current ESSID and potentially breaking
	      ,* the current association.
	      ,*/
	     __u8		essid[IW_ESSID_MAX_SIZE];

	     /*
	      ,* Optional parameters for changing the default scanning behavior.
	      ,* These are based on the MLME-SCAN.request from IEEE Std 802.11.
	      ,* TU is 1.024 ms. If these are set to 0, driver is expected to use
	      ,* reasonable default values. min_channel_time defines the time that
	      ,* will be used to wait for the first reply on each channel. If no
	      ,* replies are received, next channel will be scanned after this. If
	      ,* replies are received, total time waited on the channel is defined by
	      ,* max_channel_time.
	      ,*/
	     __u32		min_channel_time; /* in TU */
	     __u32		max_channel_time; /* in TU */

	     struct iw_freq	channel_list[IW_MAX_FREQUENCIES];
     };
   #+END_SRC
** TODO nl80211
   nl80211基于netlink机制，netlink是Linux平台下一种基于socket的IPC通信机制，也是一种特殊的socket。domain参数是AF_NETLINK，
* wpa_supplicant
  wpa_supplicant是一个支持WEP、WPA和WPA2的跨平台WPA客户端，
* WiFi P2P基础
** 概述
   它是由WiFi联盟推出的另一项
* 零散
** 802.11的五种地址
   - BSSID
   - DA（Destination Address）
   - SA（Source Address）
   - TA（Transmitter Address）：将MAC数据包发送到无线介质中的STA地址
   - RA（Receiver Address）：
** MAC地址的约定
   MAC占用6个字节，前3个字节是厂商的ID，后3个字节是网卡的唯一编号。第48位用于表示地址是组播地址还是单播地址，组播地址为1,单播地址则为0，第47位表示MAC地址是全球唯一还是本地唯一，称为G/L位。另外，由于字节序大小端的问题，我们看到的地址会有所不同，对于小端的机器，最右边是第48位，而对于大端的机器，最左边是第48位。
** CSMA/CA运作模式
   CSMA/CA具体运作是由协调模式确定（coordination Function，CF），有四种不同的协调模式
   1) DCF
   2) PCF
   3) HCF（Hybrid，混合型协调功能）
   4) MCF（Mesh CF）
** 
* 思考
  毫无疑问，协议栈每个层次的传输能力是一样的，关于元语的翻译。
  协议栈每一层提供的服务可以理解为为上一层提供的接口。这些接口既可以是内部调用也可以是外部调用的，
  802.11中只有数据帧才是上层数据的包装，
  MAC层会丢弃错误的数据包

* 参考
  - 深入理解android：WiFi模块 NFC和GPS卷
