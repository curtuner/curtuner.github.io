#+TITLE: 算法思考
#+DATE: 2017-07-13
#+LAYOUT: post
#+TAGS: Algorithm
#+CATEGORIES: Algorithm

* 引用
* 数据结构的理解
  数据结构在在过程式编程中往往支持着运算，所以最基本的操作包括读、计算和写。数据结构的选择要看哪个动作是最多的。当然实际的对数据结构的操作粒度要细得多。读其实属于计算，属于算法范畴了。写反而是简单的操作，比较麻烦的是构建的过程，构建过程主要也是一个写的过程。不同于一个简单的变量赋值来改变状态，对于集合的增量式构造可以看作是改变集合变量的状态，具体实现可以是改变集合的指针。指针没变可以视为某种优化，这样方便一点。对于数据结构的使用还在于我们的实际使用的数学概念是哪个。根据不同情况可以有不同的概念。最基础的是读
  任何数据结构必须提供完全的读取功能，这样才可以完整地被计算。容器类结构的基础是对元素的遍历功能，所以根据提供的函数能访问所有元素才是王道。STL的迭代器就提供了这个。
  数据结构的映射根据其可复用的程度来判断其效率，这个也是数据结构教程往往花大量的篇幅在数据结构映射上，一般我们不喜欢数据结构重新构造，所以多数以复用算法为主。另一方面，这也造成了一般的函数式语言在实现数据结构是效率不佳的情况，当然数据结构的服用上主要得依赖编译器了。
** 集合数据结构
   集合数据结构是我们最常见的，STL中最常用的是vector、string、deque、list、set、multiset、map。本质上这些在数学上的表达方式差不多。物理的顺序会决定者实际的顺序。元素的顺序对于读操作会比较麻烦。集合数据结构的读必定是要求输出所有的元素，
** 查询数据结构
   一个有趣的一点是，添加和删除的过程往往需要特别的处理，而这个处理和查询过程又经常存在相似性。所以这个可以独立出一个操作。由查询，添加和删除共用。作为关联数据结构，其存储的对象是关联。内容关联。
   #+BEGIN_SRC C
   
   #+END_SRC
* stl的FAQ
** stl的vector是如何实现的？
   实现：vector使用动态数组实现，当数组的内存不足时，重新分配一块大小为原来的$\alpha$倍的内存空间，将内容复制到新的空间中，在释放原来的空间。
   时间复杂度：虽然某些时候开销比较大，但平摊之后每个插入操作仍然是常数时间复杂度。
** stl的vector
   vector
