#+TITLE: 文字识别探索
#+DATE: 2018-05-08
#+LAYOUT: post
#+TAGS: OCR
#+CATEGORIES: OCR

* 前言
  OCR是一个多学科交叉领域，涉及到计算机视觉（图像处理）、模式识别、机器学习和神经网络等方面知识。
  当前文字识别面临的困难：
  1) 开源的文字识别库，中文识别率都不是很让人满意
  2) 完整的问题识别
  
  对于RDP文字识别的稍微能取巧的地方：
  1) RDP协议本身支持传输字模（Glyph）数据，字模的识别率非常高，一般开源的OCR库就能提供不错的效果。也就是有部分数据可以精确识别。
  2) 多数文字都比较规则，不用处理手写的字体或者不同角度的处理，预处理相对简单。
* 当前文字识别软面临的问题
  目前大多数都是文字识别，都是识别的RDP协议中传输的字模（Glyph），对于没能称为字模的程序无法识别。至于文字识别会呈现为字模（Glyph），一般取决于软件的实现。比如，打开包含文字的图片，就不会传输字模，这就造成了一个问题，如果不独立分析字模，一般字模是相对重要的数据，可以输出字模的程序包括：
  - Windows各种自带的工具软件（类似cmd，powershell）
   
  总之借助字模识别可以完成大部分RDP指令的审计。但是模糊识别就比较可惜了。
** 字模和图像文字识别
   RDP对此其实区分得比较好了，所以可以通过预处理来完成这两类字体的区分。
* 文字识别工具
  效果比较好文字识别工具本身属于比较容易盈利，所以大多不会开源。文字识别涉及的工具大体分成两种：
  1) 预处理工具 
  2) 识别工具
** Tesseract-ocr
   Tesseract-ocr提供了C语言和Python的接口，使用Python接口自然是最方便的。
* 存储文件格式
  文件主要存储两种信息，提取出的文字和时间，方便起见由于Guacmole协议的历史文件是每隔200ms打一个时间戳，比较齐整。文件方便检索。设计的思路可以很简单。最简单的做法是对照Guacamole历史文件在每个时间戳之间记录文件的文件的格式。
* Tesseract-ocr的开销
  
* 关于依赖注入
  
** 工具使用上的问题

  
