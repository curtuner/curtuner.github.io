#+TITLE: 源码分析文档编写规范
#+DATE: 2017-09-08
#+LAYOUT: post
#+TAGS: Documentation
#+CATEGORIES: Documentation
* TODO 某个数据结构的源码剖析
** 概念
   实际数据结构只是最终的实现，而且往往不是最终是实现。
** TODO 理解结构体的定义
   关注点是，我们使用了程序的设施实现了哪些抽象，构建了哪些概念，以及如何构造这些概念。
   一个结构体是一个什么样的结构体呢？从简单的结构体开始：
   #+BEGIN_SRC C
     struct One {
	 int x;
	 int y;
     };
   #+END_SRC
   这算是最简单的结构体了，单纯只有数据聚合的作用。数学一点讲，这起到笛卡尔积的作用。其结果和构成二元组一样。当然这只是常见的场景，其实x字段和y字段并不一定是没有任何关系的。比如x可以是y的两倍，虽然乍看之下没有太大意义，但这确实是常见的现象，有时不同的字段相关性很强，有时只是为了避免重复计算（如hash值字段）。
   C语言中对于没有指针的结构体，我认为是
   一个结构体是否依赖外部定义，是这个结构体的基本问题？
   一个结构体什么时候会达成概念的完全？
   达成概念的完全是否意味着初始化的达成？
* 结构的创建（抽象的达成）
  之前我以为这是一个需要放到抽象里的内容，但是现在的想法有所变化，抽象的达成过程不应该提前引入抽象。
* 结构的各个操作
  如果是关联的数据结构如hash表，树等就需要有查询(搜索)的能力。之后就是基础的能力，完成一个抽象之后需要有的能力，读取对象的能力（如输出对象所有元素的值），修改对象状态的能力，如果有结构属性就还有映射对象的能力（一般是增加元素或者删除元素）
* 隐藏的局部实现（如某些优化）
* 进行数据结构的hack
  目标的话我认为是先建立感性认知吧，毕竟读完代码后其实逻辑上没问题，遇到问题也知道去哪里寻找问题，但是反应却很慢。这是没有建立起感性认知的锅。所以我的想法是先跟踪对象的建立和在所有操作下的行为并打印出来，以此来建立感性认知。
* 自己实现
  如果要自己实现，最好要有所限制，一定要抽取最本质的概念，实现最简单的部分，尽量不要去考虑优化问题。一般情况下我们要跟踪对象，达成所有函数的调用。
* 资源池（为了提供素材）
   #+BEGIN_SRC C
   
   #+END_SRC
*  TODO 问题 
   - [ ] Python对于对象的分类对于数据结构定义的启发有多大
* 思考
  - 
