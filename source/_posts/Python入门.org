#+TITLE: Python入门
#+DATE: 2017-07-08
#+LAYOUT: post
#+TAGS: Python
#+CATEGORIES: Python

* 概述
  Python的一大特点是各种概念十分简单而灵活。Python中一切皆对象，即使类型也是对象。所以有编程经验的人学习Python可以先理解其对象的构造。
* Python对象
  Python解释器先编译源码后生成了pyc文件，之后在启动虚拟机后加载pyc文件。
** Python对象的管理
*** 概述
    Python中一切皆对象，当对象环境构建完成后，就可以使用同样的操作来处理每个对象了，所以一般推荐从object.c文件开始阅读。了解Python如何管理对象，以及对象是如何实现的。*
** Python3的整数对象
   先看看他的定义：
   #+BEGIN_SRC C
     struct _longobject {
	     PyObject_VAR_HEAD
	     digit ob_digit[1];
     };
   #+END_SRC
   这个是长整数对象，所以也是一个变长的对象。同时这也暗示了一件事情，对于类对象的定义之前其实要确定要生成的对象的结构，类对象更多的是确定方法而已。实际的数据除了公共部分还是需要自己定义的。这和定义类是差不多的。
* Python对象模型（类型系统）
  在这里先，对象模型做一个简要描述。对于一个集合O，
  1) 存在两种不对称关系：
     1) is-instance-of
     2) is-kind-of
  2) 集合中只有一个对象<type>，<type>和<type>是is-instance-of关系的，<type>也称为metaclass对象；
  3) 集合中只有一个对象<object>， <type> is-kind-of <object>；
  4) 任意一个is-instance-of <type>的对象，都称为类对象（包括<type>也可以称为类对象）；
  5) 任意一个is-instance-of 类对象的对象，都称为实例对象。
     
  
  以上便是Python对象模型的组成要素。可以看到有两个组成对象，<type>是所有对象实例化所依赖的。而object是所有类对象的最终父类。
  同时这也只提供了这两个关系，这两个关系都是不对称的，也就是说我们可以知道一个实例对象所属类对象是哪个，但是我们无法知道这个类对象被实例化了多少实例对象。同理，我们可以知道一个类对象所属的类对象是哪个，但是我们也无法知道类对象有多少子类对象。
  
* Python的类
  构建类的过程需要借助类的元信息，
** 继承
*** super()
    用于返回一个代理对象，它可以让我们访问父类或者其兄弟类的方法，不加参数的时候默认会返回的是当前类在MRO中的下一个。自己加了参数之后可以重新定位。必要的时候连当前类的子类也可以使用。
* Python函数机制
  Python的函数也是对象，我们def某个函数的时候其实就创建了一个函数对象。
** PyFunctionObject
   #+BEGIN_SRC C
     /*Include/funcobject.h*/   
     typedef struct {
         PyObject_HEAD
         PyObject *func_code;        /* A code object, the __code__ attribute */
         PyObject *func_globals;     /* A dictionary (other mappings won't do) */
         PyObject *func_defaults;    /* NULL or a tuple */
         PyObject *func_kwdefaults;  /* NULL or a dict */
         PyObject *func_closure;     /* NULL or a tuple of cell objects */
         PyObject *func_doc;         /* The __doc__ attribute, can be anything */
         PyObject *func_name;        /* The __name__ attribute, a string object */
         PyObject *func_dict;        /* The __dict__ attribute, a dict or NULL */
         PyObject *func_weakreflist; /* List of weak references */
         PyObject *func_module;      /* The __module__ attribute, can be anything */
         PyObject *func_annotations; /* Annotations, a dict or NULL */
         PyObject *func_qualname;    /* The qualified name */

         /* Invariant:
          ,*     func_closure contains the bindings for func_code->co_freevars, so
          ,*     PyTuple_Size(func_closure) == PyCode_GetNumFree(func_code)
          ,*     (func_closure may be NULL if PyCode_GetNumFree(func_code) == 0).
          ,*/
     } PyFunctionObject;
   #+END_SRC
   先了解一下
** 无参函数的调用
   先看看下面这个代码
   #+BEGIN_SRC python
     def f():
         print("Function")


     f()
   #+END_SRC
   这里会被翻译成两个PyCodeObject，所以说这是直接的静态部分。可以直接翻译。程序运行的时候，
   名字什么的也是用户动态设定的，所以直接存储在静态部分就可以了。
** 有参函数的调用
   Python中按照参数的形式可以分成四种类别：
   - 位置参数
   - 键参数
   - 扩展位置参数
   - 扩展键参数
     
   在函数调用的过程中，一般是先解析参数，之后设置局部变量，无论时位置参数还是扩展位置参数都差不多。生成PyFrameObject，之后在这个PyFrameObject提供的环境下运行，Py_EvalFrameEx会以PyFrameObject*为参数。PyFunctionObject在实际运行过程中不会被使用，只是用于保存信息

   位置参数和键参数的个数只取决于键参数的只取决于实参
** 名字空间和PyFunctionObject的关系
   在刚开始运行程序的时候，一般来说我们是运行一个模块，交互模式也有一个默认的模块。在一开始的帧中f_locals和f_globals，所以我们在一开始这个真。
   对于局部变量Python其实可以在编译时就知道它实际占用的空间，所以甚至可以不用字典来存储
   名字空间决定了Python中很多的符号语义。

   把名字空间和函数定义绑定的做法
** 闭包
   名字空间和函数捆绑后的结果称为闭包。所以有些东西是被静态绑定的。
** 修饰器和闭包
   理解修饰器的关键在于理解闭包
* TODO 引用计数功能的实现
      为了支持引用计数，Python在每个对象的开头增加一个字段，用于记录引用计数的值，在64位系统下这个值也是64位有符号整数（之所以有符号可能有其他作用吧，以后再补充）。
   #+BEGIN_SRC C
   void Py_IncRef(PyObject *o);
   void Py_DecRef(PyObject *o); // 相比之下这个函数要处理引用计数为0的情况
   #+END_SRC
   需要注意的是一个对象符合释放其内存是在对象指向的类对象中描述的。另一方面，Python由于释放对象需要使用Python对象的类对象的函数，所以Python对象的共同部分是不能缺少达到类对象的能力。所以对于每个Python对象而言引用计数和指向类对象的指针是必要的。实际上，PyObject开头两个字段也正是这两个：
   #+BEGIN_SRC C
     typedef struct _object {
	 Py_ssize_t ob_refcnt;
	 struct _typeobject *ob_type;
     } PyObject;
   #+END_SRC
   对于可变长度的对象，其定义是
   #+BEGIN_SRC C
     typedef struct {
	 PyObject ob_base;
	 Py_ssize_t ob_size; /* Number of items in variable part */
     } PyVarObject;
   #+END_SRC
   可以看到只是在原有的基础上增加了一个字段，只是对PyObject的扩展而已，因此这是三个我们最常用的字段，为了方便我们使用，并且提高可读性，又提供了以下宏：
   #+BEGIN_SRC C
     #define Py_REFCNT(ob)           (((PyObject*)(ob))->ob_refcnt)
     #define Py_TYPE(ob)             (((PyObject*)(ob))->ob_type)
     #define Py_SIZE(ob)             (((PyVarObject*)(ob))->ob_size)
   #+END_SRC
   有趣的一点是Python中异常也是对象，其类对象也是静态分配的内存。
** 对象的创建和初始化
*** 接口的实现
   和C++类似，PyObject申请内存和初始化内存的方式也是分开的。这样可以更加灵活。对象的创建信息在类对象中，所以如果想要创建一个非类对象，首先要必须有一个类对象。所以类对象是Python虚拟机的基石。
*** 对象的内存管理器
    
** 生成器对象
   带有yield的函数可以
** 作用域和命名空间
   Python中作用域往往没有明确的制定，我们可以制定一个符号的作用域。除了global作用域以外（或者global其实最终也被加入到某个函数之内？），总是关联到某个函数。按字面意义就是某个符号绑定有效的区域。
   相对而言，命名空间是显式指定的，要在名称前加前缀。
   一个符号的作用域是在编译时决定的，主要看作用域中是否有绑定语句。
   而解析道具体的值的行为则是在运行时决定的。
   简单地说，符号在哪里解析是在编译时决定的，这是实现闭包的要求，而符号的值则是在运行时解析的。
   这里一个比较容易出错的问题是但我们能够使用某个函数对象的时候，其实其外层作用域已经被建立了。
** 内存布局
   默认情况下，Python对象的开头是一个用于引用计数的指针，之后是只是对象类型的Type。
** 字符串对象
   Python按照对象内存固定和不固定来区分定长对象和变长对象，其长度一般存储在对象中，而根据在运行时是否改变对象的的内存来区分对象的类型，分为可变对象和不可变对象，
* 符号绑定
** 概述
   简单地说，Python使用符号来绑定对象来复用对象。虽然Python的绑定方式语法不止一种，但实际上都是一样的。类似import、def等都是可以看作是绑定对象和符号的语法糖。可以理解为对于某些类型的对象是可以有特殊的绑定方式以便于阅读（？）。
   跟C++比较不同，个人感觉Python的对于内在一致性还是比较重视的，如Python3把print关键字都去掉了。是可以有特殊的绑定方式以便于阅读（？）。
   跟Java不同，Python其实不存在C语言概念上的值，一切皆对象，表达式求值其实得到的是对象。C语言中的值是指的变量表示的内存块的状态，而Python的值指的反而倾向指某个对象，所以C语言的赋值等号指的是改变变量状态。
   C++对象系统的一个设计目标是是对象的表现得像基本数据类型一样，Python没有基本数据类型，所以对象系统整体要简单得多。
   Python终归是过程式语言，所以还是必须有改变状态的操作，对象占用实际的内存，所以改变对象的状态的能力还是需要的。函数
* 修饰器
  修饰器的一大要求是接口不要改变，这样才能保持透明，然而修饰器这个语法糖其实没有什么限制，只要函数可以接受一个参数基本就能够使用修饰器语法了。为了保持透明度，就需要保持函数信息的不缺失，这个时候就需要有functools.wraps来包装函数。
* PyDictObject分析
  PyDictObject在Python中大量使用，所以其实
* Python的编译流程
** 虚拟机
   Python的虚拟机相比Java的更加抽象，也就是说离真实的机器更远。这也意味着我们能优化的粒度不大。Python的虚拟机主要在于模拟cpu运行程序的过程。它运行的是PyCodeObject包含了程序的字节码指令和静态信息。
** 编译器
   虚拟机运行的代码是用一个PycodeObject来表示的，相关的信息存储在该对象中。作用域本身在代码中是隐含的概念，但在编译后其实是一个实在的概念，它会对应一个PyCodeObject。
   PyCodeObject，
* Python对数据结构和算法的支持被
** 前言
   一般而言数据结构最为重要的依然是读写和映射机制。
** 可迭代对象
   
* Python运行环境的初始化
** 概述
  Python真正意义上的初始化，调用的是函数 ~Py_Initialize~ ，如下：
  #+BEGIN_SRC C
    void
    Py_Initialize(void)
    {
	Py_InitializeEx(1);
    }
  #+END_SRC
  可以看到这个函数之后又直接调用了 ~Py_InitializeEx~ ，这个函数的作用大致上包括：
  1) 加载多个基础的module，如__builtin__，sys等
  2) 完成Python类型系统的初始化
  3) 异常系统的初始化

  启动类型系统的初始化是非常复杂的，
  接下来就是设置系统module
** TODO 线程的初始化
** 系统module的初始化
   虚拟机创建的第一个module是__builtin__ module。interp->modules创建为一个PyDictObject对象，这个对象维护系统所有module，这些module是所有的PyThreadState使用。接下来分析一下_PyBuiltin_Init，可以看到
** 激活Python虚拟机
   Python进入到字节码虚拟机后才是真正地执行。Python有两种运行方式，一种是交互环境，一种是类似Python test.py这样的运行脚本的方式。但最终它们都进入了同一个字节码虚拟机。
* Python虚拟机的进程和线程
* Python的名字空间
  Python的名字空间有三个：builtins、global和local。Python每一个文件被视为一个module。一个符号是用于代表某些事物的一个有主语记忆的字符序列。module的一个目的是划分名字空间。module加载的方式有两种：
  1) 通过import动态加载
  2) 以脚本模式运行的文件，作为主module被自动加载
  无论那种方式，加载的过程都会执行其中的表达式。Python中改变名字空间的语句是赋值语句（不算表达式）。一个 "对象的名字空间" （一切皆对象，所以名字空间也属于对象）。一个对象的名字空间中的所有名字都称为对象的属性。对于module，名字空间的规则很清晰，而对于一个module，名字空间的使用有另一套规则。在module内部，名字空间存在可见行的问题。在一个模块内部名字空间和作用域对应，所以需要注意的是Python虽然很多东西都是动态加载的，但作用域都是静态作用域（词法作用域）。builtins是最顶层的名字空间，global是module的名字空间，而global是module中的函数的名字空间。Python运行过程中搜索一个名字的顺序是locals->globals->modules
* Python对象的构造
  如果先学过C++，会发现__init__方法并不符合构造函数的定义，它是一个对象方法，实际上Python的构造函数对应的是__new__方法，这是个类方法。__new__会返回一个对象，供Python使用
* 迭代器对象
  Python 关于迭代有两个概念，一个是iterable一个是iterator，之所以有符号可能有其他作用吧
  一个迭代器对象要实现的方法有两个，__iter__()和next()，Python3中就是__next__()，如果是要兼容python2，就要两个方法都实现，或者定一个别名。从语义上讲，迭代器对象只要有__next__方法就足够了，但是如果为了使用for in语句，就需要实现__iter__方法，从而在
* C11的原子操作
* TODO weakref
  Python的垃圾回收是使用的引用计数的方式，一旦没有引用了就会在某个时刻被回收
* Python多线程
  Python的内置的线程库有两个，thread和threading。其中thread是builtin module，而threading是标准库中的模块，是在thread的基础上实现的。
  Python启动时并不支持多线程，也就是说Python支持多线程的数据结构和GIL都是没有创建的。这是有Python的使用场合决定的。
  Python3的多线程比较难以理解，这里先使用Python2的源码来分析。
  Python的threading库可以在线程中执行任何python的可调用对象
** Python2 GIL的实现
   首先GIL是一个变量，其类型是void* 。
   #+BEGIN_SRC C
     static PyThread_type_lock interpreter_lock = 0; /* This is the GIL */
     PyThread_allocate_lock(void)
     {
         sem_t *lock;
         int status, error = 0;

         dprintf(("PyThread_allocate_lock called\n"));
         if (!initialized)
             PyThread_init_thread();

         lock = (sem_t *)malloc(sizeof(sem_t)); // 分配sem_t

         if (lock) {
             status = sem_init(lock,0,1);
             CHECK_STATUS("sem_init");

             if (error) {
                 free((void *)lock);
                 lock = NULL;
             }
         }

         dprintf(("PyThread_allocate_lock() -> %p\n", lock));
         return (PyThread_type_lock)lock;
     }
   #+END_SRC
   所以看到这里的GIL其实是信号量，由于Python需要可以同时在Windows上运行，所以，GIL才会是void*类型，否则如果只要在Linux上运行，就只会需要sem_t*类型。创建了GIL后，

   PyThread_acquire_lock()有两种工作方式，通过参数waitflag来划分，如果waitflag的值大于0,则代表当前线程是否等待其他线程释放GIL，然后由操作系统唤醒。
   GIL算是主要的多线程环境了，之后就是创建多线程。
   Python的线程接口接近程序的接口。
*** 线程状态保护机制
    首先，还需要理清Python中线程的问题，在《Python源码剖析》中讲到Python线程是原生线程，这个其实会造成混淆。其实只是线程时一个描述动态过程的概念，python自然需要线程的支持。但是对于线程的理解，在虚拟机上，应该指的是运行虚拟机字节码的流程（即字节码一个个运行的流程）。而不要再考虑C语言级别。那么问题就是，线程时运行字节码的过程，给Python虚拟机造成的副作用，虚拟机没有寄存器的概念，所以写入寄存器对应压栈。
    Python3使用了c11的机制
* 实用知识
** TODO 将数据结构读取到文件中
** 如何提供引用计数功能
   首先Python中使用到的对象每个在内存中的第一个位置就是引用计数的整数内存，目前是64位的整数。编程时要手动使用增加和减少引用计数来维护。由于比较常用，所以可以使用宏或者inline函数来减少开销。
   引用计数的增加和减少，需要注意的是指针为NULL的情况
   #+BEGIN_SRC C

	 (((PyObject*)(op))->(ob_refcnt++))		\

     #define Py_DECREF(op)\
	 do {	     \
	     PyObject* _py_decref_tmp = (pyObject*)(op);\
	     if (--(_py_decref_tmp) == 0) {		   \
		 _Py_Dealloc(_py_decref_tmp);	   \
	     }					   \
	 } while(0)
	
     #define Py_XINCREF(o)				1	\
	 do {						\
	     PyObject* _py_xincref_tmp = (PyObject*)o;	\
	     if (_py_xincref_tmp) {				\
							     \
	     }						\
	 } while (0)
   #+END_SRC
   
* 模块对象
* 实用函数
  关于字符串的匹配问题，Python提供了大约三种工具，一般处理函数、Unix shell格式的匹配以及正则表达式匹配，三者的用法有所不同而已。
* 虚拟机初始化
  虚拟机的初始化过程其实已经把必要的东西都构建完毕了，我一其实没有足够的内容了。
* Python字节吗拆解
  dis模块是Python提供的反编译的结果，Python提供了用户去访问，PyCodeObject的能力，所以可以在运行时改变程序的行为
* Python2和Python3的某些不同
* Python虚拟机
** 前言
   Python虚拟机属于高级语言虚拟机，所以其实对于虚拟机的研究着眼于对程序运行时的理解。Python程序编译成虚拟机可执行的格式之后才会运行。可执行文件是描述一个程序的静态部分，它足以描述一个的虚的一切。但是程序在未运行之前是无法了解其结果的，原因是我们的程序中一般包含“空白”，没有这个“空白”是无法得到具体结果的，程序的空白一般是对应“参数”，用户输入这些。一个程序在运行过程中必须要能够填补这些”空白“。允许时的一大关键作用就是填补“空白”。所以我的思路是先了解一个有“空白”的程序，在根据这些空白来了解运行时。
** PyCodeObject对象
   Python程序被编译后生成pyc格式的文件，而pyc格式的文件会被虚拟机读取后会被解析为PyCodeObject对象。为了方便起见，这里直接关注PyCodeObject对象的内容，其实没有本质区别。
   PyCodeObject对象在Python 3.6.2中的定义是：
   #+BEGIN_SRC C
	/* Bytecode object */
     typedef struct {
	 PyObject_HEAD
	 int co_argcount;		/* #arguments, except *args */
	 int co_kwonlyargcount;	/* #keyword only arguments */
	 int co_nlocals;		/* #local variables */
	 int co_stacksize;		/* #entries needed for evaluation stack */
	 int co_flags;		/* CO_..., see below */
	 int co_firstlineno;   /* first source line number */
	 PyObject *co_code;		/* instruction opcodes */
	 PyObject *co_consts;	/* list (constants used) */
	 PyObject *co_names;		/* list of strings (names used) */
	 PyObject *co_varnames;	/* tuple of strings (local variable names) */
	 PyObject *co_freevars;	/* tuple of strings (free variable names) */
	 PyObject *co_cellvars;      /* tuple of strings (cell variable names) */
	 /* The rest aren't used in either hash or comparisons, except for co_name,
	    used in both. This is done to preserve the name and line number
	    for tracebacks and debuggers; otherwise, constant de-duplication
	    would collapse identical functions/lambdas defined on different lines.
	 ,*/
	 unsigned char *co_cell2arg; /* Maps cell vars which are arguments. */
	 PyObject *co_filename;	/* unicode (where it was loaded from) */
	 PyObject *co_name;		/* unicode (name, for reference) */
	 PyObject *co_lnotab;	/* string (encoding addr<->lineno mapping) See
					Objects/lnotab_notes.txt for details. */
	 void *co_zombieframe;     /* for optimization only (see frameobject.c) */
	 PyObject *co_weakreflist;   /* to support weakrefs to code objects */
	 /* Scratch space for extra data relating to the code object.
	    Type is a void* to keep the format private in codeobject.c to force
	    people to go through the proper APIs. */
	 void *co_extra;
     } PyCodeObject;
   #+END_SRC
   它对于Python源码中的一个代码块
* 装饰器
  有特殊的语法糖，所以没有足够的内容，没有
* 使用Python来进行脚本编程和系统管理
** Python解析命令行
   相比Shell，Python解析命令行要麻烦一些，但是功能强大。一般使用argparse这个模块来解析。
* 虚拟环境
  一般虚拟环境最常用的是virtualenv
* 协程的实现
  Python有不只一种的协程实现。协程其实就是一个例程，可以在任意地方进入，也可以在任意地方离开。
* 生成器的原理

* Python包和模块的地位
  模块当然是放类和函数的，这是直接暴露的东西，作为文件本身有隔离性，既然使用了模块，那么关键就是理清模块之间的依赖关系，尽量的强依赖的模块放在依赖
* multiprocessing
  这个模块如果在Linux下的话就是对fork的包装，而进程间通信则是通过pikle来完成。这样才可以传递Python对象。
* 零散
  - 就函数调用来说，存在顶层，这个顶层存在global的命名空间。
  - 当我们进入Python的交换模式之后发现打印了文字之后，其实Py_Initialize已经被调用了，所以
  - Python中类似sys其实很早就被加载了，但是为了让初始环境比较干净，它并没有让这些东西变得可见。
  - 表达式一般要求返回某个类型的值
  - 虚拟机是比较原始的代码了，基本已经不是一般的应用层编程了。
  - Python的虚拟机自定义了类型系统，而每个类型都是而且都可以作为PyObject，所以可以统一处理。但相对的，就必须在编写虚拟机之前，把内置类型都处理完毕。
  - 字节码指令对符号或者常量的操作最终都反应到运行时栈和local名字空间
  - 复制语句有不同的解释
  - 名称解析到哪个作用域是函数定义的时候就决定了
  - 赋值的说法其实是是C语言的概念，虽然多数时候可以套用，但是如果不把好其中的区别，很容易会出错。
  - 表达式有多种，一个共同的特点是只有一个返回值。返回一个列表也算是只有返回值，这个和Python的解构绑定可以达到返回多个值的效果。
  - 函数也是对象
  - 符号在哪个作用域解析是静态决定的，而符号解析到值的过程实在运行时决定的。
  - 一切皆对象可以让内存被统一管理，而对象的类型择提供了如何使用的信息，包括管理。所以类型对象是虚拟机基础的部件。另一方面，这也说明不同类型直接的差别可以非常巨大。
  - 要注意C和Python的隔离，不要把概念混淆
  - Python源码的实现有很多看起来对于学习编译原理没有用的东西，但要有耐心，这是工业级的代码
  - 突然对于C语言有了新的想法，其实全局的内容（表现是拥有全局的符号）构成了一个程序的基础结构。而其他局部的数据则构成了各个局部对象的内容
  - 对于static即使取得了外部地址，也会引起段错误。虽然实在运行时发现的错误，不过也可以说明这是没有漏洞的。
  - 一切皆对象的另一个作用是统一了内存管理的形式，虚拟机的构建也是基于该结构的
  - 栈帧是执行环境的一种实现，Python使用PyFrameObject来实现，Python倾向用链表实现栈
  - PyAPI_FUNC 是为了和C++交互，同时显示声明这是一个Python公开的符号，这样当想用C/C++来调用Python中的函数时就可以使用了。
  - ~__builtin_offsetof~ 是gcc提供的函数，可以计算编译器在宏里面的函数
  - Python一开始就将一切对象化的做法，使得Python本身元编程能力极强
  - 但对象引用计数为0时要调用tp_dealloc字段指向的函数，如果对象是通过tp_alloc申请的，最后tp_dealloc就会调用这个函数。所以tp_dealloc可能是存在的
  - Py_True, Py_True的本质是PyLongObject对象，我一其实还是使用整数来替代
  - 关联容器的目的是将两个关联的元素联系起来，方便用户通过一个元素来找到关联的元素。有趣的是一般使用关联起来的两个元素是没有公共信息的元素，也就是你不可以通过一个元素来限定另一个元素的取值。要达到这个程度才是关联容器的作用之处。
  - 需要如何hack
  - 关联容器的关联是某种关系，可以看作一一映射，一般情况下，我们然它们在一块内存里。PyDictObject，使用元素对实现映射的概念。Python的hash表存储的对象用于存储这些联系。
  - 如何访问一个集合，如果是用连续的内存空间来存储集合元素，那么，其实地址可以代表这个集合，因为我们会需要起始地址来访问。如果是链式的集合，我们需要通过某个元素从而达到所有的元素。比方说单向的树，往往只有根节点满足条件，而图的话需要存储的是内存。通过连续的空间来组织。总之我们表示集合的对象需要能够访问集合中所有对象的能力的所有能力。
  - Python里面有的对象是可以操作的对象和自动回收的对象，此时则以PyObject作为其基础类型
  - 线程是一个动态的概念，我们用于表示线程的结构体，本身又是静态的数据，所以可以认为是线程对应的对象。
  - PyInterpreterState对象维护着所有的PyThreadState对象的使用，
  - 需要注意的是Python目前依旧不能运用多核的性能，所以没救。PyPy是在CPython上使用的
  - 按域语言来算Python的module也可以是C语言编写的。
  - Python虽然有对应线程的对象，但是其实进程调度都是借助操作系统的原生线程。
  - 启动线程的参数时void* ，因为void*类型本身意味着可以指向任何东西。
  - 还需要再次提醒，GIL（全局解释器锁）是对于多线程而言。所以无法利用多核。
  - 所谓的Python使用的原生线程是值他们的线程接口的实现实质是包装了函数
  - 实际上Python的运行器错误才称为异常
* TODO 问题 [%]
  - [ ] 内置的类对象一般处于数据段中，而动态加载类库的时候应该是动态在堆中分配内存，其具体过程是怎样的？
  - [ ] Python是如何设计的？
  - [ ] tp_free和tp_dealloc的区别
  - [ ] tp_itemsize的作用
  - [ ] tp_new的作用
* 解答
** Python中一个类型最重要的是需要考虑哪些字段？
   首先是创建的部分，需要有申请内存和释放内存的部分，对应到PyTypeObject就是tp_new和tp_dealloc。long_as_number
** Python模块、库和包的区别？
   库只是一个比较笼统的概念，在Python中不和模块以及包相提并论。模块一般值一个Python文件，包是指带有__init__.py的目录，目录下可能有模块或者其他子包
** 线程调度机制有哪些基本问题?
   - 何时进行线程调度？
   - 如何选择激活哪个线程？
   有趣的是Python的线程选择直接有操作系统来操作，所以Python的线程是原生线程。
* 参考
  - [[https://www.zhihu.com/question/30082392][知乎：python中的模块、库、包有什么区别？]]
  - [[https://stackoverflow.com/questions/5607283/how-can-i-manually-generate-a-pyc-file-from-a-py-file][stackoverflow How can I manually generate a .pyc file from a .py file]]
